
Projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000141d8  08008ef8  08008ef8  00018ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0d0  0801d0d0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0d0  0801d0d0  0002d0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0d8  0801d0d8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0d8  0801d0d8  0002d0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d0dc  0801d0dc  0002d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801d0e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f6f8  200001e0  0801d2c0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f8d8  0801d2c0  0003f8d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b08  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  00045d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00048ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00049f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029008  00000000  00000000  0004aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c48  00000000  00000000  00073ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9bbd  00000000  00000000  00087b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001816cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  00181790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003836  00000000  00000000  001869c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008edc 	.word	0x08008edc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08008edc 	.word	0x08008edc

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 ff30 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f97b 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 fac3 	bl	8000c4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 fa45 	bl	8000b54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ca:	f000 fa73 	bl	8000bb4 <MX_USB_OTG_FS_PCD_Init>
  MX_DFSDM1_Init();
 80006ce:	f000 f9e5 	bl	8000a9c <MX_DFSDM1_Init>
  MX_DMA_Init();
 80006d2:	f000 fa9d 	bl	8000c10 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n***** Program start! *****\r\n");
 80006d6:	48a3      	ldr	r0, [pc, #652]	; (8000964 <main+0x2b0>)
 80006d8:	f006 fa8e 	bl	8006bf8 <puts>
   HAL_Delay(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 ff7b 	bl	80015d8 <HAL_Delay>
     if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, Buff, FFT_SampleNum) != HAL_OK)
 80006e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e6:	49a0      	ldr	r1, [pc, #640]	; (8000968 <main+0x2b4>)
 80006e8:	48a0      	ldr	r0, [pc, #640]	; (800096c <main+0x2b8>)
 80006ea:	f001 fa8b 	bl	8001c04 <HAL_DFSDM_FilterRegularStart_DMA>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x44>
     {
    	 Error_Handler();
 80006f4:	f000 fbda 	bl	8000eac <Error_Handler>
     }

     // FFT init
     FFT_SampleRate = SystemCoreClock / hdfsdm1_channel4.Init.OutputClock.Divider
 80006f8:	4b9d      	ldr	r3, [pc, #628]	; (8000970 <main+0x2bc>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b9d      	ldr	r3, [pc, #628]	; (8000974 <main+0x2c0>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	fbb2 f2f3 	udiv	r2, r2, r3
             / hdfsdm1_filter3.Init.FilterParam.Oversampling
 8000704:	4b99      	ldr	r3, [pc, #612]	; (800096c <main+0x2b8>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	fbb2 f2f3 	udiv	r2, r2, r3
             / hdfsdm1_filter3.Init.FilterParam.IntOversampling;
 800070c:	4b97      	ldr	r3, [pc, #604]	; (800096c <main+0x2b8>)
 800070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000710:	fbb2 f3f3 	udiv	r3, r2, r3
     FFT_SampleRate = SystemCoreClock / hdfsdm1_channel4.Init.OutputClock.Divider
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071c:	4b96      	ldr	r3, [pc, #600]	; (8000978 <main+0x2c4>)
 800071e:	edc3 7a00 	vstr	s15, [r3]


     const float tmp = 2.0f * M_PI / (float) FFT_SampleNum;
 8000722:	4b96      	ldr	r3, [pc, #600]	; (800097c <main+0x2c8>)
 8000724:	617b      	str	r3, [r7, #20]
     for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800072a:	e01f      	b.n	800076c <main+0xb8>
         *(FFT_window + i) = 0.5f - 0.5f * arm_cos_f32((float) i * tmp); //okno Hanninga
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000736:	edd7 7a05 	vldr	s15, [r7, #20]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	eeb0 0a67 	vmov.f32	s0, s15
 8000742:	f005 f9c1 	bl	8005ac8 <arm_cos_f32>
 8000746:	eef0 7a40 	vmov.f32	s15, s0
 800074a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800074e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4a8a      	ldr	r2, [pc, #552]	; (8000980 <main+0x2cc>)
 8000758:	4413      	add	r3, r2
 800075a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800075e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000762:	edc3 7a00 	vstr	s15, [r3]
     for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000768:	3301      	adds	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000772:	d3db      	bcc.n	800072c <main+0x78>

     for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
 8000778:	e016      	b.n	80007a8 <main+0xf4>
         *(FFT_frq + i) = (float)i * (float)FFT_SampleRate / (float) FFT_SampleNum; //obliczanie częstotliwości
 800077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000784:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <main+0x2c4>)
 8000786:	edd3 7a00 	vldr	s15, [r3]
 800078a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4a7c      	ldr	r2, [pc, #496]	; (8000984 <main+0x2d0>)
 8000794:	4413      	add	r3, r2
 8000796:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8000988 <main+0x2d4>
 800079a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079e:	edc3 7a00 	vstr	s15, [r3]
     for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	3301      	adds	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ae:	d3e4      	bcc.n	800077a <main+0xc6>

     arm_rfft_fast_init_f32(&S, FFT_SampleNum );
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4875      	ldr	r0, [pc, #468]	; (800098c <main+0x2d8>)
 80007b6:	f004 fbad 	bl	8004f14 <arm_rfft_fast_init_f32>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Wait
	  	  	  while (flag);
 80007ba:	bf00      	nop
 80007bc:	4b74      	ldr	r3, [pc, #464]	; (8000990 <main+0x2dc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1fb      	bne.n	80007bc <main+0x108>

	          for (uint32_t i = 0; i < FFT_SampleNum; i++) //zmiana formatu wektora danych z int32_t na float
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
 80007c8:	e010      	b.n	80007ec <main+0x138>
	              FFT_inp[i] = (float) FFT_inp_int32[i];
 80007ca:	4a72      	ldr	r2, [pc, #456]	; (8000994 <main+0x2e0>)
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007da:	4a6f      	ldr	r2, [pc, #444]	; (8000998 <main+0x2e4>)
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	edc3 7a00 	vstr	s15, [r3]
	          for (uint32_t i = 0; i < FFT_SampleNum; i++) //zmiana formatu wektora danych z int32_t na float
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	3301      	adds	r3, #1
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007f2:	d3ea      	bcc.n	80007ca <main+0x116>

	          arm_mult_f32(FFT_inp, FFT_window, FFT_inp, FFT_SampleNum); //mnożenie wartości próbek przez okno Hanninga
 80007f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f8:	4a67      	ldr	r2, [pc, #412]	; (8000998 <main+0x2e4>)
 80007fa:	4961      	ldr	r1, [pc, #388]	; (8000980 <main+0x2cc>)
 80007fc:	4866      	ldr	r0, [pc, #408]	; (8000998 <main+0x2e4>)
 80007fe:	f005 f9d9 	bl	8005bb4 <arm_mult_f32>


	          arm_rfft_fast_f32(&S, FFT_inp, FFT_oup, 0); //obliczenie transformaty Fouriera (FFT)
 8000802:	2300      	movs	r3, #0
 8000804:	4a65      	ldr	r2, [pc, #404]	; (800099c <main+0x2e8>)
 8000806:	4964      	ldr	r1, [pc, #400]	; (8000998 <main+0x2e4>)
 8000808:	4860      	ldr	r0, [pc, #384]	; (800098c <main+0x2d8>)
 800080a:	f004 fc07 	bl	800501c <arm_rfft_fast_f32>

	          arm_cmplx_mag_f32(FFT_oup, FFT_mag, FFT_SampleNum / 2); //obliczenie wzmocnienia na podstawie FFT
 800080e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000812:	4963      	ldr	r1, [pc, #396]	; (80009a0 <main+0x2ec>)
 8000814:	4861      	ldr	r0, [pc, #388]	; (800099c <main+0x2e8>)
 8000816:	f005 f86f 	bl	80058f8 <arm_cmplx_mag_f32>

	          arm_scale_f32(FFT_mag, 1.0f / sqrtf((float) FFT_SampleNum), FFT_mag, FFT_SampleNum / 2); //normalizacja wartości wzmocnienia
 800081a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081e:	4960      	ldr	r1, [pc, #384]	; (80009a0 <main+0x2ec>)
 8000820:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80009a4 <main+0x2f0>
 8000824:	485e      	ldr	r0, [pc, #376]	; (80009a0 <main+0x2ec>)
 8000826:	f005 f98f 	bl	8005b48 <arm_scale_f32>


	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) //filtracja górnoprzepustowa
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
 800082e:	e017      	b.n	8000860 <main+0x1ac>
	          {
	              if (*(FFT_frq + i) < FFT_AC_COUPLING_HZ)
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4a53      	ldr	r2, [pc, #332]	; (8000984 <main+0x2d0>)
 8000836:	4413      	add	r3, r2
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80009a8 <main+0x2f4>
 8000840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000848:	d400      	bmi.n	800084c <main+0x198>
	                  FFT_mag[i] = 1.0f;
	              else
	                  break;
 800084a:	e00d      	b.n	8000868 <main+0x1b4>
	                  FFT_mag[i] = 1.0f;
 800084c:	4a54      	ldr	r2, [pc, #336]	; (80009a0 <main+0x2ec>)
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000858:	601a      	str	r2, [r3, #0]
	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++) //filtracja górnoprzepustowa
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	3301      	adds	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000866:	d3e3      	bcc.n	8000830 <main+0x17c>
	          }

	          float inv_dB_base_mag = 1.0f / 1.0f;
 8000868:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800086c:	613b      	str	r3, [r7, #16]
	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e01c      	b.n	80008ae <main+0x1fa>
	              FFT_dB[i] = 10.0f * log10f(FFT_mag[i] * inv_dB_base_mag); //zamiana skali na logarytmiczą
 8000874:	4a4a      	ldr	r2, [pc, #296]	; (80009a0 <main+0x2ec>)
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	ed93 7a00 	vldr	s14, [r3]
 8000880:	edd7 7a04 	vldr	s15, [r7, #16]
 8000884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000888:	eeb0 0a67 	vmov.f32	s0, s15
 800088c:	f008 f9e6 	bl	8008c5c <log10f>
 8000890:	eef0 7a40 	vmov.f32	s15, s0
 8000894:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089c:	4a43      	ldr	r2, [pc, #268]	; (80009ac <main+0x2f8>)
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	edc3 7a00 	vstr	s15, [r3]
	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b4:	d3de      	bcc.n	8000874 <main+0x1c0>

	          float mag_max, frq_max;
	          uint32_t maxIndex;
	          arm_max_f32(FFT_mag, FFT_SampleNum / 2, &mag_max, &maxIndex); //obliczenie maksymalnego wzmocnienia
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	f107 0208 	add.w	r2, r7, #8
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	4837      	ldr	r0, [pc, #220]	; (80009a0 <main+0x2ec>)
 80008c2:	f004 fabf 	bl	8004e44 <arm_max_f32>
	          frq_max = *(FFT_frq + maxIndex); //obliczenie częstotliwości dla maksymalnego wzmocnienia
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <main+0x2d0>)
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]

	          printf("\r\nSampleRate=%d, frq_max = %.1f, mag_max = %f\r\n", (int)FFT_SampleRate, frq_max, mag_max);
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <main+0x2c4>)
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80008e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ec:	ed8d 7b00 	vstr	d7, [sp]
 80008f0:	ec53 2b16 	vmov	r2, r3, d6
 80008f4:	ee15 1a90 	vmov	r1, s11
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <main+0x2fc>)
 80008fa:	f006 f8f7 	bl	8006aec <iprintf>
	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e023      	b.n	800094c <main+0x298>
	          {
	              printf("%.1f\t%f\t%f\r\n", FFT_frq[i], FFT_mag[i], FFT_dB[i]); //wyświetlanie wartości wektorów częstotliwości, wzmocnienia i przeskalowanego wzmocnienia
 8000904:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <main+0x2d0>)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000914:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <main+0x2ec>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <main+0x2f8>)
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	edd3 6a00 	vldr	s13, [r3]
 8000930:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000934:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000938:	ed8d 7b00 	vstr	d7, [sp]
 800093c:	ec53 2b15 	vmov	r2, r3, d5
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <main+0x300>)
 8000942:	f006 f8d3 	bl	8006aec <iprintf>
	          for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000952:	d3d7      	bcc.n	8000904 <main+0x250>
	          }

	          HAL_Delay(2000);
 8000954:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000958:	f000 fe3e 	bl	80015d8 <HAL_Delay>
	          flag = true;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <main+0x2dc>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
  {
 8000962:	e72a      	b.n	80007ba <main+0x106>
 8000964:	08008ef8 	.word	0x08008ef8
 8000968:	20000878 	.word	0x20000878
 800096c:	200001fc 	.word	0x200001fc
 8000970:	20000004 	.word	0x20000004
 8000974:	20000250 	.word	0x20000250
 8000978:	20004890 	.word	0x20004890
 800097c:	3b490fdb 	.word	0x3b490fdb
 8000980:	2000d894 	.word	0x2000d894
 8000984:	2000c894 	.word	0x2000c894
 8000988:	45000000 	.word	0x45000000
 800098c:	20004878 	.word	0x20004878
 8000990:	20000000 	.word	0x20000000
 8000994:	20004894 	.word	0x20004894
 8000998:	20006894 	.word	0x20006894
 800099c:	20008894 	.word	0x20008894
 80009a0:	2000a894 	.word	0x2000a894
 80009a4:	3cb504f3 	.word	0x3cb504f3
 80009a8:	447a0000 	.word	0x447a0000
 80009ac:	2000b894 	.word	0x2000b894
 80009b0:	08008f18 	.word	0x08008f18
 80009b4:	08008f48 	.word	0x08008f48

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fc46 	bl	8006258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009dc:	f002 f8f6 	bl	8002bcc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <SystemClock_Config+0xdc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <SystemClock_Config+0xdc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <SystemClock_Config+0xdc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <SystemClock_Config+0xe0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <SystemClock_Config+0xe0>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <SystemClock_Config+0xe0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a2c:	2360      	movs	r3, #96	; 0x60
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f923 	bl	8002c8c <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a4c:	f000 fa2e 	bl	8000eac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a50:	f002 f8cc 	bl	8002bec <HAL_PWREx_EnableOverDrive>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 fa27 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2103      	movs	r1, #3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fbb4 	bl	80031e8 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a86:	f000 fa11 	bl	8000eac <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000aa2:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <MX_DFSDM1_Init+0xa8>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = ENABLE;
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = ENABLE;
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000aba:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000abe:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 32;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter3);
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000ace:	f000 ff79 	bl	80019c4 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel4.Instance = DFSDM1_Channel4;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <MX_DFSDM1_Init+0xb0>)
 8000ad6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel4.Init.OutputClock.Activation = ENABLE;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel4.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel4.Init.OutputClock.Divider = 17;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000ae6:	2211      	movs	r2, #17
 8000ae8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel4.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel4.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel4.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel4.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel4.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel4.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel4.Init.Awd.Oversampling = 1;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel4.Init.Offset = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel4.Init.RightBitShift = 0x00;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel4) != HAL_OK)
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_DFSDM1_Init+0xac>)
 8000b22:	f000 fe8f 	bl	8001844 <HAL_DFSDM_ChannelInit>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_DFSDM1_Init+0x94>
  {
    Error_Handler();
 8000b2c:	f000 f9be 	bl	8000eac <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_4, DFSDM_CONTINUOUS_CONV_ON);
 8000b30:	2201      	movs	r2, #1
 8000b32:	4907      	ldr	r1, [pc, #28]	; (8000b50 <MX_DFSDM1_Init+0xb4>)
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <MX_DFSDM1_Init+0xa4>)
 8000b36:	f001 f81f 	bl	8001b78 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001fc 	.word	0x200001fc
 8000b44:	40017680 	.word	0x40017680
 8000b48:	20000250 	.word	0x20000250
 8000b4c:	40017480 	.word	0x40017480
 8000b50:	00040010 	.word	0x00040010

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_USART3_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b98:	f003 f974 	bl	8003e84 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f983 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200002e8 	.word	0x200002e8
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	f001 fe9f 	bl	800293a <HAL_PCD_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f953 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000370 	.word	0x20000370

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	203b      	movs	r0, #59	; 0x3b
 8000c34:	f000 fdcf 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c38:	203b      	movs	r0, #59	; 0x3b
 8000c3a:	f000 fde8 	bl	800180e <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b68      	ldr	r3, [pc, #416]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a67      	ldr	r2, [pc, #412]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b65      	ldr	r3, [pc, #404]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a5b      	ldr	r2, [pc, #364]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a55      	ldr	r2, [pc, #340]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a4f      	ldr	r2, [pc, #316]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a49      	ldr	r2, [pc, #292]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <MX_GPIO_Init+0x1b8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cf8:	4843      	ldr	r0, [pc, #268]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cfa:	f001 fe05 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4842      	ldr	r0, [pc, #264]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000d04:	f001 fe00 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	483c      	ldr	r0, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000d20:	f001 fc46 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d24:	2332      	movs	r3, #50	; 0x32
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d34:	230b      	movs	r3, #11
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4834      	ldr	r0, [pc, #208]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000d40:	f001 fc36 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d44:	2386      	movs	r3, #134	; 0x86
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d54:	230b      	movs	r3, #11
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	482d      	ldr	r0, [pc, #180]	; (8000e14 <MX_GPIO_Init+0x1c8>)
 8000d60:	f001 fc26 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4822      	ldr	r0, [pc, #136]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000d7e:	f001 fc17 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481a      	ldr	r0, [pc, #104]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000da0:	f001 fc06 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000dbc:	f001 fbf8 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000dd4:	f001 fbec 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dea:	230b      	movs	r3, #11
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000df6:	f001 fbdb 	bl	80025b0 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    /*static int i = 0;
    printf("%d\r\n", i);
    i++;*/
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    if (flag)
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d014      	beq.n	8000e66 <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
    {
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e00a      	b.n	8000e58 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
        {
            FFT_inp_int32[i] = Buff[i]; //przepisanie wartości z Bufora do wektora FFT_inp_int32
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e5e:	d3f0      	bcc.n	8000e42 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
        }
        flag = false; //zmiana wartości flagi
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    }

}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000878 	.word	0x20000878
 8000e7c:	20004894 	.word	0x20004894

08000e80 <_write>:

int _write(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, (uint16_t)len, 0xFFFFFFFF); //zapisanie wyników do pliku
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <_write+0x28>)
 8000e98:	f003 f842 	bl	8003f20 <HAL_UART_Transmit>
    return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002e8 	.word	0x200002e8

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 // __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x4>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x44>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0ae      	sub	sp, #184	; 0xb8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2290      	movs	r2, #144	; 0x90
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f99b 	bl	8006258 <memset>
  if(DFSDM1_Init == 0)
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d14a      	bne.n	8000fc0 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fb7a 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000f46:	f7ff ffb1 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_DFSDM_FilterMspInit+0x148>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a3c      	ldr	r2, [pc, #240]	; (8001044 <HAL_DFSDM_FilterMspInit+0x148>)
 8000f52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_DFSDM_FilterMspInit+0x148>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10b      	bne.n	8000f74 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f66:	6453      	str	r3, [r2, #68]	; 0x44
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC0     ------> DFSDM1_DATIN4
    PC2     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4826      	ldr	r0, [pc, #152]	; (800104c <HAL_DFSDM_FilterMspInit+0x150>)
 8000fb2:	f001 fafd 	bl	80025b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <HAL_DFSDM_FilterMspInit+0x144>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_DFSDM_FilterMspInit+0x144>)
 8000fbe:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT3 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter3){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_DFSDM_FilterMspInit+0x154>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d136      	bne.n	8001038 <HAL_DFSDM_FilterMspInit+0x13c>
    hdma_dfsdm1_flt3.Instance = DMA2_Stream3;
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_DFSDM_FilterMspInit+0x15c>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt3.Init.Channel = DMA_CHANNEL_8;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt3.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000fee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt3.Init.Mode = DMA_CIRCULAR;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8000ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001002:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt3.Init.Priority = DMA_PRIORITY_LOW;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt3) != HAL_OK)
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001012:	f000 ff55 	bl	8001ec0 <HAL_DMA_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_DFSDM_FilterMspInit+0x124>
    {
      Error_Handler();
 800101c:	f7ff ff46 	bl	8000eac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt3);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt3);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_DFSDM_FilterMspInit+0x158>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001038:	bf00      	nop
 800103a:	37b8      	adds	r7, #184	; 0xb8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000f898 	.word	0x2000f898
 8001044:	2000f894 	.word	0x2000f894
 8001048:	40023800 	.word	0x40023800
 800104c:	40020800 	.word	0x40020800
 8001050:	40017680 	.word	0x40017680
 8001054:	20000288 	.word	0x20000288
 8001058:	40026458 	.word	0x40026458

0800105c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0ae      	sub	sp, #184	; 0xb8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2290      	movs	r2, #144	; 0x90
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f005 f8eb 	bl	8006258 <memset>
  if(DFSDM1_Init == 0)
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14a      	bne.n	8001120 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800108a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4618      	mov	r0, r3
 800109c:	f002 faca 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010a6:	f7ff ff01 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10b      	bne.n	80010d4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010c6:	6453      	str	r3, [r2, #68]	; 0x44
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC0     ------> DFSDM1_DATIN4
    PC2     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80010ec:	2305      	movs	r3, #5
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001104:	2306      	movs	r3, #6
 8001106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110e:	4619      	mov	r1, r3
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001112:	f001 fa4d 	bl	80025b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a02      	ldr	r2, [pc, #8]	; (8001128 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800111e:	6013      	str	r3, [r2, #0]
  }

}
 8001120:	bf00      	nop
 8001122:	37b8      	adds	r7, #184	; 0xb8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000f898 	.word	0x2000f898
 800112c:	2000f894 	.word	0x2000f894
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ae      	sub	sp, #184	; 0xb8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2290      	movs	r2, #144	; 0x90
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f87d 	bl	8006258 <memset>
  if(huart->Instance==USART3)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_UART_MspInit+0xb4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d13c      	bne.n	80011e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800116e:	2300      	movs	r3, #0
 8001170:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fa5c 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001182:	f7ff fe93 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d0:	2307      	movs	r3, #7
 80011d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_MspInit+0xbc>)
 80011de:	f001 f9e7 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	37b8      	adds	r7, #184	; 0xb8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40004800 	.word	0x40004800
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ae      	sub	sp, #184	; 0xb8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2290      	movs	r2, #144	; 0x90
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f005 f81d 	bl	8006258 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001226:	d159      	bne.n	80012dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800122c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4618      	mov	r0, r3
 800123a:	f002 f9fb 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001244:	f7ff fe32 	bl	8000eac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001260:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800127a:	230a      	movs	r3, #10
 800127c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001284:	4619      	mov	r1, r3
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <HAL_PCD_MspInit+0xf0>)
 8001288:	f001 f992 	bl	80025b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800128c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_PCD_MspInit+0xf0>)
 80012a8:	f001 f982 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b6:	6353      	str	r3, [r2, #52]	; 0x34
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	37b8      	adds	r7, #184	; 0xb8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f92e 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt3);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA2_Stream3_IRQHandler+0x10>)
 8001346:	f000 fec9 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000288 	.word	0x20000288

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800136e:	f004 ff49 	bl	8006204 <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
	return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001396:	e7fe      	b.n	8001396 <_exit+0x12>

08001398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e00a      	b.n	80013c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013aa:	f3af 8000 	nop.w
 80013ae:	4601      	mov	r1, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf0      	blt.n	80013aa <_read+0x12>
	}

return len;
 80013c8:	687b      	ldr	r3, [r7, #4]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	605a      	str	r2, [r3, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_isatty>:

int _isatty(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f004 feca 	bl	8006204 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20080000 	.word	0x20080000
 800149c:	00000400 	.word	0x00000400
 80014a0:	2000f89c 	.word	0x2000f89c
 80014a4:	2000f8d8 	.word	0x2000f8d8

080014a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f004 fe89 	bl	8006210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f8d9 	bl	80006b4 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001510:	0801d0e0 	.word	0x0801d0e0
  ldr r2, =_sbss
 8001514:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001518:	2000f8d8 	.word	0x2000f8d8

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>

0800151e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 f94c 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001528:	2000      	movs	r0, #0
 800152a:	f000 f805 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152e:	f7ff fcc1 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f967 	bl	800182a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f92f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000004 	.word	0x20000004
 8001590:	2000000c 	.word	0x2000000c
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	2000f8a0 	.word	0x2000f8a0

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000f8a0 	.word	0x2000f8a0

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000000c 	.word	0x2000000c

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <__NVIC_SetPriorityGrouping+0x40>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	4313      	orrs	r3, r2
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x40>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	05fa0000 	.word	0x05fa0000

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0ac      	b.n	80019b0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fa8e 	bl	8001d7c <DFSDM_GetChannelFromInstance>
 8001860:	4603      	mov	r3, r0
 8001862:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <HAL_DFSDM_ChannelInit+0x174>)
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e09f      	b.n	80019b0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fbf3 	bl	800105c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_DFSDM_ChannelInit+0x178>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_DFSDM_ChannelInit+0x178>)
 800187e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8001880:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_DFSDM_ChannelInit+0x178>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d125      	bne.n	80018d4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800188e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001892:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4948      	ldr	r1, [pc, #288]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018ac:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	791b      	ldrb	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d108      	bne.n	80018c8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80018b6:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	493f      	ldr	r1, [pc, #252]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018e2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018f8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020f 	bic.w	r2, r2, #15
 8001910:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001938:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f002 0207 	and.w	r2, r2, #7
 8001964:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001990:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f9ec 	bl	8001d7c <DFSDM_GetChannelFromInstance>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_DFSDM_ChannelInit+0x174>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000f8a8 	.word	0x2000f8a8
 80019bc:	2000f8a4 	.word	0x2000f8a4
 80019c0:	40017400 	.word	0x40017400

080019c4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0c6      	b.n	8001b64 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a64      	ldr	r2, [pc, #400]	; (8001b6c <HAL_DFSDM_FilterInit+0x1a8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d109      	bne.n	80019f4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d003      	beq.n	80019f0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b7      	b.n	8001b64 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fa75 	bl	8000efc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001a20:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7a1b      	ldrb	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d108      	bne.n	8001a3c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a5b      	ldrb	r3, [r3, #9]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6819      	ldr	r1, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_DFSDM_FilterInit+0x1ac>)
 8001a82:	400b      	ands	r3, r1
 8001a84:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7c1b      	ldrb	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0210 	orr.w	r2, r2, #16
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0210 	bic.w	r2, r2, #16
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7c5b      	ldrb	r3, [r3, #17]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0220 	bic.w	r2, r2, #32
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6959      	ldr	r1, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_DFSDM_FilterInit+0x1b0>)
 8001b00:	400b      	ands	r3, r1
 8001b02:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6959      	ldr	r1, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b16:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b1e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7c1a      	ldrb	r2, [r3, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40017500 	.word	0x40017500
 8001b70:	ffff80f7 	.word	0xffff80f7
 8001b74:	1c00ff00 	.word	0x1c00ff00

08001b78 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d02c      	beq.n	8001bec <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d027      	beq.n	8001bec <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8001ba8:	400b      	ands	r3, r1
 8001baa:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10d      	bne.n	8001bce <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e00a      	b.n	8001be4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bea:	e001      	b.n	8001bf0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	f8fbffff 	.word	0xf8fbffff

08001c04 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	75fb      	strb	r3, [r7, #23]
 8001c24:	e066      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c34:	d002      	beq.n	8001c3c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	e05b      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10e      	bne.n	8001c62 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d002      	beq.n	8001c62 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
 8001c60:	e048      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7c:	d102      	bne.n	8001c84 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	e037      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d004      	beq.n	8001c98 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d12b      	bne.n	8001cf0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001ca6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001cb6:	e000      	b.n	8001cba <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001cb8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	331c      	adds	r3, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f000 f9a4 	bl	800201c <HAL_DMA_Start_IT>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001ce6:	e005      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f893 	bl	8001e14 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001cee:	e001      	b.n	8001cf4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d59 	.word	0x08001d59
 8001d08:	08001d21 	.word	0x08001d21

08001d0c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff f872 	bl	8000e18 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff f86e 	bl	8000e2c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff ffcd 	bl	8001d0c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d102      	bne.n	8001d92 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e02b      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <DFSDM_GetChannelFromInstance+0x80>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d102      	bne.n	8001da0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e024      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <DFSDM_GetChannelFromInstance+0x84>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d102      	bne.n	8001dae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e01d      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <DFSDM_GetChannelFromInstance+0x88>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d102      	bne.n	8001dbc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001db6:	2303      	movs	r3, #3
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e016      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <DFSDM_GetChannelFromInstance+0x8c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e00f      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <DFSDM_GetChannelFromInstance+0x90>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d102      	bne.n	8001dd8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e008      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <DFSDM_GetChannelFromInstance+0x94>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8001de0:	2306      	movs	r3, #6
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e001      	b.n	8001dea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8001de6:	2307      	movs	r3, #7
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40017400 	.word	0x40017400
 8001dfc:	40017420 	.word	0x40017420
 8001e00:	40017440 	.word	0x40017440
 8001e04:	40017460 	.word	0x40017460
 8001e08:	40017480 	.word	0x40017480
 8001e0c:	400174a0 	.word	0x400174a0
 8001e10:	400174c0 	.word	0x400174c0

08001e14 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d108      	bne.n	8001e36 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e033      	b.n	8001e9e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e54:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d116      	bne.n	8001e9e <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0202 	orr.w	r2, r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <DFSDM_RegConvStart+0x84>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	e000      	b.n	8001e9a <DFSDM_RegConvStart+0x86>
 8001e98:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <DFSDM_RegConvStart+0x98>
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	e000      	b.n	8001eae <DFSDM_RegConvStart+0x9a>
 8001eac:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fb78 	bl	80015c0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e099      	b.n	8002010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	e00f      	b.n	8001f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efe:	f7ff fb5f 	bl	80015c0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d908      	bls.n	8001f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e078      	b.n	8002010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e8      	bne.n	8001efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_DMA_Init+0x158>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d107      	bne.n	8001f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4313      	orrs	r3, r2
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f023 0307 	bic.w	r3, r3, #7
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d117      	bne.n	8001fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fa77 	bl	80024b8 <DMA_CheckFifoParam>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2240      	movs	r2, #64	; 0x40
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e016      	b.n	8002010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa2e 	bl	800244c <DMA_CalcBaseAndBitshift>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	223f      	movs	r2, #63	; 0x3f
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	e010803f 	.word	0xe010803f

0800201c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_DMA_Start_IT+0x26>
 800203e:	2302      	movs	r3, #2
 8002040:	e048      	b.n	80020d4 <HAL_DMA_Start_IT+0xb8>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d137      	bne.n	80020c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f9c0 	bl	80023f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	223f      	movs	r2, #63	; 0x3f
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0216 	orr.w	r2, r2, #22
 800208a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800209a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0208 	orr.w	r2, r2, #8
 80020b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e005      	b.n	80020d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <HAL_DMA_IRQHandler+0x248>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_DMA_IRQHandler+0x24c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808f 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e079      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02c      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
 8002322:	bf00      	nop
 8002324:	20000004 	.word	0x20000004
 8002328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e01e      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0210 	bic.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d032      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2205      	movs	r2, #5
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f2      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x2cc>
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e8:	bf00      	nop
    }
  }
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3b10      	subs	r3, #16
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <DMA_CalcBaseAndBitshift+0x60>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <DMA_CalcBaseAndBitshift+0x64>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d908      	bls.n	800248c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002482:	4013      	ands	r3, r2
 8002484:	1d1a      	adds	r2, r3, #4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	659a      	str	r2, [r3, #88]	; 0x58
 800248a:	e006      	b.n	800249a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	aaaaaaab 	.word	0xaaaaaaab
 80024b0:	08008f70 	.word	0x08008f70
 80024b4:	fffffc00 	.word	0xfffffc00

080024b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d856      	bhi.n	8002586 <DMA_CheckFifoParam+0xce>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <DMA_CheckFifoParam+0x28>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	08002503 	.word	0x08002503
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002587 	.word	0x08002587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d046      	beq.n	800258a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e043      	b.n	800258a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250a:	d140      	bne.n	800258e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e03d      	b.n	800258e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d121      	bne.n	8002560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d837      	bhi.n	8002592 <DMA_CheckFifoParam+0xda>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x70>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	08002539 	.word	0x08002539
 800252c:	0800253f 	.word	0x0800253f
 8002530:	08002539 	.word	0x08002539
 8002534:	08002551 	.word	0x08002551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e030      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d025      	beq.n	8002596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e022      	b.n	8002596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800255e:	e01c      	b.n	800259a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d903      	bls.n	800256e <DMA_CheckFifoParam+0xb6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800256c:	e018      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e015      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e00b      	b.n	800259e <DMA_CheckFifoParam+0xe6>
      break;
 8002586:	bf00      	nop
 8002588:	e00a      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e008      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e006      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e004      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
    }
  } 
  
  return status; 
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e175      	b.n	80028bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8164 	bne.w	80028b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d005      	beq.n	8002606 <HAL_GPIO_Init+0x56>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d130      	bne.n	8002668 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d017      	beq.n	80026a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	69b9      	ldr	r1, [r7, #24]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80be 	beq.w	80028b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_GPIO_Init+0x324>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002752:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <HAL_GPIO_Init+0x328>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_GPIO_Init+0x32c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d037      	beq.n	80027ee <HAL_GPIO_Init+0x23e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <HAL_GPIO_Init+0x330>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d031      	beq.n	80027ea <HAL_GPIO_Init+0x23a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x334>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <HAL_GPIO_Init+0x236>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a55      	ldr	r2, [pc, #340]	; (80028e8 <HAL_GPIO_Init+0x338>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x232>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a54      	ldr	r2, [pc, #336]	; (80028ec <HAL_GPIO_Init+0x33c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x22e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a53      	ldr	r2, [pc, #332]	; (80028f0 <HAL_GPIO_Init+0x340>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x22a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x344>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x226>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_GPIO_Init+0x348>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x222>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_GPIO_Init+0x34c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x21e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4f      	ldr	r2, [pc, #316]	; (8002900 <HAL_GPIO_Init+0x350>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x21a>
 80027c6:	2309      	movs	r3, #9
 80027c8:	e012      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027ca:	230a      	movs	r3, #10
 80027cc:	e010      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027ce:	2308      	movs	r3, #8
 80027d0:	e00e      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e00c      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027d6:	2306      	movs	r3, #6
 80027d8:	e00a      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027de:	2304      	movs	r3, #4
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x240>
 80027ee:	2300      	movs	r3, #0
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002800:	4935      	ldr	r1, [pc, #212]	; (80028d8 <HAL_GPIO_Init+0x328>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_GPIO_Init+0x354>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a34      	ldr	r2, [pc, #208]	; (8002904 <HAL_GPIO_Init+0x354>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_GPIO_Init+0x354>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_GPIO_Init+0x354>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_GPIO_Init+0x354>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <HAL_GPIO_Init+0x354>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_GPIO_Init+0x354>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_GPIO_Init+0x354>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	f67f ae86 	bls.w	80025d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40021400 	.word	0x40021400
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40021c00 	.word	0x40021c00
 80028fc:	40022000 	.word	0x40022000
 8002900:	40022400 	.word	0x40022400
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293c:	b08f      	sub	sp, #60	; 0x3c
 800293e:	af0a      	add	r7, sp, #40	; 0x28
 8002940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e116      	b.n	8002b7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fc46 	bl	80011f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f001 ffbe 	bl	800490c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	687e      	ldr	r6, [r7, #4]
 8002998:	466d      	mov	r5, sp
 800299a:	f106 0410 	add.w	r4, r6, #16
 800299e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ae:	1d33      	adds	r3, r6, #4
 80029b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b2:	6838      	ldr	r0, [r7, #0]
 80029b4:	f001 ff52 	bl	800485c <USB_CoreInit>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0d7      	b.n	8002b7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f001 ffac 	bl	800492e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e04a      	b.n	8002a72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	333d      	adds	r3, #61	; 0x3d
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333c      	adds	r3, #60	; 0x3c
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b298      	uxth	r0, r3
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3344      	adds	r3, #68	; 0x44
 8002a18:	4602      	mov	r2, r0
 8002a1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3340      	adds	r3, #64	; 0x40
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3348      	adds	r3, #72	; 0x48
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	334c      	adds	r3, #76	; 0x4c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3354      	adds	r3, #84	; 0x54
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3af      	bcc.n	80029dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e044      	b.n	8002b0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3b5      	bcc.n	8002a82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	687e      	ldr	r6, [r7, #4]
 8002b1e:	466d      	mov	r5, sp
 8002b20:	f106 0410 	add.w	r4, r6, #16
 8002b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b34:	1d33      	adds	r3, r6, #4
 8002b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f001 ff45 	bl	80049c8 <USB_DevInit>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e014      	b.n	8002b7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f80b 	bl	8002b84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 f903 	bl	8004d7e <USB_DevDisconnect>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	10000003 	.word	0x10000003

08002bcc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000

08002bec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c1a:	f7fe fcd1 	bl	80015c0 <HAL_GetTick>
 8002c1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c20:	e009      	b.n	8002c36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c22:	f7fe fccd 	bl	80015c0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c30:	d901      	bls.n	8002c36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e022      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c42:	d1ee      	bne.n	8002c22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fcb6 	bl	80015c0 <HAL_GetTick>
 8002c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c56:	e009      	b.n	8002c6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c58:	f7fe fcb2 	bl	80015c0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c66:	d901      	bls.n	8002c6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e007      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c78:	d1ee      	bne.n	8002c58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e29b      	b.n	80031da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8087 	beq.w	8002dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb0:	4b96      	ldr	r3, [pc, #600]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d00c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbc:	4b93      	ldr	r3, [pc, #588]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d112      	bne.n	8002cee <HAL_RCC_OscConfig+0x62>
 8002cc8:	4b90      	ldr	r3, [pc, #576]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd6:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d06c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x130>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d168      	bne.n	8002dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e275      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7a>
 8002cf8:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e02e      	b.n	8002d64 <HAL_RCC_OscConfig+0xd8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x9c>
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7e      	ldr	r2, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7b      	ldr	r2, [pc, #492]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0xd8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0xd8>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6e      	ldr	r2, [pc, #440]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6b      	ldr	r2, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fc28 	bl	80015c0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fc24 	bl	80015c0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e229      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fc14 	bl	80015c0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fc10 	bl	80015c0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e215      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x110>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d069      	beq.n	8002e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dca:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x190>
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1e9      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	493d      	ldr	r1, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	e040      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a38      	ldr	r2, [pc, #224]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fbc6 	bl	80015c0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe fbc2 	bl	80015c0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1c7      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4929      	ldr	r1, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
 8002e6a:	e018      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe fba2 	bl	80015c0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe fb9e 	bl	80015c0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1a3      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d038      	beq.n	8002f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fb7f 	bl	80015c0 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fb7b 	bl	80015c0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e180      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x23a>
 8002ee4:	e01a      	b.n	8002f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fb65 	bl	80015c0 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fb61 	bl	80015c0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d903      	bls.n	8002f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e166      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
 8002f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a4 	beq.w	8003072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a88      	ldr	r2, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b86      	ldr	r3, [pc, #536]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f52:	4b83      	ldr	r3, [pc, #524]	; (8003160 <HAL_RCC_OscConfig+0x4d4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f5e:	4b80      	ldr	r3, [pc, #512]	; (8003160 <HAL_RCC_OscConfig+0x4d4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7f      	ldr	r2, [pc, #508]	; (8003160 <HAL_RCC_OscConfig+0x4d4>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fb29 	bl	80015c0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe fb25 	bl	80015c0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e12a      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f84:	4b76      	ldr	r3, [pc, #472]	; (8003160 <HAL_RCC_OscConfig+0x4d4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x31a>
 8002f98:	4b70      	ldr	r3, [pc, #448]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a6f      	ldr	r2, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	e02d      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x33c>
 8002fae:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	e01c      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x35e>
 8002fd0:	4b62      	ldr	r3, [pc, #392]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a5e      	ldr	r2, [pc, #376]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a5b      	ldr	r2, [pc, #364]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d015      	beq.n	8003036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe fad9 	bl	80015c0 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe fad5 	bl	80015c0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0d8      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ee      	beq.n	8003012 <HAL_RCC_OscConfig+0x386>
 8003034:	e014      	b.n	8003060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fac3 	bl	80015c0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fabf 	bl	80015c0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0c2      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ee      	bne.n	800303e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a3c      	ldr	r2, [pc, #240]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800306c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80ae 	beq.w	80031d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d06d      	beq.n	8003164 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d14b      	bne.n	8003128 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a31      	ldr	r2, [pc, #196]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fa90 	bl	80015c0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fa8c 	bl	80015c0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e091      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	3b01      	subs	r3, #1
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	491b      	ldr	r1, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe fa5e 	bl	80015c0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe fa5a 	bl	80015c0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e05f      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x47c>
 8003126:	e057      	b.n	80031d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fa44 	bl	80015c0 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fa40 	bl	80015c0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e045      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_OscConfig+0x4d0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x4b0>
 800315a:	e03d      	b.n	80031d8 <HAL_RCC_OscConfig+0x54c>
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_RCC_OscConfig+0x558>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d030      	beq.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d129      	bne.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d122      	bne.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800319c:	4293      	cmp	r3, r2
 800319e:	d119      	bne.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d10f      	bne.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0d0      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4965      	ldr	r1, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d040      	beq.n	800330c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e073      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4936      	ldr	r1, [pc, #216]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fe f970 	bl	80015c0 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe f96c 	bl	80015c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e053      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 020f 	bic.w	r2, r3, #15
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1cc>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f8cc 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08008f58 	.word	0x08008f58
 80033b8:	20000004 	.word	0x20000004
 80033bc:	20000008 	.word	0x20000008

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b094      	sub	sp, #80	; 0x50
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	647b      	str	r3, [r7, #68]	; 0x44
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80e1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e0db      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033f8:	e0db      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003408:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
 800342e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6139      	str	r1, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4651      	mov	r1, sl
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4651      	mov	r1, sl
 8003474:	ebb2 0801 	subs.w	r8, r2, r1
 8003478:	4659      	mov	r1, fp
 800347a:	eb63 0901 	sbc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	462b      	mov	r3, r5
 80034a0:	eb49 0303 	adc.w	r3, r9, r3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b2:	4629      	mov	r1, r5
 80034b4:	024b      	lsls	r3, r1, #9
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034bc:	4621      	mov	r1, r4
 80034be:	024a      	lsls	r2, r1, #9
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d0:	f7fc ff6e 	bl	80003b0 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034dc:	e058      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4641      	mov	r1, r8
 8003512:	ebb2 0a01 	subs.w	sl, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb63 0b01 	sbc.w	fp, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003530:	ebb2 040a 	subs.w	r4, r2, sl
 8003534:	eb63 050b 	sbc.w	r5, r3, fp
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	00eb      	lsls	r3, r5, #3
 8003542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4643      	mov	r3, r8
 800354e:	18e3      	adds	r3, r4, r3
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	464b      	mov	r3, r9
 8003554:	eb45 0303 	adc.w	r3, r5, r3
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	f7fc ff14 	bl	80003b0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3750      	adds	r7, #80	; 0x50
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	08008f68 	.word	0x08008f68

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffdc 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	08008f68 	.word	0x08008f68

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003666:	6093      	str	r3, [r2, #8]
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	4964      	ldr	r1, [pc, #400]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368e:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	4959      	ldr	r1, [pc, #356]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ca:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	494a      	ldr	r1, [pc, #296]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 808b 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
 8003724:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003730:	4b35      	ldr	r3, [pc, #212]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd ff40 	bl	80015c0 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fd ff3c 	bl	80015c0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e38f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003756:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d035      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d02e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a1a      	ldr	r2, [pc, #104]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d114      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd ff04 	bl	80015c0 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd ff00 	bl	80015c0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e351      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d111      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	4901      	ldr	r1, [pc, #4]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
 8003802:	e00b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	0ffffcff 	.word	0x0ffffcff
 8003810:	4bac      	ldr	r3, [pc, #688]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4aab      	ldr	r2, [pc, #684]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	4ba9      	ldr	r3, [pc, #676]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	49a6      	ldr	r1, [pc, #664]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382a:	4313      	orrs	r3, r2
 800382c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800383a:	4ba2      	ldr	r3, [pc, #648]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003840:	4aa0      	ldr	r2, [pc, #640]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003846:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800384a:	4b9e      	ldr	r3, [pc, #632]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	499b      	ldr	r1, [pc, #620]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b96      	ldr	r3, [pc, #600]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003876:	4993      	ldr	r1, [pc, #588]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388a:	4b8e      	ldr	r3, [pc, #568]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	498a      	ldr	r1, [pc, #552]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ac:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ba:	4982      	ldr	r1, [pc, #520]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4979      	ldr	r1, [pc, #484]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f0:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4971      	ldr	r1, [pc, #452]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f023 020c 	bic.w	r2, r3, #12
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	4968      	ldr	r1, [pc, #416]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003934:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	4960      	ldr	r1, [pc, #384]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	4957      	ldr	r1, [pc, #348]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003978:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	494f      	ldr	r1, [pc, #316]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	4946      	ldr	r1, [pc, #280]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	493e      	ldr	r1, [pc, #248]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0e:	492d      	ldr	r1, [pc, #180]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a30:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a94:	490b      	ldr	r1, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00f      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	4902      	ldr	r1, [pc, #8]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	4986      	ldr	r1, [pc, #536]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003af8:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b08:	497d      	ldr	r1, [pc, #500]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d006      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80d6 	beq.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b24:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a75      	ldr	r2, [pc, #468]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd fd46 	bl	80015c0 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b38:	f7fd fd42 	bl	80015c0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e195      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d021      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11d      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	0e1b      	lsrs	r3, r3, #24
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	4958      	ldr	r1, [pc, #352]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02e      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd0:	d129      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003be0:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be6:	0f1b      	lsrs	r3, r3, #28
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	019a      	lsls	r2, r3, #6
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	071b      	lsls	r3, r3, #28
 8003c06:	493e      	ldr	r1, [pc, #248]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	f023 021f 	bic.w	r2, r3, #31
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	4938      	ldr	r1, [pc, #224]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01d      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c32:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	0f1b      	lsrs	r3, r3, #28
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4926      	ldr	r1, [pc, #152]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	491a      	ldr	r1, [pc, #104]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd fc89 	bl	80015c0 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cb2:	f7fd fc85 	bl	80015c0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b64      	cmp	r3, #100	; 0x64
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0d8      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f040 80ce 	bne.w	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fc6c 	bl	80015c0 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cea:	e00b      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cec:	f7fd fc68 	bl	80015c0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d904      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0bb      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d10:	d0ec      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02e      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d12a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d3a:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d48:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	4944      	ldr	r1, [pc, #272]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	493d      	ldr	r1, [pc, #244]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da4:	d11d      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	0e1b      	lsrs	r3, r3, #24
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	0f1b      	lsrs	r3, r3, #28
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	019a      	lsls	r2, r3, #6
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	071b      	lsls	r3, r3, #28
 8003dda:	4929      	ldr	r1, [pc, #164]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d028      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4917      	ldr	r1, [pc, #92]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4911      	ldr	r1, [pc, #68]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4c:	f7fd fbb8 	bl	80015c0 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e54:	f7fd fbb4 	bl	80015c0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e007      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e72:	d1ef      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800

08003e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e040      	b.n	8003f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd f946 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8b0 	bl	8004028 <UART_SetConfig>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e022      	b.n	8003f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb08 	bl	80044f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb8f 	bl	8004634 <UART_CheckIdleState>
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d171      	bne.n	800401c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Transmit+0x24>
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e06a      	b.n	800401e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f56:	f7fd fb33 	bl	80015c0 <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d108      	bne.n	8003f88 <HAL_UART_Transmit+0x68>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e003      	b.n	8003f90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f90:	e02c      	b.n	8003fec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fb96 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e038      	b.n	800401e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e007      	b.n	8003fda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1cc      	bne.n	8003f92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fb63 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e005      	b.n	800401e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4ba6      	ldr	r3, [pc, #664]	; (80042ec <UART_SetConfig+0x2c4>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	430b      	orrs	r3, r1
 800405e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a94      	ldr	r2, [pc, #592]	; (80042f0 <UART_SetConfig+0x2c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d120      	bne.n	80040e6 <UART_SetConfig+0xbe>
 80040a4:	4b93      	ldr	r3, [pc, #588]	; (80042f4 <UART_SetConfig+0x2cc>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d816      	bhi.n	80040e0 <UART_SetConfig+0xb8>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x90>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040d5 	.word	0x080040d5
 80040c0:	080040cf 	.word	0x080040cf
 80040c4:	080040db 	.word	0x080040db
 80040c8:	2301      	movs	r3, #1
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e150      	b.n	8004370 <UART_SetConfig+0x348>
 80040ce:	2302      	movs	r3, #2
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e14d      	b.n	8004370 <UART_SetConfig+0x348>
 80040d4:	2304      	movs	r3, #4
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e14a      	b.n	8004370 <UART_SetConfig+0x348>
 80040da:	2308      	movs	r3, #8
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e147      	b.n	8004370 <UART_SetConfig+0x348>
 80040e0:	2310      	movs	r3, #16
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e144      	b.n	8004370 <UART_SetConfig+0x348>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <UART_SetConfig+0x2d0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d132      	bne.n	8004156 <UART_SetConfig+0x12e>
 80040f0:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <UART_SetConfig+0x2cc>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d828      	bhi.n	8004150 <UART_SetConfig+0x128>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0xdc>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004139 	.word	0x08004139
 8004108:	08004151 	.word	0x08004151
 800410c:	08004151 	.word	0x08004151
 8004110:	08004151 	.word	0x08004151
 8004114:	08004145 	.word	0x08004145
 8004118:	08004151 	.word	0x08004151
 800411c:	08004151 	.word	0x08004151
 8004120:	08004151 	.word	0x08004151
 8004124:	0800413f 	.word	0x0800413f
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004151 	.word	0x08004151
 8004134:	0800414b 	.word	0x0800414b
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e118      	b.n	8004370 <UART_SetConfig+0x348>
 800413e:	2302      	movs	r3, #2
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e115      	b.n	8004370 <UART_SetConfig+0x348>
 8004144:	2304      	movs	r3, #4
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e112      	b.n	8004370 <UART_SetConfig+0x348>
 800414a:	2308      	movs	r3, #8
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e10f      	b.n	8004370 <UART_SetConfig+0x348>
 8004150:	2310      	movs	r3, #16
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e10c      	b.n	8004370 <UART_SetConfig+0x348>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a68      	ldr	r2, [pc, #416]	; (80042fc <UART_SetConfig+0x2d4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d120      	bne.n	80041a2 <UART_SetConfig+0x17a>
 8004160:	4b64      	ldr	r3, [pc, #400]	; (80042f4 <UART_SetConfig+0x2cc>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800416a:	2b30      	cmp	r3, #48	; 0x30
 800416c:	d013      	beq.n	8004196 <UART_SetConfig+0x16e>
 800416e:	2b30      	cmp	r3, #48	; 0x30
 8004170:	d814      	bhi.n	800419c <UART_SetConfig+0x174>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d009      	beq.n	800418a <UART_SetConfig+0x162>
 8004176:	2b20      	cmp	r3, #32
 8004178:	d810      	bhi.n	800419c <UART_SetConfig+0x174>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <UART_SetConfig+0x15c>
 800417e:	2b10      	cmp	r3, #16
 8004180:	d006      	beq.n	8004190 <UART_SetConfig+0x168>
 8004182:	e00b      	b.n	800419c <UART_SetConfig+0x174>
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0f2      	b.n	8004370 <UART_SetConfig+0x348>
 800418a:	2302      	movs	r3, #2
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e0ef      	b.n	8004370 <UART_SetConfig+0x348>
 8004190:	2304      	movs	r3, #4
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e0ec      	b.n	8004370 <UART_SetConfig+0x348>
 8004196:	2308      	movs	r3, #8
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e0e9      	b.n	8004370 <UART_SetConfig+0x348>
 800419c:	2310      	movs	r3, #16
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e0e6      	b.n	8004370 <UART_SetConfig+0x348>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a56      	ldr	r2, [pc, #344]	; (8004300 <UART_SetConfig+0x2d8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d120      	bne.n	80041ee <UART_SetConfig+0x1c6>
 80041ac:	4b51      	ldr	r3, [pc, #324]	; (80042f4 <UART_SetConfig+0x2cc>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041b6:	2bc0      	cmp	r3, #192	; 0xc0
 80041b8:	d013      	beq.n	80041e2 <UART_SetConfig+0x1ba>
 80041ba:	2bc0      	cmp	r3, #192	; 0xc0
 80041bc:	d814      	bhi.n	80041e8 <UART_SetConfig+0x1c0>
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d009      	beq.n	80041d6 <UART_SetConfig+0x1ae>
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d810      	bhi.n	80041e8 <UART_SetConfig+0x1c0>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <UART_SetConfig+0x1a8>
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x1b4>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x1c0>
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e0cc      	b.n	8004370 <UART_SetConfig+0x348>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e0c9      	b.n	8004370 <UART_SetConfig+0x348>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e0c6      	b.n	8004370 <UART_SetConfig+0x348>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e0c3      	b.n	8004370 <UART_SetConfig+0x348>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e0c0      	b.n	8004370 <UART_SetConfig+0x348>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a44      	ldr	r2, [pc, #272]	; (8004304 <UART_SetConfig+0x2dc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d125      	bne.n	8004244 <UART_SetConfig+0x21c>
 80041f8:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <UART_SetConfig+0x2cc>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004206:	d017      	beq.n	8004238 <UART_SetConfig+0x210>
 8004208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420c:	d817      	bhi.n	800423e <UART_SetConfig+0x216>
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d00b      	beq.n	800422c <UART_SetConfig+0x204>
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d811      	bhi.n	800423e <UART_SetConfig+0x216>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <UART_SetConfig+0x1fe>
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d006      	beq.n	8004232 <UART_SetConfig+0x20a>
 8004224:	e00b      	b.n	800423e <UART_SetConfig+0x216>
 8004226:	2300      	movs	r3, #0
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e0a1      	b.n	8004370 <UART_SetConfig+0x348>
 800422c:	2302      	movs	r3, #2
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e09e      	b.n	8004370 <UART_SetConfig+0x348>
 8004232:	2304      	movs	r3, #4
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e09b      	b.n	8004370 <UART_SetConfig+0x348>
 8004238:	2308      	movs	r3, #8
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e098      	b.n	8004370 <UART_SetConfig+0x348>
 800423e:	2310      	movs	r3, #16
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e095      	b.n	8004370 <UART_SetConfig+0x348>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <UART_SetConfig+0x2e0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d125      	bne.n	800429a <UART_SetConfig+0x272>
 800424e:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <UART_SetConfig+0x2cc>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425c:	d017      	beq.n	800428e <UART_SetConfig+0x266>
 800425e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004262:	d817      	bhi.n	8004294 <UART_SetConfig+0x26c>
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d00b      	beq.n	8004282 <UART_SetConfig+0x25a>
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d811      	bhi.n	8004294 <UART_SetConfig+0x26c>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x254>
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d006      	beq.n	8004288 <UART_SetConfig+0x260>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x26c>
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e076      	b.n	8004370 <UART_SetConfig+0x348>
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e073      	b.n	8004370 <UART_SetConfig+0x348>
 8004288:	2304      	movs	r3, #4
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e070      	b.n	8004370 <UART_SetConfig+0x348>
 800428e:	2308      	movs	r3, #8
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e06d      	b.n	8004370 <UART_SetConfig+0x348>
 8004294:	2310      	movs	r3, #16
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e06a      	b.n	8004370 <UART_SetConfig+0x348>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <UART_SetConfig+0x2e4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d138      	bne.n	8004316 <UART_SetConfig+0x2ee>
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <UART_SetConfig+0x2cc>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042b2:	d017      	beq.n	80042e4 <UART_SetConfig+0x2bc>
 80042b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042b8:	d82a      	bhi.n	8004310 <UART_SetConfig+0x2e8>
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042be:	d00b      	beq.n	80042d8 <UART_SetConfig+0x2b0>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d824      	bhi.n	8004310 <UART_SetConfig+0x2e8>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <UART_SetConfig+0x2aa>
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	d006      	beq.n	80042de <UART_SetConfig+0x2b6>
 80042d0:	e01e      	b.n	8004310 <UART_SetConfig+0x2e8>
 80042d2:	2300      	movs	r3, #0
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e04b      	b.n	8004370 <UART_SetConfig+0x348>
 80042d8:	2302      	movs	r3, #2
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e048      	b.n	8004370 <UART_SetConfig+0x348>
 80042de:	2304      	movs	r3, #4
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e045      	b.n	8004370 <UART_SetConfig+0x348>
 80042e4:	2308      	movs	r3, #8
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e042      	b.n	8004370 <UART_SetConfig+0x348>
 80042ea:	bf00      	nop
 80042ec:	efff69f3 	.word	0xefff69f3
 80042f0:	40011000 	.word	0x40011000
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40004400 	.word	0x40004400
 80042fc:	40004800 	.word	0x40004800
 8004300:	40004c00 	.word	0x40004c00
 8004304:	40005000 	.word	0x40005000
 8004308:	40011400 	.word	0x40011400
 800430c:	40007800 	.word	0x40007800
 8004310:	2310      	movs	r3, #16
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e02c      	b.n	8004370 <UART_SetConfig+0x348>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a72      	ldr	r2, [pc, #456]	; (80044e4 <UART_SetConfig+0x4bc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d125      	bne.n	800436c <UART_SetConfig+0x344>
 8004320:	4b71      	ldr	r3, [pc, #452]	; (80044e8 <UART_SetConfig+0x4c0>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800432a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800432e:	d017      	beq.n	8004360 <UART_SetConfig+0x338>
 8004330:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004334:	d817      	bhi.n	8004366 <UART_SetConfig+0x33e>
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433a:	d00b      	beq.n	8004354 <UART_SetConfig+0x32c>
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d811      	bhi.n	8004366 <UART_SetConfig+0x33e>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <UART_SetConfig+0x326>
 8004346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434a:	d006      	beq.n	800435a <UART_SetConfig+0x332>
 800434c:	e00b      	b.n	8004366 <UART_SetConfig+0x33e>
 800434e:	2300      	movs	r3, #0
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e00d      	b.n	8004370 <UART_SetConfig+0x348>
 8004354:	2302      	movs	r3, #2
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e00a      	b.n	8004370 <UART_SetConfig+0x348>
 800435a:	2304      	movs	r3, #4
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e007      	b.n	8004370 <UART_SetConfig+0x348>
 8004360:	2308      	movs	r3, #8
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e004      	b.n	8004370 <UART_SetConfig+0x348>
 8004366:	2310      	movs	r3, #16
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e001      	b.n	8004370 <UART_SetConfig+0x348>
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	d15b      	bne.n	8004432 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800437a:	7ffb      	ldrb	r3, [r7, #31]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d828      	bhi.n	80043d2 <UART_SetConfig+0x3aa>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x360>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043d3 	.word	0x080043d3
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043d3 	.word	0x080043d3
 80043a0:	080043d3 	.word	0x080043d3
 80043a4:	080043d3 	.word	0x080043d3
 80043a8:	080043cb 	.word	0x080043cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff f91a 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61b8      	str	r0, [r7, #24]
        break;
 80043b2:	e013      	b.n	80043dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7ff f92a 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 80043b8:	61b8      	str	r0, [r7, #24]
        break;
 80043ba:	e00f      	b.n	80043dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <UART_SetConfig+0x4c4>)
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e00c      	b.n	80043dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fe fffd 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 80043c6:	61b8      	str	r0, [r7, #24]
        break;
 80043c8:	e008      	b.n	80043dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	61bb      	str	r3, [r7, #24]
        break;
 80043d0:	e004      	b.n	80043dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	77bb      	strb	r3, [r7, #30]
        break;
 80043da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d074      	beq.n	80044cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	005a      	lsls	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0f      	cmp	r3, #15
 80043fc:	d916      	bls.n	800442c <UART_SetConfig+0x404>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d212      	bcs.n	800442c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f023 030f 	bic.w	r3, r3, #15
 800440e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	b29a      	uxth	r2, r3
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	4313      	orrs	r3, r2
 8004420:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	89fa      	ldrh	r2, [r7, #14]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	e04f      	b.n	80044cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77bb      	strb	r3, [r7, #30]
 8004430:	e04c      	b.n	80044cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d828      	bhi.n	800448a <UART_SetConfig+0x462>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x418>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004475 	.word	0x08004475
 800444c:	0800448b 	.word	0x0800448b
 8004450:	0800447b 	.word	0x0800447b
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800448b 	.word	0x0800448b
 800445c:	0800448b 	.word	0x0800448b
 8004460:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7ff f8be 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8004468:	61b8      	str	r0, [r7, #24]
        break;
 800446a:	e013      	b.n	8004494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7ff f8ce 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8004470:	61b8      	str	r0, [r7, #24]
        break;
 8004472:	e00f      	b.n	8004494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <UART_SetConfig+0x4c4>)
 8004476:	61bb      	str	r3, [r7, #24]
        break;
 8004478:	e00c      	b.n	8004494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7fe ffa1 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800447e:	61b8      	str	r0, [r7, #24]
        break;
 8004480:	e008      	b.n	8004494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	61bb      	str	r3, [r7, #24]
        break;
 8004488:	e004      	b.n	8004494 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	77bb      	strb	r3, [r7, #30]
        break;
 8004492:	bf00      	nop
    }

    if (pclk != 0U)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	085a      	lsrs	r2, r3, #1
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	441a      	add	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d909      	bls.n	80044c8 <UART_SetConfig+0x4a0>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d205      	bcs.n	80044c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e001      	b.n	80044cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40007c00 	.word	0x40007c00
 80044e8:	40023800 	.word	0x40023800
 80044ec:	00f42400 	.word	0x00f42400

080044f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01a      	beq.n	8004606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d10a      	bne.n	8004606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004644:	f7fc ffbc 	bl	80015c0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d10e      	bne.n	8004676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f831 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e027      	b.n	80046c6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d10e      	bne.n	80046a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f81b 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e011      	b.n	80046c6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b09c      	sub	sp, #112	; 0x70
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	e0a7      	b.n	8004830 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	f000 80a3 	beq.w	8004830 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fc ff69 	bl	80015c0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <UART_WaitOnFlagUntilTimeout+0x32>
 80046fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d13f      	bne.n	8004780 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004714:	667b      	str	r3, [r7, #100]	; 0x64
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004720:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e6      	bne.n	8004700 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	663b      	str	r3, [r7, #96]	; 0x60
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3308      	adds	r3, #8
 8004750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004752:	64ba      	str	r2, [r7, #72]	; 0x48
 8004754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e068      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d050      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d148      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
 80047c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e6      	bne.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047fa:	623a      	str	r2, [r7, #32]
 80047fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	69f9      	ldr	r1, [r7, #28]
 8004800:	6a3a      	ldr	r2, [r7, #32]
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	61bb      	str	r3, [r7, #24]
   return(result);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e010      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	f43f af48 	beq.w	80046e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3770      	adds	r7, #112	; 0x70
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800485c:	b084      	sub	sp, #16
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	f107 001c 	add.w	r0, r7, #28
 800486a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b01      	cmp	r3, #1
 8004872:	d120      	bne.n	80048b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b20      	ldr	r3, [pc, #128]	; (8004908 <USB_CoreInit+0xac>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa96 	bl	8004ddc <USB_CoreReset>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e010      	b.n	80048d8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa8a 	bl	8004ddc <USB_CoreReset>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10b      	bne.n	80048f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f043 0206 	orr.w	r2, r3, #6
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004902:	b004      	add	sp, #16
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	ffbdffbf 	.word	0xffbdffbf

0800490c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 0201 	bic.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d115      	bne.n	800497c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800495c:	2001      	movs	r0, #1
 800495e:	f7fc fe3b 	bl	80015d8 <HAL_Delay>
      ms++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3301      	adds	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa29 	bl	8004dc0 <USB_GetMode>
 800496e:	4603      	mov	r3, r0
 8004970:	2b01      	cmp	r3, #1
 8004972:	d01e      	beq.n	80049b2 <USB_SetCurrentMode+0x84>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b31      	cmp	r3, #49	; 0x31
 8004978:	d9f0      	bls.n	800495c <USB_SetCurrentMode+0x2e>
 800497a:	e01a      	b.n	80049b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800498e:	2001      	movs	r0, #1
 8004990:	f7fc fe22 	bl	80015d8 <HAL_Delay>
      ms++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa10 	bl	8004dc0 <USB_GetMode>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <USB_SetCurrentMode+0x84>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b31      	cmp	r3, #49	; 0x31
 80049aa:	d9f0      	bls.n	800498e <USB_SetCurrentMode+0x60>
 80049ac:	e001      	b.n	80049b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e005      	b.n	80049be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b32      	cmp	r3, #50	; 0x32
 80049b6:	d101      	bne.n	80049bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c8:	b084      	sub	sp, #16
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	e009      	b.n	80049fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3340      	adds	r3, #64	; 0x40
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b0e      	cmp	r3, #14
 8004a00:	d9f2      	bls.n	80049e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11c      	bne.n	8004a42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e005      	b.n	8004a4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	4619      	mov	r1, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	461a      	mov	r2, r3
 8004a6a:	680b      	ldr	r3, [r1, #0]
 8004a6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10c      	bne.n	8004a8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f965 	bl	8004d4c <USB_SetDevSpeed>
 8004a82:	e008      	b.n	8004a96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a84:	2101      	movs	r1, #1
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f960 	bl	8004d4c <USB_SetDevSpeed>
 8004a8c:	e003      	b.n	8004a96 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a8e:	2103      	movs	r1, #3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f95b 	bl	8004d4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a96:	2110      	movs	r1, #16
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8f3 	bl	8004c84 <USB_FlushTxFifo>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f91f 	bl	8004cec <USB_FlushRxFifo>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	461a      	mov	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e043      	b.n	8004b6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af8:	d118      	bne.n	8004b2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e013      	b.n	8004b3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e008      	b.n	8004b3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	3301      	adds	r3, #1
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3b7      	bcc.n	8004ae2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e043      	b.n	8004c00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8e:	d118      	bne.n	8004bc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e013      	b.n	8004bd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e008      	b.n	8004bd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d3b7      	bcc.n	8004b78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f043 0210 	orr.w	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <USB_DevInit+0x2b4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f043 0208 	orr.w	r2, r3, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <USB_DevInit+0x2b8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	803c3800 	.word	0x803c3800
 8004c80:	40000004 	.word	0x40000004

08004c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <USB_FlushTxFifo+0x64>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e01b      	b.n	8004cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	daf2      	bge.n	8004c92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	019b      	lsls	r3, r3, #6
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <USB_FlushTxFifo+0x64>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e006      	b.n	8004cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d0f0      	beq.n	8004cbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	00030d40 	.word	0x00030d40

08004cec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <USB_FlushRxFifo+0x5c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e018      	b.n	8004d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	daf2      	bge.n	8004cf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <USB_FlushRxFifo+0x5c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e006      	b.n	8004d3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d0f0      	beq.n	8004d1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	00030d40 	.word	0x00030d40

08004d4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d98:	f023 0303 	bic.w	r3, r3, #3
 8004d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <USB_CoreReset+0x64>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01b      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	daf2      	bge.n	8004de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <USB_CoreReset+0x64>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d0f0      	beq.n	8004e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	00030d40 	.word	0x00030d40

08004e44 <arm_max_f32>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	1e4f      	subs	r7, r1, #1
 8004e4a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8004e4e:	f100 0e04 	add.w	lr, r0, #4
 8004e52:	edd0 7a00 	vldr	s15, [r0]
 8004e56:	d058      	beq.n	8004f0a <arm_max_f32+0xc6>
 8004e58:	3014      	adds	r0, #20
 8004e5a:	46c4      	mov	ip, r8
 8004e5c:	2604      	movs	r6, #4
 8004e5e:	2400      	movs	r4, #0
 8004e60:	ed10 6a04 	vldr	s12, [r0, #-16]
 8004e64:	ed50 6a03 	vldr	s13, [r0, #-12]
 8004e68:	ed10 7a02 	vldr	s14, [r0, #-8]
 8004e6c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004e70:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	bfc8      	it	gt
 8004e7a:	eef0 7a46 	vmovgt.f32	s15, s12
 8004e7e:	f1a6 0503 	sub.w	r5, r6, #3
 8004e82:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004e86:	bfc8      	it	gt
 8004e88:	462c      	movgt	r4, r5
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	bf48      	it	mi
 8004e90:	eef0 7a66 	vmovmi.f32	s15, s13
 8004e94:	f1a6 0502 	sub.w	r5, r6, #2
 8004e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9c:	bf48      	it	mi
 8004e9e:	462c      	movmi	r4, r5
 8004ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea4:	bf48      	it	mi
 8004ea6:	eef0 7a47 	vmovmi.f32	s15, s14
 8004eaa:	f106 35ff 	add.w	r5, r6, #4294967295
 8004eae:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004eb2:	bf48      	it	mi
 8004eb4:	462c      	movmi	r4, r5
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	bf48      	it	mi
 8004ebc:	4634      	movmi	r4, r6
 8004ebe:	bf48      	it	mi
 8004ec0:	eef0 7a65 	vmovmi.f32	s15, s11
 8004ec4:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ec8:	f106 0604 	add.w	r6, r6, #4
 8004ecc:	f100 0010 	add.w	r0, r0, #16
 8004ed0:	d1c6      	bne.n	8004e60 <arm_max_f32+0x1c>
 8004ed2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8004ed6:	f017 0003 	ands.w	r0, r7, #3
 8004eda:	d018      	beq.n	8004f0e <arm_max_f32+0xca>
 8004edc:	1a08      	subs	r0, r1, r0
 8004ede:	ecbe 7a01 	vldmia	lr!, {s14}
 8004ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	bfc8      	it	gt
 8004eec:	4604      	movgt	r4, r0
 8004eee:	f100 0001 	add.w	r0, r0, #1
 8004ef2:	bfd8      	it	le
 8004ef4:	eeb0 7a67 	vmovle.f32	s14, s15
 8004ef8:	4288      	cmp	r0, r1
 8004efa:	eef0 7a47 	vmov.f32	s15, s14
 8004efe:	d1ee      	bne.n	8004ede <arm_max_f32+0x9a>
 8004f00:	ed82 7a00 	vstr	s14, [r2]
 8004f04:	601c      	str	r4, [r3, #0]
 8004f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0a:	4644      	mov	r4, r8
 8004f0c:	e7e3      	b.n	8004ed6 <arm_max_f32+0x92>
 8004f0e:	eeb0 7a67 	vmov.f32	s14, s15
 8004f12:	e7f5      	b.n	8004f00 <arm_max_f32+0xbc>

08004f14 <arm_rfft_fast_init_f32>:
 8004f14:	084b      	lsrs	r3, r1, #1
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	b410      	push	{r4}
 8004f1a:	8201      	strh	r1, [r0, #16]
 8004f1c:	8003      	strh	r3, [r0, #0]
 8004f1e:	d047      	beq.n	8004fb0 <arm_rfft_fast_init_f32+0x9c>
 8004f20:	d917      	bls.n	8004f52 <arm_rfft_fast_init_f32+0x3e>
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	d03d      	beq.n	8004fa4 <arm_rfft_fast_init_f32+0x90>
 8004f28:	d929      	bls.n	8004f7e <arm_rfft_fast_init_f32+0x6a>
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d020      	beq.n	8004f72 <arm_rfft_fast_init_f32+0x5e>
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f34:	d113      	bne.n	8004f5e <arm_rfft_fast_init_f32+0x4a>
 8004f36:	4921      	ldr	r1, [pc, #132]	; (8004fbc <arm_rfft_fast_init_f32+0xa8>)
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <arm_rfft_fast_init_f32+0xac>)
 8004f3a:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <arm_rfft_fast_init_f32+0xb0>)
 8004f3c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8004f40:	8184      	strh	r4, [r0, #12]
 8004f42:	6081      	str	r1, [r0, #8]
 8004f44:	6042      	str	r2, [r0, #4]
 8004f46:	6143      	str	r3, [r0, #20]
 8004f48:	2000      	movs	r0, #0
 8004f4a:	b240      	sxtb	r0, r0
 8004f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d01c      	beq.n	8004f90 <arm_rfft_fast_init_f32+0x7c>
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d006      	beq.n	8004f68 <arm_rfft_fast_init_f32+0x54>
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d01d      	beq.n	8004f9a <arm_rfft_fast_init_f32+0x86>
 8004f5e:	20ff      	movs	r0, #255	; 0xff
 8004f60:	b240      	sxtb	r0, r0
 8004f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	2438      	movs	r4, #56	; 0x38
 8004f6a:	4917      	ldr	r1, [pc, #92]	; (8004fc8 <arm_rfft_fast_init_f32+0xb4>)
 8004f6c:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <arm_rfft_fast_init_f32+0xb8>)
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <arm_rfft_fast_init_f32+0xbc>)
 8004f70:	e7e6      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004f72:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004f76:	4917      	ldr	r1, [pc, #92]	; (8004fd4 <arm_rfft_fast_init_f32+0xc0>)
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <arm_rfft_fast_init_f32+0xc4>)
 8004f7a:	4b18      	ldr	r3, [pc, #96]	; (8004fdc <arm_rfft_fast_init_f32+0xc8>)
 8004f7c:	e7e0      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d1ec      	bne.n	8004f5e <arm_rfft_fast_init_f32+0x4a>
 8004f84:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004f88:	4915      	ldr	r1, [pc, #84]	; (8004fe0 <arm_rfft_fast_init_f32+0xcc>)
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <arm_rfft_fast_init_f32+0xd0>)
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <arm_rfft_fast_init_f32+0xd4>)
 8004f8e:	e7d7      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004f90:	2430      	movs	r4, #48	; 0x30
 8004f92:	4916      	ldr	r1, [pc, #88]	; (8004fec <arm_rfft_fast_init_f32+0xd8>)
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <arm_rfft_fast_init_f32+0xdc>)
 8004f96:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <arm_rfft_fast_init_f32+0xe0>)
 8004f98:	e7d2      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004f9a:	2414      	movs	r4, #20
 8004f9c:	4916      	ldr	r1, [pc, #88]	; (8004ff8 <arm_rfft_fast_init_f32+0xe4>)
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <arm_rfft_fast_init_f32+0xe8>)
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <arm_rfft_fast_init_f32+0xec>)
 8004fa2:	e7cd      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004fa4:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004fa8:	4916      	ldr	r1, [pc, #88]	; (8005004 <arm_rfft_fast_init_f32+0xf0>)
 8004faa:	4a17      	ldr	r2, [pc, #92]	; (8005008 <arm_rfft_fast_init_f32+0xf4>)
 8004fac:	4b17      	ldr	r3, [pc, #92]	; (800500c <arm_rfft_fast_init_f32+0xf8>)
 8004fae:	e7c7      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004fb0:	24d0      	movs	r4, #208	; 0xd0
 8004fb2:	4917      	ldr	r1, [pc, #92]	; (8005010 <arm_rfft_fast_init_f32+0xfc>)
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <arm_rfft_fast_init_f32+0x100>)
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <arm_rfft_fast_init_f32+0x104>)
 8004fb8:	e7c2      	b.n	8004f40 <arm_rfft_fast_init_f32+0x2c>
 8004fba:	bf00      	nop
 8004fbc:	08018584 	.word	0x08018584
 8004fc0:	08008f78 	.word	0x08008f78
 8004fc4:	0800f0e8 	.word	0x0800f0e8
 8004fc8:	0800d078 	.word	0x0800d078
 8004fcc:	0801a344 	.word	0x0801a344
 8004fd0:	0801c834 	.word	0x0801c834
 8004fd4:	08015a68 	.word	0x08015a68
 8004fd8:	08013968 	.word	0x08013968
 8004fdc:	0800d0e8 	.word	0x0800d0e8
 8004fe0:	0801c4c4 	.word	0x0801c4c4
 8004fe4:	080130e8 	.word	0x080130e8
 8004fe8:	0801a544 	.word	0x0801a544
 8004fec:	08016920 	.word	0x08016920
 8004ff0:	08015968 	.word	0x08015968
 8004ff4:	0800cf78 	.word	0x0800cf78
 8004ff8:	08016878 	.word	0x08016878
 8004ffc:	080138e8 	.word	0x080138e8
 8005000:	080168a0 	.word	0x080168a0
 8005004:	0801ad44 	.word	0x0801ad44
 8005008:	08017584 	.word	0x08017584
 800500c:	0801b0c4 	.word	0x0801b0c4
 8005010:	0801ca34 	.word	0x0801ca34
 8005014:	08017184 	.word	0x08017184
 8005018:	0801c0c4 	.word	0x0801c0c4

0800501c <arm_rfft_fast_f32>:
 800501c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005020:	8a06      	ldrh	r6, [r0, #16]
 8005022:	0876      	lsrs	r6, r6, #1
 8005024:	4607      	mov	r7, r0
 8005026:	4615      	mov	r5, r2
 8005028:	8006      	strh	r6, [r0, #0]
 800502a:	460c      	mov	r4, r1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d15c      	bne.n	80050ea <arm_rfft_fast_f32+0xce>
 8005030:	461a      	mov	r2, r3
 8005032:	2301      	movs	r3, #1
 8005034:	f000 fbe6 	bl	8005804 <arm_cfft_f32>
 8005038:	edd4 7a00 	vldr	s15, [r4]
 800503c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005040:	883e      	ldrh	r6, [r7, #0]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005048:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800504c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005050:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005058:	3e01      	subs	r6, #1
 800505a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800505e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005062:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005066:	ed85 7a00 	vstr	s14, [r5]
 800506a:	edc5 7a01 	vstr	s15, [r5, #4]
 800506e:	3010      	adds	r0, #16
 8005070:	f105 0210 	add.w	r2, r5, #16
 8005074:	3b08      	subs	r3, #8
 8005076:	f104 0110 	add.w	r1, r4, #16
 800507a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800507e:	ed93 5a02 	vldr	s10, [r3, #8]
 8005082:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005086:	ed10 6a02 	vldr	s12, [r0, #-8]
 800508a:	edd3 5a03 	vldr	s11, [r3, #12]
 800508e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005092:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005096:	ee35 4a87 	vadd.f32	s8, s11, s14
 800509a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800509e:	ee77 5a65 	vsub.f32	s11, s14, s11
 80050a2:	ee66 4a27 	vmul.f32	s9, s12, s15
 80050a6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80050aa:	ee34 5a85 	vadd.f32	s10, s9, s10
 80050ae:	ee26 6a04 	vmul.f32	s12, s12, s8
 80050b2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80050b6:	ee77 7a25 	vadd.f32	s15, s14, s11
 80050ba:	ee76 6a85 	vadd.f32	s13, s13, s10
 80050be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80050c2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80050c6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80050ca:	3e01      	subs	r6, #1
 80050cc:	ed42 6a02 	vstr	s13, [r2, #-8]
 80050d0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80050d4:	f1a3 0308 	sub.w	r3, r3, #8
 80050d8:	f101 0108 	add.w	r1, r1, #8
 80050dc:	f100 0008 	add.w	r0, r0, #8
 80050e0:	f102 0208 	add.w	r2, r2, #8
 80050e4:	d1c9      	bne.n	800507a <arm_rfft_fast_f32+0x5e>
 80050e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ea:	edd1 7a00 	vldr	s15, [r1]
 80050ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80050f2:	6941      	ldr	r1, [r0, #20]
 80050f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80050f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80050fc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005100:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005104:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005108:	3e01      	subs	r6, #1
 800510a:	ed82 7a00 	vstr	s14, [r2]
 800510e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005112:	00f0      	lsls	r0, r6, #3
 8005114:	b3ee      	cbz	r6, 8005192 <arm_rfft_fast_f32+0x176>
 8005116:	3808      	subs	r0, #8
 8005118:	f101 0e10 	add.w	lr, r1, #16
 800511c:	4420      	add	r0, r4
 800511e:	f104 0110 	add.w	r1, r4, #16
 8005122:	f102 0c10 	add.w	ip, r2, #16
 8005126:	ed90 7a02 	vldr	s14, [r0, #8]
 800512a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800512e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005132:	ed90 4a03 	vldr	s8, [r0, #12]
 8005136:	ed11 5a01 	vldr	s10, [r1, #-4]
 800513a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800513e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005142:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005146:	ee26 3a27 	vmul.f32	s6, s12, s15
 800514a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800514e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005152:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005156:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800515a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800515e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005162:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005166:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800516a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800516e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005172:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005176:	3e01      	subs	r6, #1
 8005178:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800517c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005180:	f1a0 0008 	sub.w	r0, r0, #8
 8005184:	f101 0108 	add.w	r1, r1, #8
 8005188:	f10e 0e08 	add.w	lr, lr, #8
 800518c:	f10c 0c08 	add.w	ip, ip, #8
 8005190:	d1c9      	bne.n	8005126 <arm_rfft_fast_f32+0x10a>
 8005192:	4638      	mov	r0, r7
 8005194:	4629      	mov	r1, r5
 8005196:	461a      	mov	r2, r3
 8005198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	2301      	movs	r3, #1
 800519e:	f000 bb31 	b.w	8005804 <arm_cfft_f32>
 80051a2:	bf00      	nop

080051a4 <arm_cfft_radix8by2_f32>:
 80051a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	ed2d 8b08 	vpush	{d8-d11}
 80051ac:	f8b0 e000 	ldrh.w	lr, [r0]
 80051b0:	6842      	ldr	r2, [r0, #4]
 80051b2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80051b6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80051ba:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80051be:	4607      	mov	r7, r0
 80051c0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80051c4:	f000 80af 	beq.w	8005326 <arm_cfft_radix8by2_f32+0x182>
 80051c8:	3310      	adds	r3, #16
 80051ca:	18ce      	adds	r6, r1, r3
 80051cc:	3210      	adds	r2, #16
 80051ce:	4443      	add	r3, r8
 80051d0:	f101 0510 	add.w	r5, r1, #16
 80051d4:	f108 0410 	add.w	r4, r8, #16
 80051d8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80051dc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80051e0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80051e4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80051e8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80051ec:	ed54 6a03 	vldr	s13, [r4, #-12]
 80051f0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80051f4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80051f8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80051fc:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005200:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005204:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005208:	ed54 7a01 	vldr	s15, [r4, #-4]
 800520c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005210:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005214:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005218:	ee73 ba21 	vadd.f32	s23, s6, s3
 800521c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005220:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005224:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005228:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800522c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005230:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005234:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005238:	ed45 ba04 	vstr	s23, [r5, #-16]
 800523c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005240:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005244:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005248:	ed06 8a01 	vstr	s16, [r6, #-4]
 800524c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005250:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005254:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005258:	ee76 6a66 	vsub.f32	s13, s12, s13
 800525c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005260:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005264:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005268:	ee33 3a61 	vsub.f32	s6, s6, s3
 800526c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005270:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005274:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005278:	ee63 1a22 	vmul.f32	s3, s6, s5
 800527c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005280:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005284:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005288:	ee23 6a86 	vmul.f32	s12, s7, s12
 800528c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005290:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005294:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005298:	ee72 3a63 	vsub.f32	s7, s4, s7
 800529c:	ee71 2a88 	vadd.f32	s5, s3, s16
 80052a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80052a4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80052a8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80052ac:	ed03 6a03 	vstr	s12, [r3, #-12]
 80052b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80052b8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80052bc:	ed52 5a02 	vldr	s11, [r2, #-8]
 80052c0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80052c4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80052c8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80052cc:	ee26 5a87 	vmul.f32	s10, s13, s14
 80052d0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80052d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80052d8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80052dc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80052e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80052e4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80052e8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80052ec:	ee74 5a23 	vadd.f32	s11, s8, s7
 80052f0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80052f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80052f8:	f1be 0e01 	subs.w	lr, lr, #1
 80052fc:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005300:	f105 0510 	add.w	r5, r5, #16
 8005304:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005308:	f106 0610 	add.w	r6, r6, #16
 800530c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005310:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005314:	f102 0210 	add.w	r2, r2, #16
 8005318:	f104 0410 	add.w	r4, r4, #16
 800531c:	f103 0310 	add.w	r3, r3, #16
 8005320:	f47f af5a 	bne.w	80051d8 <arm_cfft_radix8by2_f32+0x34>
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	fa1f f48c 	uxth.w	r4, ip
 800532a:	4608      	mov	r0, r1
 800532c:	2302      	movs	r3, #2
 800532e:	4621      	mov	r1, r4
 8005330:	f000 fc86 	bl	8005c40 <arm_radix8_butterfly_f32>
 8005334:	ecbd 8b08 	vpop	{d8-d11}
 8005338:	4640      	mov	r0, r8
 800533a:	4621      	mov	r1, r4
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	2302      	movs	r3, #2
 8005340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005344:	f000 bc7c 	b.w	8005c40 <arm_radix8_butterfly_f32>

08005348 <arm_cfft_radix8by4_f32>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ed2d 8b0a 	vpush	{d8-d12}
 8005350:	8802      	ldrh	r2, [r0, #0]
 8005352:	ed91 6a00 	vldr	s12, [r1]
 8005356:	b08f      	sub	sp, #60	; 0x3c
 8005358:	460f      	mov	r7, r1
 800535a:	0852      	lsrs	r2, r2, #1
 800535c:	0093      	lsls	r3, r2, #2
 800535e:	900c      	str	r0, [sp, #48]	; 0x30
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	6841      	ldr	r1, [r0, #4]
 8005364:	ed97 7a01 	vldr	s14, [r7, #4]
 8005368:	4638      	mov	r0, r7
 800536a:	4418      	add	r0, r3
 800536c:	4606      	mov	r6, r0
 800536e:	9009      	str	r0, [sp, #36]	; 0x24
 8005370:	4418      	add	r0, r3
 8005372:	edd0 6a00 	vldr	s13, [r0]
 8005376:	edd6 3a00 	vldr	s7, [r6]
 800537a:	edd6 2a01 	vldr	s5, [r6, #4]
 800537e:	edd0 7a01 	vldr	s15, [r0, #4]
 8005382:	900a      	str	r0, [sp, #40]	; 0x28
 8005384:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005388:	4604      	mov	r4, r0
 800538a:	4625      	mov	r5, r4
 800538c:	441c      	add	r4, r3
 800538e:	ed94 4a00 	vldr	s8, [r4]
 8005392:	ed94 5a01 	vldr	s10, [r4, #4]
 8005396:	9401      	str	r4, [sp, #4]
 8005398:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800539c:	4630      	mov	r0, r6
 800539e:	ee74 4a24 	vadd.f32	s9, s8, s9
 80053a2:	463e      	mov	r6, r7
 80053a4:	ee14 ea90 	vmov	lr, s9
 80053a8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80053ac:	f846 eb08 	str.w	lr, [r6], #8
 80053b0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80053b4:	edd0 4a01 	vldr	s9, [r0, #4]
 80053b8:	9604      	str	r6, [sp, #16]
 80053ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053be:	9e01      	ldr	r6, [sp, #4]
 80053c0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80053c4:	ed96 2a01 	vldr	s4, [r6, #4]
 80053c8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80053cc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80053d0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80053d4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80053d8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80053dc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80053e0:	ee73 3a45 	vsub.f32	s7, s6, s10
 80053e4:	4604      	mov	r4, r0
 80053e6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80053ea:	ee75 6a26 	vadd.f32	s13, s10, s13
 80053ee:	46a3      	mov	fp, r4
 80053f0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80053f4:	ee34 5a84 	vadd.f32	s10, s9, s8
 80053f8:	ee13 8a90 	vmov	r8, s7
 80053fc:	46a4      	mov	ip, r4
 80053fe:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005402:	ed87 7a01 	vstr	s14, [r7, #4]
 8005406:	f84b 8b08 	str.w	r8, [fp], #8
 800540a:	f1ac 0704 	sub.w	r7, ip, #4
 800540e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005412:	f101 0c08 	add.w	ip, r1, #8
 8005416:	462c      	mov	r4, r5
 8005418:	f8cd c014 	str.w	ip, [sp, #20]
 800541c:	ee15 ca90 	vmov	ip, s11
 8005420:	f844 cb08 	str.w	ip, [r4], #8
 8005424:	9407      	str	r4, [sp, #28]
 8005426:	f101 0410 	add.w	r4, r1, #16
 800542a:	ed85 6a01 	vstr	s12, [r5, #4]
 800542e:	0852      	lsrs	r2, r2, #1
 8005430:	9402      	str	r4, [sp, #8]
 8005432:	462c      	mov	r4, r5
 8005434:	f101 0518 	add.w	r5, r1, #24
 8005438:	920b      	str	r2, [sp, #44]	; 0x2c
 800543a:	46b2      	mov	sl, r6
 800543c:	9506      	str	r5, [sp, #24]
 800543e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005442:	3a02      	subs	r2, #2
 8005444:	ee16 5a90 	vmov	r5, s13
 8005448:	46b6      	mov	lr, r6
 800544a:	4630      	mov	r0, r6
 800544c:	0852      	lsrs	r2, r2, #1
 800544e:	f84a 5b08 	str.w	r5, [sl], #8
 8005452:	f1a0 0604 	sub.w	r6, r0, #4
 8005456:	edce 7a01 	vstr	s15, [lr, #4]
 800545a:	9208      	str	r2, [sp, #32]
 800545c:	f000 8130 	beq.w	80056c0 <arm_cfft_radix8by4_f32+0x378>
 8005460:	4691      	mov	r9, r2
 8005462:	9a03      	ldr	r2, [sp, #12]
 8005464:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005468:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800546c:	3b08      	subs	r3, #8
 800546e:	f102 0510 	add.w	r5, r2, #16
 8005472:	f101 0c20 	add.w	ip, r1, #32
 8005476:	f1a4 020c 	sub.w	r2, r4, #12
 800547a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800547e:	4433      	add	r3, r6
 8005480:	3410      	adds	r4, #16
 8005482:	4650      	mov	r0, sl
 8005484:	4659      	mov	r1, fp
 8005486:	ed55 3a02 	vldr	s7, [r5, #-8]
 800548a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800548e:	ed91 7a00 	vldr	s14, [r1]
 8005492:	edd0 7a00 	vldr	s15, [r0]
 8005496:	ed15 4a01 	vldr	s8, [r5, #-4]
 800549a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800549e:	edd0 6a01 	vldr	s13, [r0, #4]
 80054a2:	ed91 6a01 	vldr	s12, [r1, #4]
 80054a6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80054aa:	ee34 0a25 	vadd.f32	s0, s8, s11
 80054ae:	ee78 4a07 	vadd.f32	s9, s16, s14
 80054b2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80054b6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80054ba:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80054be:	ed45 4a02 	vstr	s9, [r5, #-8]
 80054c2:	edd1 4a01 	vldr	s9, [r1, #4]
 80054c6:	ed90 4a01 	vldr	s8, [r0, #4]
 80054ca:	ee70 4a24 	vadd.f32	s9, s0, s9
 80054ce:	ee76 aa05 	vadd.f32	s21, s12, s10
 80054d2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80054d6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80054da:	ed45 4a01 	vstr	s9, [r5, #-4]
 80054de:	edd6 1a00 	vldr	s3, [r6]
 80054e2:	edd7 0a00 	vldr	s1, [r7]
 80054e6:	ed92 4a02 	vldr	s8, [r2, #8]
 80054ea:	edd3 3a02 	vldr	s7, [r3, #8]
 80054ee:	ed93 2a01 	vldr	s4, [r3, #4]
 80054f2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80054f6:	edd2 2a01 	vldr	s5, [r2, #4]
 80054fa:	ed57 9a01 	vldr	s19, [r7, #-4]
 80054fe:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005502:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005506:	ee74 8a84 	vadd.f32	s17, s9, s8
 800550a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800550e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005512:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005516:	ee18 aa90 	vmov	sl, s17
 800551a:	f847 a908 	str.w	sl, [r7], #-8
 800551e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005522:	ed93 9a01 	vldr	s18, [r3, #4]
 8005526:	ee73 8a28 	vadd.f32	s17, s6, s17
 800552a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800552e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005532:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005536:	edc7 8a01 	vstr	s17, [r7, #4]
 800553a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800553e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005542:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005546:	ee6a ba28 	vmul.f32	s23, s20, s17
 800554a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800554e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005552:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005556:	ee79 9a82 	vadd.f32	s19, s19, s4
 800555a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800555e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005562:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005566:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800556a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800556e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005572:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005576:	ee1c aa10 	vmov	sl, s24
 800557a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800557e:	f841 ab08 	str.w	sl, [r1], #8
 8005582:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005586:	ee3b bacb 	vsub.f32	s22, s23, s22
 800558a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800558e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005592:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005596:	edc2 8a01 	vstr	s17, [r2, #4]
 800559a:	ed82 ba02 	vstr	s22, [r2, #8]
 800559e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80055a2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80055a6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80055aa:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80055ae:	ee30 0a46 	vsub.f32	s0, s0, s12
 80055b2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80055b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80055ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80055be:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80055c2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80055c6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80055ca:	ee60 9a04 	vmul.f32	s19, s0, s8
 80055ce:	ee28 8a04 	vmul.f32	s16, s16, s8
 80055d2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80055d6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80055da:	ee39 4a68 	vsub.f32	s8, s18, s17
 80055de:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80055e2:	ee14 aa10 	vmov	sl, s8
 80055e6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80055ea:	ee63 4a24 	vmul.f32	s9, s6, s9
 80055ee:	ed44 9a02 	vstr	s19, [r4, #-8]
 80055f2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80055f6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80055fa:	f846 a908 	str.w	sl, [r6], #-8
 80055fe:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005602:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005606:	edc6 3a01 	vstr	s7, [r6, #4]
 800560a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800560e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005612:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8005616:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800561a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800561e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005622:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005626:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800562a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800562e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005632:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005636:	ee66 6a86 	vmul.f32	s13, s13, s12
 800563a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800563e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005642:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005646:	ee21 1a07 	vmul.f32	s2, s2, s14
 800564a:	ee15 aa90 	vmov	sl, s11
 800564e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005652:	f840 ab08 	str.w	sl, [r0], #8
 8005656:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800565a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800565e:	f1b9 0901 	subs.w	r9, r9, #1
 8005662:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005666:	f105 0508 	add.w	r5, r5, #8
 800566a:	ed83 1a02 	vstr	s2, [r3, #8]
 800566e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005672:	f108 0808 	add.w	r8, r8, #8
 8005676:	f1a2 0208 	sub.w	r2, r2, #8
 800567a:	f10c 0c10 	add.w	ip, ip, #16
 800567e:	f104 0408 	add.w	r4, r4, #8
 8005682:	f10e 0e18 	add.w	lr, lr, #24
 8005686:	f1a3 0308 	sub.w	r3, r3, #8
 800568a:	f47f aefc 	bne.w	8005486 <arm_cfft_radix8by4_f32+0x13e>
 800568e:	9908      	ldr	r1, [sp, #32]
 8005690:	9802      	ldr	r0, [sp, #8]
 8005692:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005696:	00cb      	lsls	r3, r1, #3
 8005698:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800569c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80056a0:	9102      	str	r1, [sp, #8]
 80056a2:	9904      	ldr	r1, [sp, #16]
 80056a4:	4419      	add	r1, r3
 80056a6:	9104      	str	r1, [sp, #16]
 80056a8:	9905      	ldr	r1, [sp, #20]
 80056aa:	4419      	add	r1, r3
 80056ac:	9105      	str	r1, [sp, #20]
 80056ae:	9907      	ldr	r1, [sp, #28]
 80056b0:	449b      	add	fp, r3
 80056b2:	4419      	add	r1, r3
 80056b4:	449a      	add	sl, r3
 80056b6:	9b06      	ldr	r3, [sp, #24]
 80056b8:	9107      	str	r1, [sp, #28]
 80056ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056be:	9306      	str	r3, [sp, #24]
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	9807      	ldr	r0, [sp, #28]
 80056c4:	edd2 3a00 	vldr	s7, [r2]
 80056c8:	ed90 4a00 	vldr	s8, [r0]
 80056cc:	eddb 7a00 	vldr	s15, [fp]
 80056d0:	ed9a 3a00 	vldr	s6, [sl]
 80056d4:	edd2 4a01 	vldr	s9, [r2, #4]
 80056d8:	ed90 7a01 	vldr	s14, [r0, #4]
 80056dc:	ed9b 2a01 	vldr	s4, [fp, #4]
 80056e0:	edda 5a01 	vldr	s11, [sl, #4]
 80056e4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80056e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056ea:	ee73 6a84 	vadd.f32	s13, s7, s8
 80056ee:	ee34 6a87 	vadd.f32	s12, s9, s14
 80056f2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80056f6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80056fa:	ee33 5a05 	vadd.f32	s10, s6, s10
 80056fe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005702:	ed82 5a00 	vstr	s10, [r2]
 8005706:	ed9b 5a01 	vldr	s10, [fp, #4]
 800570a:	edda 4a01 	vldr	s9, [sl, #4]
 800570e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8005712:	ee72 3a04 	vadd.f32	s7, s4, s8
 8005716:	ee35 5a24 	vadd.f32	s10, s10, s9
 800571a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800571e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005722:	9a05      	ldr	r2, [sp, #20]
 8005724:	ee34 5a83 	vadd.f32	s10, s9, s6
 8005728:	edd2 1a00 	vldr	s3, [r2]
 800572c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005730:	9a02      	ldr	r2, [sp, #8]
 8005732:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8005736:	ee36 6a42 	vsub.f32	s12, s12, s4
 800573a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800573e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005742:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005746:	ee25 5a21 	vmul.f32	s10, s10, s3
 800574a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800574e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005752:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005756:	edcb 2a00 	vstr	s5, [fp]
 800575a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800575e:	edd2 3a01 	vldr	s7, [r2, #4]
 8005762:	ed92 5a00 	vldr	s10, [r2]
 8005766:	9a06      	ldr	r2, [sp, #24]
 8005768:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800576c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005770:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005774:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005778:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800577c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005780:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005784:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005788:	ee34 4a42 	vsub.f32	s8, s8, s4
 800578c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005790:	edc0 6a01 	vstr	s13, [r0, #4]
 8005794:	ed80 6a00 	vstr	s12, [r0]
 8005798:	ed92 6a01 	vldr	s12, [r2, #4]
 800579c:	9803      	ldr	r0, [sp, #12]
 800579e:	ee77 7a43 	vsub.f32	s15, s14, s6
 80057a2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80057a6:	ed92 7a00 	vldr	s14, [r2]
 80057aa:	ee65 6a87 	vmul.f32	s13, s11, s14
 80057ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057b2:	ee65 5a86 	vmul.f32	s11, s11, s12
 80057b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057ba:	ee77 5a65 	vsub.f32	s11, s14, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	edca 5a01 	vstr	s11, [sl, #4]
 80057c6:	edca 7a00 	vstr	s15, [sl]
 80057ca:	6872      	ldr	r2, [r6, #4]
 80057cc:	4621      	mov	r1, r4
 80057ce:	2304      	movs	r3, #4
 80057d0:	f000 fa36 	bl	8005c40 <arm_radix8_butterfly_f32>
 80057d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d6:	6872      	ldr	r2, [r6, #4]
 80057d8:	4621      	mov	r1, r4
 80057da:	2304      	movs	r3, #4
 80057dc:	f000 fa30 	bl	8005c40 <arm_radix8_butterfly_f32>
 80057e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057e2:	6872      	ldr	r2, [r6, #4]
 80057e4:	4621      	mov	r1, r4
 80057e6:	2304      	movs	r3, #4
 80057e8:	f000 fa2a 	bl	8005c40 <arm_radix8_butterfly_f32>
 80057ec:	9801      	ldr	r0, [sp, #4]
 80057ee:	6872      	ldr	r2, [r6, #4]
 80057f0:	4621      	mov	r1, r4
 80057f2:	2304      	movs	r3, #4
 80057f4:	b00f      	add	sp, #60	; 0x3c
 80057f6:	ecbd 8b0a 	vpop	{d8-d12}
 80057fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fe:	f000 ba1f 	b.w	8005c40 <arm_radix8_butterfly_f32>
 8005802:	bf00      	nop

08005804 <arm_cfft_f32>:
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	2a01      	cmp	r2, #1
 800580a:	4606      	mov	r6, r0
 800580c:	4617      	mov	r7, r2
 800580e:	460c      	mov	r4, r1
 8005810:	4698      	mov	r8, r3
 8005812:	8805      	ldrh	r5, [r0, #0]
 8005814:	d054      	beq.n	80058c0 <arm_cfft_f32+0xbc>
 8005816:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800581a:	d04c      	beq.n	80058b6 <arm_cfft_f32+0xb2>
 800581c:	d916      	bls.n	800584c <arm_cfft_f32+0x48>
 800581e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005822:	d01a      	beq.n	800585a <arm_cfft_f32+0x56>
 8005824:	d95c      	bls.n	80058e0 <arm_cfft_f32+0xdc>
 8005826:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800582a:	d044      	beq.n	80058b6 <arm_cfft_f32+0xb2>
 800582c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005830:	d105      	bne.n	800583e <arm_cfft_f32+0x3a>
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	6872      	ldr	r2, [r6, #4]
 8005838:	2301      	movs	r3, #1
 800583a:	f000 fa01 	bl	8005c40 <arm_radix8_butterfly_f32>
 800583e:	f1b8 0f00 	cmp.w	r8, #0
 8005842:	d111      	bne.n	8005868 <arm_cfft_f32+0x64>
 8005844:	2f01      	cmp	r7, #1
 8005846:	d016      	beq.n	8005876 <arm_cfft_f32+0x72>
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	2d20      	cmp	r5, #32
 800584e:	d032      	beq.n	80058b6 <arm_cfft_f32+0xb2>
 8005850:	d94a      	bls.n	80058e8 <arm_cfft_f32+0xe4>
 8005852:	2d40      	cmp	r5, #64	; 0x40
 8005854:	d0ed      	beq.n	8005832 <arm_cfft_f32+0x2e>
 8005856:	2d80      	cmp	r5, #128	; 0x80
 8005858:	d1f1      	bne.n	800583e <arm_cfft_f32+0x3a>
 800585a:	4630      	mov	r0, r6
 800585c:	4621      	mov	r1, r4
 800585e:	f7ff fca1 	bl	80051a4 <arm_cfft_radix8by2_f32>
 8005862:	f1b8 0f00 	cmp.w	r8, #0
 8005866:	d0ed      	beq.n	8005844 <arm_cfft_f32+0x40>
 8005868:	4620      	mov	r0, r4
 800586a:	89b1      	ldrh	r1, [r6, #12]
 800586c:	68b2      	ldr	r2, [r6, #8]
 800586e:	f7fa fce7 	bl	8000240 <arm_bitreversal_32>
 8005872:	2f01      	cmp	r7, #1
 8005874:	d1e8      	bne.n	8005848 <arm_cfft_f32+0x44>
 8005876:	ee07 5a90 	vmov	s15, r5
 800587a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005882:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005886:	2d00      	cmp	r5, #0
 8005888:	d0de      	beq.n	8005848 <arm_cfft_f32+0x44>
 800588a:	f104 0108 	add.w	r1, r4, #8
 800588e:	2300      	movs	r3, #0
 8005890:	3301      	adds	r3, #1
 8005892:	429d      	cmp	r5, r3
 8005894:	f101 0108 	add.w	r1, r1, #8
 8005898:	ed11 7a04 	vldr	s14, [r1, #-16]
 800589c:	ed51 7a03 	vldr	s15, [r1, #-12]
 80058a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80058a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80058a8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80058ac:	ed41 7a03 	vstr	s15, [r1, #-12]
 80058b0:	d1ee      	bne.n	8005890 <arm_cfft_f32+0x8c>
 80058b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b6:	4630      	mov	r0, r6
 80058b8:	4621      	mov	r1, r4
 80058ba:	f7ff fd45 	bl	8005348 <arm_cfft_radix8by4_f32>
 80058be:	e7be      	b.n	800583e <arm_cfft_f32+0x3a>
 80058c0:	b1ad      	cbz	r5, 80058ee <arm_cfft_f32+0xea>
 80058c2:	f101 030c 	add.w	r3, r1, #12
 80058c6:	2200      	movs	r2, #0
 80058c8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80058cc:	3201      	adds	r2, #1
 80058ce:	eef1 7a67 	vneg.f32	s15, s15
 80058d2:	4295      	cmp	r5, r2
 80058d4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80058d8:	f103 0308 	add.w	r3, r3, #8
 80058dc:	d1f4      	bne.n	80058c8 <arm_cfft_f32+0xc4>
 80058de:	e79a      	b.n	8005816 <arm_cfft_f32+0x12>
 80058e0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80058e4:	d0a5      	beq.n	8005832 <arm_cfft_f32+0x2e>
 80058e6:	e7aa      	b.n	800583e <arm_cfft_f32+0x3a>
 80058e8:	2d10      	cmp	r5, #16
 80058ea:	d0b6      	beq.n	800585a <arm_cfft_f32+0x56>
 80058ec:	e7a7      	b.n	800583e <arm_cfft_f32+0x3a>
 80058ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80058f2:	d894      	bhi.n	800581e <arm_cfft_f32+0x1a>
 80058f4:	e7aa      	b.n	800584c <arm_cfft_f32+0x48>
 80058f6:	bf00      	nop

080058f8 <arm_cmplx_mag_f32>:
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005900:	b084      	sub	sp, #16
 8005902:	d07f      	beq.n	8005a04 <arm_cmplx_mag_f32+0x10c>
 8005904:	2700      	movs	r7, #0
 8005906:	f100 0420 	add.w	r4, r0, #32
 800590a:	f101 0510 	add.w	r5, r1, #16
 800590e:	4646      	mov	r6, r8
 8005910:	e05a      	b.n	80059c8 <arm_cmplx_mag_f32+0xd0>
 8005912:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005916:	eeb4 0a40 	vcmp.f32	s0, s0
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	f040 80a4 	bne.w	8005a6a <arm_cmplx_mag_f32+0x172>
 8005922:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005926:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800592a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800592e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005932:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005936:	ee77 7a80 	vadd.f32	s15, s15, s0
 800593a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005942:	f2c0 808f 	blt.w	8005a64 <arm_cmplx_mag_f32+0x16c>
 8005946:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800594a:	eeb4 0a40 	vcmp.f32	s0, s0
 800594e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005952:	f040 80af 	bne.w	8005ab4 <arm_cmplx_mag_f32+0x1bc>
 8005956:	ed05 0a03 	vstr	s0, [r5, #-12]
 800595a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800595e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005962:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005966:	ee20 0a00 	vmul.f32	s0, s0, s0
 800596a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800596e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005976:	db72      	blt.n	8005a5e <arm_cmplx_mag_f32+0x166>
 8005978:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800597c:	eeb4 0a40 	vcmp.f32	s0, s0
 8005980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005984:	f040 808c 	bne.w	8005aa0 <arm_cmplx_mag_f32+0x1a8>
 8005988:	ed05 0a02 	vstr	s0, [r5, #-8]
 800598c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005990:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005994:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005998:	ee20 0a00 	vmul.f32	s0, s0, s0
 800599c:	ee77 7a80 	vadd.f32	s15, s15, s0
 80059a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	db20      	blt.n	80059ec <arm_cmplx_mag_f32+0xf4>
 80059aa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80059ae:	eeb4 0a40 	vcmp.f32	s0, s0
 80059b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b6:	d169      	bne.n	8005a8c <arm_cmplx_mag_f32+0x194>
 80059b8:	3e01      	subs	r6, #1
 80059ba:	ed05 0a01 	vstr	s0, [r5, #-4]
 80059be:	f104 0420 	add.w	r4, r4, #32
 80059c2:	f105 0510 	add.w	r5, r5, #16
 80059c6:	d019      	beq.n	80059fc <arm_cmplx_mag_f32+0x104>
 80059c8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80059cc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80059d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80059d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80059dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	da95      	bge.n	8005912 <arm_cmplx_mag_f32+0x1a>
 80059e6:	f845 7c10 	str.w	r7, [r5, #-16]
 80059ea:	e79c      	b.n	8005926 <arm_cmplx_mag_f32+0x2e>
 80059ec:	3e01      	subs	r6, #1
 80059ee:	f845 7c04 	str.w	r7, [r5, #-4]
 80059f2:	f104 0420 	add.w	r4, r4, #32
 80059f6:	f105 0510 	add.w	r5, r5, #16
 80059fa:	d1e5      	bne.n	80059c8 <arm_cmplx_mag_f32+0xd0>
 80059fc:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8005a00:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005a04:	f012 0503 	ands.w	r5, r2, #3
 8005a08:	d026      	beq.n	8005a58 <arm_cmplx_mag_f32+0x160>
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	f100 0408 	add.w	r4, r0, #8
 8005a10:	e00c      	b.n	8005a2c <arm_cmplx_mag_f32+0x134>
 8005a12:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a16:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1e:	d12e      	bne.n	8005a7e <arm_cmplx_mag_f32+0x186>
 8005a20:	3d01      	subs	r5, #1
 8005a22:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005a26:	f104 0408 	add.w	r4, r4, #8
 8005a2a:	d015      	beq.n	8005a58 <arm_cmplx_mag_f32+0x160>
 8005a2c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005a30:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005a34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a3c:	3104      	adds	r1, #4
 8005a3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4a:	dae2      	bge.n	8005a12 <arm_cmplx_mag_f32+0x11a>
 8005a4c:	3d01      	subs	r5, #1
 8005a4e:	f841 6c04 	str.w	r6, [r1, #-4]
 8005a52:	f104 0408 	add.w	r4, r4, #8
 8005a56:	d1e9      	bne.n	8005a2c <arm_cmplx_mag_f32+0x134>
 8005a58:	b004      	add	sp, #16
 8005a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5e:	f845 7c08 	str.w	r7, [r5, #-8]
 8005a62:	e793      	b.n	800598c <arm_cmplx_mag_f32+0x94>
 8005a64:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005a68:	e777      	b.n	800595a <arm_cmplx_mag_f32+0x62>
 8005a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a6e:	9203      	str	r2, [sp, #12]
 8005a70:	9102      	str	r1, [sp, #8]
 8005a72:	9001      	str	r0, [sp, #4]
 8005a74:	f003 f920 	bl	8008cb8 <sqrtf>
 8005a78:	a801      	add	r0, sp, #4
 8005a7a:	c807      	ldmia	r0, {r0, r1, r2}
 8005a7c:	e751      	b.n	8005922 <arm_cmplx_mag_f32+0x2a>
 8005a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a82:	9101      	str	r1, [sp, #4]
 8005a84:	f003 f918 	bl	8008cb8 <sqrtf>
 8005a88:	9901      	ldr	r1, [sp, #4]
 8005a8a:	e7c9      	b.n	8005a20 <arm_cmplx_mag_f32+0x128>
 8005a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a90:	9203      	str	r2, [sp, #12]
 8005a92:	9102      	str	r1, [sp, #8]
 8005a94:	9001      	str	r0, [sp, #4]
 8005a96:	f003 f90f 	bl	8008cb8 <sqrtf>
 8005a9a:	a801      	add	r0, sp, #4
 8005a9c:	c807      	ldmia	r0, {r0, r1, r2}
 8005a9e:	e78b      	b.n	80059b8 <arm_cmplx_mag_f32+0xc0>
 8005aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa4:	9203      	str	r2, [sp, #12]
 8005aa6:	9102      	str	r1, [sp, #8]
 8005aa8:	9001      	str	r0, [sp, #4]
 8005aaa:	f003 f905 	bl	8008cb8 <sqrtf>
 8005aae:	a801      	add	r0, sp, #4
 8005ab0:	c807      	ldmia	r0, {r0, r1, r2}
 8005ab2:	e769      	b.n	8005988 <arm_cmplx_mag_f32+0x90>
 8005ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab8:	9203      	str	r2, [sp, #12]
 8005aba:	9102      	str	r1, [sp, #8]
 8005abc:	9001      	str	r0, [sp, #4]
 8005abe:	f003 f8fb 	bl	8008cb8 <sqrtf>
 8005ac2:	a801      	add	r0, sp, #4
 8005ac4:	c807      	ldmia	r0, {r0, r1, r2}
 8005ac6:	e746      	b.n	8005956 <arm_cmplx_mag_f32+0x5e>

08005ac8 <arm_cos_f32>:
 8005ac8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005b3c <arm_cos_f32+0x74>
 8005acc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005ad0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005ad4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ad8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ae4:	d504      	bpl.n	8005af0 <arm_cos_f32+0x28>
 8005ae6:	ee17 3a90 	vmov	r3, s15
 8005aea:	3b01      	subs	r3, #1
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005b40 <arm_cos_f32+0x78>
 8005af8:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <arm_cos_f32+0x7c>)
 8005afa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b02:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005b06:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005b0a:	ee17 3a90 	vmov	r3, s15
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005b1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005b22:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b26:	ed91 0a00 	vldr	s0, [r1]
 8005b2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b32:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005b36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b3a:	4770      	bx	lr
 8005b3c:	3e22f983 	.word	0x3e22f983
 8005b40:	44000000 	.word	0x44000000
 8005b44:	08016980 	.word	0x08016980

08005b48 <arm_scale_f32>:
 8005b48:	b470      	push	{r4, r5, r6}
 8005b4a:	0896      	lsrs	r6, r2, #2
 8005b4c:	d025      	beq.n	8005b9a <arm_scale_f32+0x52>
 8005b4e:	f100 0410 	add.w	r4, r0, #16
 8005b52:	f101 0310 	add.w	r3, r1, #16
 8005b56:	4635      	mov	r5, r6
 8005b58:	ed14 6a04 	vldr	s12, [r4, #-16]
 8005b5c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005b60:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005b64:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005b68:	ee26 6a00 	vmul.f32	s12, s12, s0
 8005b6c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005b70:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005b74:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005b78:	3d01      	subs	r5, #1
 8005b7a:	ed03 6a04 	vstr	s12, [r3, #-16]
 8005b7e:	ed43 6a03 	vstr	s13, [r3, #-12]
 8005b82:	ed03 7a02 	vstr	s14, [r3, #-8]
 8005b86:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005b8a:	f104 0410 	add.w	r4, r4, #16
 8005b8e:	f103 0310 	add.w	r3, r3, #16
 8005b92:	d1e1      	bne.n	8005b58 <arm_scale_f32+0x10>
 8005b94:	0136      	lsls	r6, r6, #4
 8005b96:	4430      	add	r0, r6
 8005b98:	4431      	add	r1, r6
 8005b9a:	f012 0203 	ands.w	r2, r2, #3
 8005b9e:	d007      	beq.n	8005bb0 <arm_scale_f32+0x68>
 8005ba0:	ecf0 7a01 	vldmia	r0!, {s15}
 8005ba4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005ba8:	3a01      	subs	r2, #1
 8005baa:	ece1 7a01 	vstmia	r1!, {s15}
 8005bae:	d1f7      	bne.n	8005ba0 <arm_scale_f32+0x58>
 8005bb0:	bc70      	pop	{r4, r5, r6}
 8005bb2:	4770      	bx	lr

08005bb4 <arm_mult_f32>:
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005bba:	d033      	beq.n	8005c24 <arm_mult_f32+0x70>
 8005bbc:	f100 0610 	add.w	r6, r0, #16
 8005bc0:	f101 0510 	add.w	r5, r1, #16
 8005bc4:	f102 0410 	add.w	r4, r2, #16
 8005bc8:	4677      	mov	r7, lr
 8005bca:	ed16 6a04 	vldr	s12, [r6, #-16]
 8005bce:	ed55 4a04 	vldr	s9, [r5, #-16]
 8005bd2:	ed56 6a02 	vldr	s13, [r6, #-8]
 8005bd6:	ed15 5a02 	vldr	s10, [r5, #-8]
 8005bda:	ed16 7a03 	vldr	s14, [r6, #-12]
 8005bde:	ed55 5a03 	vldr	s11, [r5, #-12]
 8005be2:	ed56 7a01 	vldr	s15, [r6, #-4]
 8005be6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005bea:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005bee:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005bf2:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005bf6:	ed44 6a02 	vstr	s13, [r4, #-8]
 8005bfa:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005bfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c02:	3f01      	subs	r7, #1
 8005c04:	ed04 7a03 	vstr	s14, [r4, #-12]
 8005c08:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005c0c:	f106 0610 	add.w	r6, r6, #16
 8005c10:	f105 0510 	add.w	r5, r5, #16
 8005c14:	f104 0410 	add.w	r4, r4, #16
 8005c18:	d1d7      	bne.n	8005bca <arm_mult_f32+0x16>
 8005c1a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005c1e:	4420      	add	r0, r4
 8005c20:	4421      	add	r1, r4
 8005c22:	4422      	add	r2, r4
 8005c24:	f013 0303 	ands.w	r3, r3, #3
 8005c28:	d009      	beq.n	8005c3e <arm_mult_f32+0x8a>
 8005c2a:	ecf0 7a01 	vldmia	r0!, {s15}
 8005c2e:	ecb1 7a01 	vldmia	r1!, {s14}
 8005c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c36:	3b01      	subs	r3, #1
 8005c38:	ece2 7a01 	vstmia	r2!, {s15}
 8005c3c:	d1f5      	bne.n	8005c2a <arm_mult_f32+0x76>
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c40 <arm_radix8_butterfly_f32>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	ed2d 8b10 	vpush	{d8-d15}
 8005c48:	b09d      	sub	sp, #116	; 0x74
 8005c4a:	461c      	mov	r4, r3
 8005c4c:	ed9f bac8 	vldr	s22, [pc, #800]	; 8005f70 <arm_radix8_butterfly_f32+0x330>
 8005c50:	921a      	str	r2, [sp, #104]	; 0x68
 8005c52:	1d03      	adds	r3, r0, #4
 8005c54:	4682      	mov	sl, r0
 8005c56:	4689      	mov	r9, r1
 8005c58:	468b      	mov	fp, r1
 8005c5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c5c:	9400      	str	r4, [sp, #0]
 8005c5e:	469e      	mov	lr, r3
 8005c60:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005c64:	005a      	lsls	r2, r3, #1
 8005c66:	18d6      	adds	r6, r2, r3
 8005c68:	18f5      	adds	r5, r6, r3
 8005c6a:	9203      	str	r2, [sp, #12]
 8005c6c:	195a      	adds	r2, r3, r5
 8005c6e:	18d0      	adds	r0, r2, r3
 8005c70:	00df      	lsls	r7, r3, #3
 8005c72:	1819      	adds	r1, r3, r0
 8005c74:	463c      	mov	r4, r7
 8005c76:	9701      	str	r7, [sp, #4]
 8005c78:	4457      	add	r7, sl
 8005c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c7c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8005c86:	eb07 0c04 	add.w	ip, r7, r4
 8005c8a:	9c00      	ldr	r4, [sp, #0]
 8005c8c:	9302      	str	r3, [sp, #8]
 8005c8e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8005c92:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8005c96:	3204      	adds	r2, #4
 8005c98:	3104      	adds	r1, #4
 8005c9a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8005c9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	eddc 7a00 	vldr	s15, [ip]
 8005caa:	edd7 6a00 	vldr	s13, [r7]
 8005cae:	edd6 3a00 	vldr	s7, [r6]
 8005cb2:	ed5e aa01 	vldr	s21, [lr, #-4]
 8005cb6:	edd5 4a00 	vldr	s9, [r5]
 8005cba:	ed90 2a00 	vldr	s4, [r0]
 8005cbe:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005cc2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005cc6:	ee77 8a82 	vadd.f32	s17, s15, s4
 8005cca:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8005cce:	ee76 1a87 	vadd.f32	s3, s13, s14
 8005cd2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8005cd6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8005cda:	ee33 5a28 	vadd.f32	s10, s6, s17
 8005cde:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005ce2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8005ce6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005cea:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8005cee:	ed85 5a00 	vstr	s10, [r5]
 8005cf2:	ed96 1a01 	vldr	s2, [r6, #4]
 8005cf6:	edd7 5a01 	vldr	s11, [r7, #4]
 8005cfa:	ed92 aa00 	vldr	s20, [r2]
 8005cfe:	ed91 6a00 	vldr	s12, [r1]
 8005d02:	ed9e 9a00 	vldr	s18, [lr]
 8005d06:	ed95 5a01 	vldr	s10, [r5, #4]
 8005d0a:	eddc 6a01 	vldr	s13, [ip, #4]
 8005d0e:	edd0 9a01 	vldr	s19, [r0, #4]
 8005d12:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8005d16:	ee71 2a46 	vsub.f32	s5, s2, s12
 8005d1a:	ee75 3aca 	vsub.f32	s7, s11, s20
 8005d1e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005d22:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8005d26:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005d2a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8005d2e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8005d32:	ee79 3a05 	vadd.f32	s7, s18, s10
 8005d36:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005d3a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8005d3e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8005d42:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005d46:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8005d4a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005d4e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005d52:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005d56:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8005d5a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005d5e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005d62:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005d66:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005d6a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005d6e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8005d72:	ee75 6a62 	vsub.f32	s13, s10, s5
 8005d76:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8005d7a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005d7e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8005d82:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8005d86:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005d8a:	ee75 4a22 	vadd.f32	s9, s10, s5
 8005d8e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8005d92:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005d96:	ee33 8a06 	vadd.f32	s16, s6, s12
 8005d9a:	ee75 2a87 	vadd.f32	s5, s11, s14
 8005d9e:	ee31 9a28 	vadd.f32	s18, s2, s17
 8005da2:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005da6:	ee74 0a61 	vsub.f32	s1, s8, s3
 8005daa:	ee33 2a80 	vadd.f32	s4, s7, s0
 8005dae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8005db2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8005db6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005dba:	ee31 1a68 	vsub.f32	s2, s2, s17
 8005dbe:	ee34 4a21 	vadd.f32	s8, s8, s3
 8005dc2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005dc6:	ee74 4a85 	vadd.f32	s9, s9, s10
 8005dca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005dce:	44d8      	add	r8, fp
 8005dd0:	45c1      	cmp	r9, r8
 8005dd2:	ed8e 9a00 	vstr	s18, [lr]
 8005dd6:	ed85 1a01 	vstr	s2, [r5, #4]
 8005dda:	449e      	add	lr, r3
 8005ddc:	ed8c 8a00 	vstr	s16, [ip]
 8005de0:	441d      	add	r5, r3
 8005de2:	ed80 6a00 	vstr	s12, [r0]
 8005de6:	edcc 0a01 	vstr	s1, [ip, #4]
 8005dea:	ed80 4a01 	vstr	s8, [r0, #4]
 8005dee:	449c      	add	ip, r3
 8005df0:	ed87 2a00 	vstr	s4, [r7]
 8005df4:	4418      	add	r0, r3
 8005df6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005dfa:	ed42 2a01 	vstr	s5, [r2, #-4]
 8005dfe:	ed86 7a00 	vstr	s14, [r6]
 8005e02:	ed87 3a01 	vstr	s6, [r7, #4]
 8005e06:	edc1 4a00 	vstr	s9, [r1]
 8005e0a:	441f      	add	r7, r3
 8005e0c:	edc2 5a00 	vstr	s11, [r2]
 8005e10:	4419      	add	r1, r3
 8005e12:	edc6 6a01 	vstr	s13, [r6, #4]
 8005e16:	441a      	add	r2, r3
 8005e18:	441e      	add	r6, r3
 8005e1a:	f63f af44 	bhi.w	8005ca6 <arm_radix8_butterfly_f32+0x66>
 8005e1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e20:	2907      	cmp	r1, #7
 8005e22:	4620      	mov	r0, r4
 8005e24:	f240 81e9 	bls.w	80061fa <arm_radix8_butterfly_f32+0x5ba>
 8005e28:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005e2c:	193e      	adds	r6, r7, r4
 8005e2e:	1935      	adds	r5, r6, r4
 8005e30:	9c03      	ldr	r4, [sp, #12]
 8005e32:	9000      	str	r0, [sp, #0]
 8005e34:	4622      	mov	r2, r4
 8005e36:	3201      	adds	r2, #1
 8005e38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005e3c:	9900      	ldr	r1, [sp, #0]
 8005e3e:	1828      	adds	r0, r5, r0
 8005e40:	eb00 0e01 	add.w	lr, r0, r1
 8005e44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e46:	440a      	add	r2, r1
 8005e48:	eb04 0c01 	add.w	ip, r4, r1
 8005e4c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8005e50:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8005e54:	9a00      	ldr	r2, [sp, #0]
 8005e56:	940f      	str	r4, [sp, #60]	; 0x3c
 8005e58:	00ed      	lsls	r5, r5, #3
 8005e5a:	9511      	str	r5, [sp, #68]	; 0x44
 8005e5c:	00d5      	lsls	r5, r2, #3
 8005e5e:	950d      	str	r5, [sp, #52]	; 0x34
 8005e60:	9d01      	ldr	r5, [sp, #4]
 8005e62:	3508      	adds	r5, #8
 8005e64:	9516      	str	r5, [sp, #88]	; 0x58
 8005e66:	9d02      	ldr	r5, [sp, #8]
 8005e68:	3508      	adds	r5, #8
 8005e6a:	0114      	lsls	r4, r2, #4
 8005e6c:	9517      	str	r5, [sp, #92]	; 0x5c
 8005e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e70:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005e72:	940e      	str	r4, [sp, #56]	; 0x38
 8005e74:	00c0      	lsls	r0, r0, #3
 8005e76:	9010      	str	r0, [sp, #64]	; 0x40
 8005e78:	18aa      	adds	r2, r5, r2
 8005e7a:	9207      	str	r2, [sp, #28]
 8005e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e80:	18aa      	adds	r2, r5, r2
 8005e82:	9208      	str	r2, [sp, #32]
 8005e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e86:	18aa      	adds	r2, r5, r2
 8005e88:	9209      	str	r2, [sp, #36]	; 0x24
 8005e8a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e8e:	f10e 0204 	add.w	r2, lr, #4
 8005e92:	920a      	str	r2, [sp, #40]	; 0x28
 8005e94:	00c9      	lsls	r1, r1, #3
 8005e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e98:	310c      	adds	r1, #12
 8005e9a:	00f6      	lsls	r6, r6, #3
 8005e9c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8005ea0:	9114      	str	r1, [sp, #80]	; 0x50
 8005ea2:	18a9      	adds	r1, r5, r2
 8005ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ea6:	9612      	str	r6, [sp, #72]	; 0x48
 8005ea8:	00ff      	lsls	r7, r7, #3
 8005eaa:	19ae      	adds	r6, r5, r6
 8005eac:	3008      	adds	r0, #8
 8005eae:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8005eb2:	9606      	str	r6, [sp, #24]
 8005eb4:	9019      	str	r0, [sp, #100]	; 0x64
 8005eb6:	18aa      	adds	r2, r5, r2
 8005eb8:	0164      	lsls	r4, r4, #5
 8005eba:	19ee      	adds	r6, r5, r7
 8005ebc:	f10c 000c 	add.w	r0, ip, #12
 8005ec0:	9713      	str	r7, [sp, #76]	; 0x4c
 8005ec2:	9604      	str	r6, [sp, #16]
 8005ec4:	9015      	str	r0, [sp, #84]	; 0x54
 8005ec6:	9103      	str	r1, [sp, #12]
 8005ec8:	9205      	str	r2, [sp, #20]
 8005eca:	f104 0208 	add.w	r2, r4, #8
 8005ece:	9218      	str	r2, [sp, #96]	; 0x60
 8005ed0:	f04f 0801 	mov.w	r8, #1
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f102 0108 	add.w	r1, r2, #8
 8005eda:	460f      	mov	r7, r1
 8005edc:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ee0:	188e      	adds	r6, r1, r2
 8005ee2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005ee4:	188d      	adds	r5, r1, r2
 8005ee6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005ee8:	188c      	adds	r4, r1, r2
 8005eea:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005eec:	1888      	adds	r0, r1, r2
 8005eee:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005ef0:	eb01 0c02 	add.w	ip, r1, r2
 8005ef4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005ef6:	440a      	add	r2, r1
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	edd1 fa00 	vldr	s31, [r1]
 8005efe:	9905      	ldr	r1, [sp, #20]
 8005f00:	ed91 fa00 	vldr	s30, [r1]
 8005f04:	9904      	ldr	r1, [sp, #16]
 8005f06:	edd1 ea00 	vldr	s29, [r1]
 8005f0a:	9906      	ldr	r1, [sp, #24]
 8005f0c:	ed91 ea00 	vldr	s28, [r1]
 8005f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f12:	edd1 da00 	vldr	s27, [r1]
 8005f16:	9908      	ldr	r1, [sp, #32]
 8005f18:	ed91 da00 	vldr	s26, [r1]
 8005f1c:	9907      	ldr	r1, [sp, #28]
 8005f1e:	edd1 ca00 	vldr	s25, [r1]
 8005f22:	9903      	ldr	r1, [sp, #12]
 8005f24:	ed91 ca01 	vldr	s24, [r1, #4]
 8005f28:	9905      	ldr	r1, [sp, #20]
 8005f2a:	edd1 ba01 	vldr	s23, [r1, #4]
 8005f2e:	9904      	ldr	r1, [sp, #16]
 8005f30:	edd1 aa01 	vldr	s21, [r1, #4]
 8005f34:	9906      	ldr	r1, [sp, #24]
 8005f36:	ed91 aa01 	vldr	s20, [r1, #4]
 8005f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3c:	edd1 7a01 	vldr	s15, [r1, #4]
 8005f40:	9908      	ldr	r1, [sp, #32]
 8005f42:	edcd 7a00 	vstr	s15, [sp]
 8005f46:	edd1 7a01 	vldr	s15, [r1, #4]
 8005f4a:	9907      	ldr	r1, [sp, #28]
 8005f4c:	edcd 7a01 	vstr	s15, [sp, #4]
 8005f50:	edd1 7a01 	vldr	s15, [r1, #4]
 8005f54:	eb0a 0e07 	add.w	lr, sl, r7
 8005f58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005f5a:	edcd 7a02 	vstr	s15, [sp, #8]
 8005f5e:	eb0c 010a 	add.w	r1, ip, sl
 8005f62:	4456      	add	r6, sl
 8005f64:	4455      	add	r5, sl
 8005f66:	4454      	add	r4, sl
 8005f68:	4450      	add	r0, sl
 8005f6a:	4452      	add	r2, sl
 8005f6c:	46c4      	mov	ip, r8
 8005f6e:	e001      	b.n	8005f74 <arm_radix8_butterfly_f32+0x334>
 8005f70:	3f3504f3 	.word	0x3f3504f3
 8005f74:	ed96 5a00 	vldr	s10, [r6]
 8005f78:	ed52 9a01 	vldr	s19, [r2, #-4]
 8005f7c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005f80:	edd0 7a00 	vldr	s15, [r0]
 8005f84:	ed17 7a01 	vldr	s14, [r7, #-4]
 8005f88:	edde 3a00 	vldr	s7, [lr]
 8005f8c:	ed94 3a00 	vldr	s6, [r4]
 8005f90:	ed95 2a00 	vldr	s4, [r5]
 8005f94:	ed9e 0a01 	vldr	s0, [lr, #4]
 8005f98:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005f9c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005fa0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005fa4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005fa8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005fac:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005fb0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005fb4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fbc:	ed8e 6a00 	vstr	s12, [lr]
 8005fc0:	edd0 8a01 	vldr	s17, [r0, #4]
 8005fc4:	ed95 9a01 	vldr	s18, [r5, #4]
 8005fc8:	edd1 2a00 	vldr	s5, [r1]
 8005fcc:	ed97 7a00 	vldr	s14, [r7]
 8005fd0:	edd4 0a01 	vldr	s1, [r4, #4]
 8005fd4:	ed96 6a01 	vldr	s12, [r6, #4]
 8005fd8:	edd2 5a00 	vldr	s11, [r2]
 8005fdc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005fe0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005fe4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005fe8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005fec:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005ff0:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005ff4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005ff8:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005ffc:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006000:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006004:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006008:	ee72 7a67 	vsub.f32	s15, s4, s15
 800600c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006010:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006014:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006018:	ee32 9a08 	vadd.f32	s18, s4, s16
 800601c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006020:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006024:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006028:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800602c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006030:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006034:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006038:	ee30 6a46 	vsub.f32	s12, s0, s12
 800603c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006040:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006044:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006048:	ee32 7a64 	vsub.f32	s14, s4, s9
 800604c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006050:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006054:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006058:	ee75 8a85 	vadd.f32	s17, s11, s10
 800605c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006060:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006064:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006068:	ee79 1a41 	vsub.f32	s3, s18, s2
 800606c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006070:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006074:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006078:	ee72 4a24 	vadd.f32	s9, s4, s9
 800607c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006080:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006084:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006088:	ee77 9a85 	vadd.f32	s19, s15, s10
 800608c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006090:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006094:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006098:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800609c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80060a0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80060a4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80060a8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80060ac:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80060b0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80060b4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80060b8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80060bc:	ee35 3a03 	vadd.f32	s6, s10, s6
 80060c0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80060c4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80060c8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80060cc:	ed9d 4a02 	vldr	s8, [sp, #8]
 80060d0:	ed8e 1a01 	vstr	s2, [lr, #4]
 80060d4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80060d8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80060dc:	ed9d 7a01 	vldr	s14, [sp, #4]
 80060e0:	ed86 3a00 	vstr	s6, [r6]
 80060e4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80060e8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80060ec:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80060f0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80060f4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80060f8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80060fc:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006100:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006104:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006108:	ee64 8a28 	vmul.f32	s17, s8, s17
 800610c:	ed9d 4a00 	vldr	s8, [sp]
 8006110:	edc6 6a01 	vstr	s13, [r6, #4]
 8006114:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006118:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800611c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006120:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006124:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006128:	ee74 4a84 	vadd.f32	s9, s9, s8
 800612c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006130:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006134:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006138:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800613c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006140:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006144:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006148:	ee30 0a68 	vsub.f32	s0, s0, s17
 800614c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006150:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006154:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006158:	44dc      	add	ip, fp
 800615a:	45e1      	cmp	r9, ip
 800615c:	ed84 9a00 	vstr	s18, [r4]
 8006160:	edc4 3a01 	vstr	s7, [r4, #4]
 8006164:	449e      	add	lr, r3
 8006166:	ed02 7a01 	vstr	s14, [r2, #-4]
 800616a:	edc2 2a00 	vstr	s5, [r2]
 800616e:	441e      	add	r6, r3
 8006170:	ed85 2a00 	vstr	s4, [r5]
 8006174:	ed85 8a01 	vstr	s16, [r5, #4]
 8006178:	441c      	add	r4, r3
 800617a:	ed47 1a01 	vstr	s3, [r7, #-4]
 800617e:	ed87 0a00 	vstr	s0, [r7]
 8006182:	441a      	add	r2, r3
 8006184:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006188:	edc1 9a00 	vstr	s19, [r1]
 800618c:	441d      	add	r5, r3
 800618e:	edc0 0a00 	vstr	s1, [r0]
 8006192:	441f      	add	r7, r3
 8006194:	ed80 6a01 	vstr	s12, [r0, #4]
 8006198:	4419      	add	r1, r3
 800619a:	4418      	add	r0, r3
 800619c:	f63f aeea 	bhi.w	8005f74 <arm_radix8_butterfly_f32+0x334>
 80061a0:	9a03      	ldr	r2, [sp, #12]
 80061a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061a4:	440a      	add	r2, r1
 80061a6:	9203      	str	r2, [sp, #12]
 80061a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80061aa:	9a05      	ldr	r2, [sp, #20]
 80061ac:	440a      	add	r2, r1
 80061ae:	9205      	str	r2, [sp, #20]
 80061b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061b2:	9a04      	ldr	r2, [sp, #16]
 80061b4:	440a      	add	r2, r1
 80061b6:	9204      	str	r2, [sp, #16]
 80061b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80061ba:	9a06      	ldr	r2, [sp, #24]
 80061bc:	440a      	add	r2, r1
 80061be:	9206      	str	r2, [sp, #24]
 80061c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c4:	440a      	add	r2, r1
 80061c6:	9209      	str	r2, [sp, #36]	; 0x24
 80061c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80061ca:	9a08      	ldr	r2, [sp, #32]
 80061cc:	440a      	add	r2, r1
 80061ce:	9208      	str	r2, [sp, #32]
 80061d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061d2:	9a07      	ldr	r2, [sp, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	9207      	str	r2, [sp, #28]
 80061d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	3208      	adds	r2, #8
 80061e2:	4588      	cmp	r8, r1
 80061e4:	920a      	str	r2, [sp, #40]	; 0x28
 80061e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061e8:	f47f ae75 	bne.w	8005ed6 <arm_radix8_butterfly_f32+0x296>
 80061ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	46c3      	mov	fp, r8
 80061f4:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80061f8:	e532      	b.n	8005c60 <arm_radix8_butterfly_f32+0x20>
 80061fa:	b01d      	add	sp, #116	; 0x74
 80061fc:	ecbd 8b10 	vpop	{d8-d15}
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006204 <__errno>:
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <__errno+0x8>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000010 	.word	0x20000010

08006210 <__libc_init_array>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4d0d      	ldr	r5, [pc, #52]	; (8006248 <__libc_init_array+0x38>)
 8006214:	4c0d      	ldr	r4, [pc, #52]	; (800624c <__libc_init_array+0x3c>)
 8006216:	1b64      	subs	r4, r4, r5
 8006218:	10a4      	asrs	r4, r4, #2
 800621a:	2600      	movs	r6, #0
 800621c:	42a6      	cmp	r6, r4
 800621e:	d109      	bne.n	8006234 <__libc_init_array+0x24>
 8006220:	4d0b      	ldr	r5, [pc, #44]	; (8006250 <__libc_init_array+0x40>)
 8006222:	4c0c      	ldr	r4, [pc, #48]	; (8006254 <__libc_init_array+0x44>)
 8006224:	f002 fe5a 	bl	8008edc <_init>
 8006228:	1b64      	subs	r4, r4, r5
 800622a:	10a4      	asrs	r4, r4, #2
 800622c:	2600      	movs	r6, #0
 800622e:	42a6      	cmp	r6, r4
 8006230:	d105      	bne.n	800623e <__libc_init_array+0x2e>
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	f855 3b04 	ldr.w	r3, [r5], #4
 8006238:	4798      	blx	r3
 800623a:	3601      	adds	r6, #1
 800623c:	e7ee      	b.n	800621c <__libc_init_array+0xc>
 800623e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006242:	4798      	blx	r3
 8006244:	3601      	adds	r6, #1
 8006246:	e7f2      	b.n	800622e <__libc_init_array+0x1e>
 8006248:	0801d0d8 	.word	0x0801d0d8
 800624c:	0801d0d8 	.word	0x0801d0d8
 8006250:	0801d0d8 	.word	0x0801d0d8
 8006254:	0801d0dc 	.word	0x0801d0dc

08006258 <memset>:
 8006258:	4402      	add	r2, r0
 800625a:	4603      	mov	r3, r0
 800625c:	4293      	cmp	r3, r2
 800625e:	d100      	bne.n	8006262 <memset+0xa>
 8006260:	4770      	bx	lr
 8006262:	f803 1b01 	strb.w	r1, [r3], #1
 8006266:	e7f9      	b.n	800625c <memset+0x4>

08006268 <__cvt>:
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	ed2d 8b02 	vpush	{d8}
 800626e:	eeb0 8b40 	vmov.f64	d8, d0
 8006272:	b085      	sub	sp, #20
 8006274:	4617      	mov	r7, r2
 8006276:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006278:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800627a:	ee18 2a90 	vmov	r2, s17
 800627e:	f025 0520 	bic.w	r5, r5, #32
 8006282:	2a00      	cmp	r2, #0
 8006284:	bfb6      	itet	lt
 8006286:	222d      	movlt	r2, #45	; 0x2d
 8006288:	2200      	movge	r2, #0
 800628a:	eeb1 8b40 	vneglt.f64	d8, d0
 800628e:	2d46      	cmp	r5, #70	; 0x46
 8006290:	460c      	mov	r4, r1
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	d004      	beq.n	80062a0 <__cvt+0x38>
 8006296:	2d45      	cmp	r5, #69	; 0x45
 8006298:	d100      	bne.n	800629c <__cvt+0x34>
 800629a:	3401      	adds	r4, #1
 800629c:	2102      	movs	r1, #2
 800629e:	e000      	b.n	80062a2 <__cvt+0x3a>
 80062a0:	2103      	movs	r1, #3
 80062a2:	ab03      	add	r3, sp, #12
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	ab02      	add	r3, sp, #8
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	4622      	mov	r2, r4
 80062ac:	4633      	mov	r3, r6
 80062ae:	eeb0 0b48 	vmov.f64	d0, d8
 80062b2:	f000 fdf5 	bl	8006ea0 <_dtoa_r>
 80062b6:	2d47      	cmp	r5, #71	; 0x47
 80062b8:	d101      	bne.n	80062be <__cvt+0x56>
 80062ba:	07fb      	lsls	r3, r7, #31
 80062bc:	d51a      	bpl.n	80062f4 <__cvt+0x8c>
 80062be:	2d46      	cmp	r5, #70	; 0x46
 80062c0:	eb00 0204 	add.w	r2, r0, r4
 80062c4:	d10c      	bne.n	80062e0 <__cvt+0x78>
 80062c6:	7803      	ldrb	r3, [r0, #0]
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d107      	bne.n	80062dc <__cvt+0x74>
 80062cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	bf1c      	itt	ne
 80062d6:	f1c4 0401 	rsbne	r4, r4, #1
 80062da:	6034      	strne	r4, [r6, #0]
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	441a      	add	r2, r3
 80062e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80062e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e8:	bf08      	it	eq
 80062ea:	9203      	streq	r2, [sp, #12]
 80062ec:	2130      	movs	r1, #48	; 0x30
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d307      	bcc.n	8006304 <__cvt+0x9c>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f8:	1a1b      	subs	r3, r3, r0
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	b005      	add	sp, #20
 80062fe:	ecbd 8b02 	vpop	{d8}
 8006302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006304:	1c5c      	adds	r4, r3, #1
 8006306:	9403      	str	r4, [sp, #12]
 8006308:	7019      	strb	r1, [r3, #0]
 800630a:	e7f0      	b.n	80062ee <__cvt+0x86>

0800630c <__exponent>:
 800630c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630e:	4603      	mov	r3, r0
 8006310:	2900      	cmp	r1, #0
 8006312:	bfb8      	it	lt
 8006314:	4249      	neglt	r1, r1
 8006316:	f803 2b02 	strb.w	r2, [r3], #2
 800631a:	bfb4      	ite	lt
 800631c:	222d      	movlt	r2, #45	; 0x2d
 800631e:	222b      	movge	r2, #43	; 0x2b
 8006320:	2909      	cmp	r1, #9
 8006322:	7042      	strb	r2, [r0, #1]
 8006324:	dd2a      	ble.n	800637c <__exponent+0x70>
 8006326:	f10d 0407 	add.w	r4, sp, #7
 800632a:	46a4      	mov	ip, r4
 800632c:	270a      	movs	r7, #10
 800632e:	46a6      	mov	lr, r4
 8006330:	460a      	mov	r2, r1
 8006332:	fb91 f6f7 	sdiv	r6, r1, r7
 8006336:	fb07 1516 	mls	r5, r7, r6, r1
 800633a:	3530      	adds	r5, #48	; 0x30
 800633c:	2a63      	cmp	r2, #99	; 0x63
 800633e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006346:	4631      	mov	r1, r6
 8006348:	dcf1      	bgt.n	800632e <__exponent+0x22>
 800634a:	3130      	adds	r1, #48	; 0x30
 800634c:	f1ae 0502 	sub.w	r5, lr, #2
 8006350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006354:	1c44      	adds	r4, r0, #1
 8006356:	4629      	mov	r1, r5
 8006358:	4561      	cmp	r1, ip
 800635a:	d30a      	bcc.n	8006372 <__exponent+0x66>
 800635c:	f10d 0209 	add.w	r2, sp, #9
 8006360:	eba2 020e 	sub.w	r2, r2, lr
 8006364:	4565      	cmp	r5, ip
 8006366:	bf88      	it	hi
 8006368:	2200      	movhi	r2, #0
 800636a:	4413      	add	r3, r2
 800636c:	1a18      	subs	r0, r3, r0
 800636e:	b003      	add	sp, #12
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800637a:	e7ed      	b.n	8006358 <__exponent+0x4c>
 800637c:	2330      	movs	r3, #48	; 0x30
 800637e:	3130      	adds	r1, #48	; 0x30
 8006380:	7083      	strb	r3, [r0, #2]
 8006382:	70c1      	strb	r1, [r0, #3]
 8006384:	1d03      	adds	r3, r0, #4
 8006386:	e7f1      	b.n	800636c <__exponent+0x60>

08006388 <_printf_float>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	b08b      	sub	sp, #44	; 0x2c
 800638e:	460c      	mov	r4, r1
 8006390:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006394:	4616      	mov	r6, r2
 8006396:	461f      	mov	r7, r3
 8006398:	4605      	mov	r5, r0
 800639a:	f001 fca7 	bl	8007cec <_localeconv_r>
 800639e:	f8d0 b000 	ldr.w	fp, [r0]
 80063a2:	4658      	mov	r0, fp
 80063a4:	f7f9 ffac 	bl	8000300 <strlen>
 80063a8:	2300      	movs	r3, #0
 80063aa:	9308      	str	r3, [sp, #32]
 80063ac:	f8d8 3000 	ldr.w	r3, [r8]
 80063b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	3307      	adds	r3, #7
 80063b8:	f023 0307 	bic.w	r3, r3, #7
 80063bc:	f103 0108 	add.w	r1, r3, #8
 80063c0:	f8c8 1000 	str.w	r1, [r8]
 80063c4:	4682      	mov	sl, r0
 80063c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80063ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006630 <_printf_float+0x2a8>
 80063d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80063d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80063da:	eeb4 6b47 	vcmp.f64	d6, d7
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	dd24      	ble.n	800642e <_printf_float+0xa6>
 80063e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80063e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ec:	d502      	bpl.n	80063f4 <_printf_float+0x6c>
 80063ee:	232d      	movs	r3, #45	; 0x2d
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f4:	4b90      	ldr	r3, [pc, #576]	; (8006638 <_printf_float+0x2b0>)
 80063f6:	4891      	ldr	r0, [pc, #580]	; (800663c <_printf_float+0x2b4>)
 80063f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80063fc:	bf94      	ite	ls
 80063fe:	4698      	movls	r8, r3
 8006400:	4680      	movhi	r8, r0
 8006402:	2303      	movs	r3, #3
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	f022 0204 	bic.w	r2, r2, #4
 800640a:	2300      	movs	r3, #0
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	9700      	str	r7, [sp, #0]
 8006412:	4633      	mov	r3, r6
 8006414:	aa09      	add	r2, sp, #36	; 0x24
 8006416:	4621      	mov	r1, r4
 8006418:	4628      	mov	r0, r5
 800641a:	f000 f9d3 	bl	80067c4 <_printf_common>
 800641e:	3001      	adds	r0, #1
 8006420:	f040 808a 	bne.w	8006538 <_printf_float+0x1b0>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	b00b      	add	sp, #44	; 0x2c
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006436:	d709      	bvc.n	800644c <_printf_float+0xc4>
 8006438:	ee10 3a90 	vmov	r3, s1
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfbc      	itt	lt
 8006440:	232d      	movlt	r3, #45	; 0x2d
 8006442:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006446:	487e      	ldr	r0, [pc, #504]	; (8006640 <_printf_float+0x2b8>)
 8006448:	4b7e      	ldr	r3, [pc, #504]	; (8006644 <_printf_float+0x2bc>)
 800644a:	e7d5      	b.n	80063f8 <_printf_float+0x70>
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006452:	9104      	str	r1, [sp, #16]
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	d13c      	bne.n	80064d2 <_printf_float+0x14a>
 8006458:	2306      	movs	r3, #6
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	2300      	movs	r3, #0
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	ab08      	add	r3, sp, #32
 8006462:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800646a:	ab07      	add	r3, sp, #28
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	f10d 031b 	add.w	r3, sp, #27
 8006476:	4628      	mov	r0, r5
 8006478:	f7ff fef6 	bl	8006268 <__cvt>
 800647c:	9b04      	ldr	r3, [sp, #16]
 800647e:	9907      	ldr	r1, [sp, #28]
 8006480:	2b47      	cmp	r3, #71	; 0x47
 8006482:	4680      	mov	r8, r0
 8006484:	d108      	bne.n	8006498 <_printf_float+0x110>
 8006486:	1cc8      	adds	r0, r1, #3
 8006488:	db02      	blt.n	8006490 <_printf_float+0x108>
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	4299      	cmp	r1, r3
 800648e:	dd41      	ble.n	8006514 <_printf_float+0x18c>
 8006490:	f1a9 0902 	sub.w	r9, r9, #2
 8006494:	fa5f f989 	uxtb.w	r9, r9
 8006498:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800649c:	d820      	bhi.n	80064e0 <_printf_float+0x158>
 800649e:	3901      	subs	r1, #1
 80064a0:	464a      	mov	r2, r9
 80064a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064a6:	9107      	str	r1, [sp, #28]
 80064a8:	f7ff ff30 	bl	800630c <__exponent>
 80064ac:	9a08      	ldr	r2, [sp, #32]
 80064ae:	9004      	str	r0, [sp, #16]
 80064b0:	1813      	adds	r3, r2, r0
 80064b2:	2a01      	cmp	r2, #1
 80064b4:	6123      	str	r3, [r4, #16]
 80064b6:	dc02      	bgt.n	80064be <_printf_float+0x136>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	07d2      	lsls	r2, r2, #31
 80064bc:	d501      	bpl.n	80064c2 <_printf_float+0x13a>
 80064be:	3301      	adds	r3, #1
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0a2      	beq.n	8006410 <_printf_float+0x88>
 80064ca:	232d      	movs	r3, #45	; 0x2d
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d0:	e79e      	b.n	8006410 <_printf_float+0x88>
 80064d2:	9904      	ldr	r1, [sp, #16]
 80064d4:	2947      	cmp	r1, #71	; 0x47
 80064d6:	d1c1      	bne.n	800645c <_printf_float+0xd4>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1bf      	bne.n	800645c <_printf_float+0xd4>
 80064dc:	2301      	movs	r3, #1
 80064de:	e7bc      	b.n	800645a <_printf_float+0xd2>
 80064e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80064e4:	d118      	bne.n	8006518 <_printf_float+0x190>
 80064e6:	2900      	cmp	r1, #0
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	dd0b      	ble.n	8006504 <_printf_float+0x17c>
 80064ec:	6121      	str	r1, [r4, #16]
 80064ee:	b913      	cbnz	r3, 80064f6 <_printf_float+0x16e>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	07d0      	lsls	r0, r2, #31
 80064f4:	d502      	bpl.n	80064fc <_printf_float+0x174>
 80064f6:	3301      	adds	r3, #1
 80064f8:	440b      	add	r3, r1
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2300      	movs	r3, #0
 80064fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	e7de      	b.n	80064c2 <_printf_float+0x13a>
 8006504:	b913      	cbnz	r3, 800650c <_printf_float+0x184>
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	07d2      	lsls	r2, r2, #31
 800650a:	d501      	bpl.n	8006510 <_printf_float+0x188>
 800650c:	3302      	adds	r3, #2
 800650e:	e7f4      	b.n	80064fa <_printf_float+0x172>
 8006510:	2301      	movs	r3, #1
 8006512:	e7f2      	b.n	80064fa <_printf_float+0x172>
 8006514:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	4299      	cmp	r1, r3
 800651c:	db05      	blt.n	800652a <_printf_float+0x1a2>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	6121      	str	r1, [r4, #16]
 8006522:	07d8      	lsls	r0, r3, #31
 8006524:	d5ea      	bpl.n	80064fc <_printf_float+0x174>
 8006526:	1c4b      	adds	r3, r1, #1
 8006528:	e7e7      	b.n	80064fa <_printf_float+0x172>
 800652a:	2900      	cmp	r1, #0
 800652c:	bfd4      	ite	le
 800652e:	f1c1 0202 	rsble	r2, r1, #2
 8006532:	2201      	movgt	r2, #1
 8006534:	4413      	add	r3, r2
 8006536:	e7e0      	b.n	80064fa <_printf_float+0x172>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	055a      	lsls	r2, r3, #21
 800653c:	d407      	bmi.n	800654e <_printf_float+0x1c6>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	4642      	mov	r2, r8
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	d12a      	bne.n	80065a2 <_printf_float+0x21a>
 800654c:	e76a      	b.n	8006424 <_printf_float+0x9c>
 800654e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006552:	f240 80e2 	bls.w	800671a <_printf_float+0x392>
 8006556:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800655a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800655e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006562:	d133      	bne.n	80065cc <_printf_float+0x244>
 8006564:	4a38      	ldr	r2, [pc, #224]	; (8006648 <_printf_float+0x2c0>)
 8006566:	2301      	movs	r3, #1
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af58 	beq.w	8006424 <_printf_float+0x9c>
 8006574:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006578:	429a      	cmp	r2, r3
 800657a:	db02      	blt.n	8006582 <_printf_float+0x1fa>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	07d8      	lsls	r0, r3, #31
 8006580:	d50f      	bpl.n	80065a2 <_printf_float+0x21a>
 8006582:	4653      	mov	r3, sl
 8006584:	465a      	mov	r2, fp
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f af49 	beq.w	8006424 <_printf_float+0x9c>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	f104 091a 	add.w	r9, r4, #26
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	3b01      	subs	r3, #1
 800659e:	4543      	cmp	r3, r8
 80065a0:	dc09      	bgt.n	80065b6 <_printf_float+0x22e>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	079b      	lsls	r3, r3, #30
 80065a6:	f100 8108 	bmi.w	80067ba <_printf_float+0x432>
 80065aa:	68e0      	ldr	r0, [r4, #12]
 80065ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ae:	4298      	cmp	r0, r3
 80065b0:	bfb8      	it	lt
 80065b2:	4618      	movlt	r0, r3
 80065b4:	e738      	b.n	8006428 <_printf_float+0xa0>
 80065b6:	2301      	movs	r3, #1
 80065b8:	464a      	mov	r2, r9
 80065ba:	4631      	mov	r1, r6
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	f43f af2f 	beq.w	8006424 <_printf_float+0x9c>
 80065c6:	f108 0801 	add.w	r8, r8, #1
 80065ca:	e7e6      	b.n	800659a <_printf_float+0x212>
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	dc3c      	bgt.n	800664c <_printf_float+0x2c4>
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <_printf_float+0x2c0>)
 80065d4:	2301      	movs	r3, #1
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f af21 	beq.w	8006424 <_printf_float+0x9c>
 80065e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d102      	bne.n	80065f0 <_printf_float+0x268>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d5d8      	bpl.n	80065a2 <_printf_float+0x21a>
 80065f0:	4653      	mov	r3, sl
 80065f2:	465a      	mov	r2, fp
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af12 	beq.w	8006424 <_printf_float+0x9c>
 8006600:	f04f 0900 	mov.w	r9, #0
 8006604:	f104 0a1a 	add.w	sl, r4, #26
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	425b      	negs	r3, r3
 800660c:	454b      	cmp	r3, r9
 800660e:	dc01      	bgt.n	8006614 <_printf_float+0x28c>
 8006610:	9b08      	ldr	r3, [sp, #32]
 8006612:	e795      	b.n	8006540 <_printf_float+0x1b8>
 8006614:	2301      	movs	r3, #1
 8006616:	4652      	mov	r2, sl
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af00 	beq.w	8006424 <_printf_float+0x9c>
 8006624:	f109 0901 	add.w	r9, r9, #1
 8006628:	e7ee      	b.n	8006608 <_printf_float+0x280>
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w
 8006630:	ffffffff 	.word	0xffffffff
 8006634:	7fefffff 	.word	0x7fefffff
 8006638:	0801cbd8 	.word	0x0801cbd8
 800663c:	0801cbdc 	.word	0x0801cbdc
 8006640:	0801cbe4 	.word	0x0801cbe4
 8006644:	0801cbe0 	.word	0x0801cbe0
 8006648:	0801cbe8 	.word	0x0801cbe8
 800664c:	9a08      	ldr	r2, [sp, #32]
 800664e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006650:	429a      	cmp	r2, r3
 8006652:	bfa8      	it	ge
 8006654:	461a      	movge	r2, r3
 8006656:	2a00      	cmp	r2, #0
 8006658:	4691      	mov	r9, r2
 800665a:	dc38      	bgt.n	80066ce <_printf_float+0x346>
 800665c:	2300      	movs	r3, #0
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006664:	f104 021a 	add.w	r2, r4, #26
 8006668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800666a:	9905      	ldr	r1, [sp, #20]
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	eba3 0309 	sub.w	r3, r3, r9
 8006672:	428b      	cmp	r3, r1
 8006674:	dc33      	bgt.n	80066de <_printf_float+0x356>
 8006676:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800667a:	429a      	cmp	r2, r3
 800667c:	db3c      	blt.n	80066f8 <_printf_float+0x370>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	07da      	lsls	r2, r3, #31
 8006682:	d439      	bmi.n	80066f8 <_printf_float+0x370>
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	9907      	ldr	r1, [sp, #28]
 800668a:	1a9a      	subs	r2, r3, r2
 800668c:	eba3 0901 	sub.w	r9, r3, r1
 8006690:	4591      	cmp	r9, r2
 8006692:	bfa8      	it	ge
 8006694:	4691      	movge	r9, r2
 8006696:	f1b9 0f00 	cmp.w	r9, #0
 800669a:	dc35      	bgt.n	8006708 <_printf_float+0x380>
 800669c:	f04f 0800 	mov.w	r8, #0
 80066a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a4:	f104 0a1a 	add.w	sl, r4, #26
 80066a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	eba3 0309 	sub.w	r3, r3, r9
 80066b2:	4543      	cmp	r3, r8
 80066b4:	f77f af75 	ble.w	80065a2 <_printf_float+0x21a>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4652      	mov	r2, sl
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f aeae 	beq.w	8006424 <_printf_float+0x9c>
 80066c8:	f108 0801 	add.w	r8, r8, #1
 80066cc:	e7ec      	b.n	80066a8 <_printf_float+0x320>
 80066ce:	4613      	mov	r3, r2
 80066d0:	4631      	mov	r1, r6
 80066d2:	4642      	mov	r2, r8
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	d1bf      	bne.n	800665c <_printf_float+0x2d4>
 80066dc:	e6a2      	b.n	8006424 <_printf_float+0x9c>
 80066de:	2301      	movs	r3, #1
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	9204      	str	r2, [sp, #16]
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	f43f ae9b 	beq.w	8006424 <_printf_float+0x9c>
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	3301      	adds	r3, #1
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	e7b7      	b.n	8006668 <_printf_float+0x2e0>
 80066f8:	4653      	mov	r3, sl
 80066fa:	465a      	mov	r2, fp
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	d1be      	bne.n	8006684 <_printf_float+0x2fc>
 8006706:	e68d      	b.n	8006424 <_printf_float+0x9c>
 8006708:	9a04      	ldr	r2, [sp, #16]
 800670a:	464b      	mov	r3, r9
 800670c:	4442      	add	r2, r8
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	d1c1      	bne.n	800669c <_printf_float+0x314>
 8006718:	e684      	b.n	8006424 <_printf_float+0x9c>
 800671a:	9a08      	ldr	r2, [sp, #32]
 800671c:	2a01      	cmp	r2, #1
 800671e:	dc01      	bgt.n	8006724 <_printf_float+0x39c>
 8006720:	07db      	lsls	r3, r3, #31
 8006722:	d537      	bpl.n	8006794 <_printf_float+0x40c>
 8006724:	2301      	movs	r3, #1
 8006726:	4642      	mov	r2, r8
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f ae78 	beq.w	8006424 <_printf_float+0x9c>
 8006734:	4653      	mov	r3, sl
 8006736:	465a      	mov	r2, fp
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f ae70 	beq.w	8006424 <_printf_float+0x9c>
 8006744:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006748:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006750:	d01b      	beq.n	800678a <_printf_float+0x402>
 8006752:	9b08      	ldr	r3, [sp, #32]
 8006754:	f108 0201 	add.w	r2, r8, #1
 8006758:	3b01      	subs	r3, #1
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d10e      	bne.n	8006782 <_printf_float+0x3fa>
 8006764:	e65e      	b.n	8006424 <_printf_float+0x9c>
 8006766:	2301      	movs	r3, #1
 8006768:	464a      	mov	r2, r9
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	f43f ae57 	beq.w	8006424 <_printf_float+0x9c>
 8006776:	f108 0801 	add.w	r8, r8, #1
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	3b01      	subs	r3, #1
 800677e:	4543      	cmp	r3, r8
 8006780:	dcf1      	bgt.n	8006766 <_printf_float+0x3de>
 8006782:	9b04      	ldr	r3, [sp, #16]
 8006784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006788:	e6db      	b.n	8006542 <_printf_float+0x1ba>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	f104 091a 	add.w	r9, r4, #26
 8006792:	e7f2      	b.n	800677a <_printf_float+0x3f2>
 8006794:	2301      	movs	r3, #1
 8006796:	4642      	mov	r2, r8
 8006798:	e7df      	b.n	800675a <_printf_float+0x3d2>
 800679a:	2301      	movs	r3, #1
 800679c:	464a      	mov	r2, r9
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f ae3d 	beq.w	8006424 <_printf_float+0x9c>
 80067aa:	f108 0801 	add.w	r8, r8, #1
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b2:	1a5b      	subs	r3, r3, r1
 80067b4:	4543      	cmp	r3, r8
 80067b6:	dcf0      	bgt.n	800679a <_printf_float+0x412>
 80067b8:	e6f7      	b.n	80065aa <_printf_float+0x222>
 80067ba:	f04f 0800 	mov.w	r8, #0
 80067be:	f104 0919 	add.w	r9, r4, #25
 80067c2:	e7f4      	b.n	80067ae <_printf_float+0x426>

080067c4 <_printf_common>:
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	4616      	mov	r6, r2
 80067ca:	4699      	mov	r9, r3
 80067cc:	688a      	ldr	r2, [r1, #8]
 80067ce:	690b      	ldr	r3, [r1, #16]
 80067d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	bfb8      	it	lt
 80067d8:	4613      	movlt	r3, r2
 80067da:	6033      	str	r3, [r6, #0]
 80067dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067e0:	4607      	mov	r7, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	b10a      	cbz	r2, 80067ea <_printf_common+0x26>
 80067e6:	3301      	adds	r3, #1
 80067e8:	6033      	str	r3, [r6, #0]
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	0699      	lsls	r1, r3, #26
 80067ee:	bf42      	ittt	mi
 80067f0:	6833      	ldrmi	r3, [r6, #0]
 80067f2:	3302      	addmi	r3, #2
 80067f4:	6033      	strmi	r3, [r6, #0]
 80067f6:	6825      	ldr	r5, [r4, #0]
 80067f8:	f015 0506 	ands.w	r5, r5, #6
 80067fc:	d106      	bne.n	800680c <_printf_common+0x48>
 80067fe:	f104 0a19 	add.w	sl, r4, #25
 8006802:	68e3      	ldr	r3, [r4, #12]
 8006804:	6832      	ldr	r2, [r6, #0]
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	42ab      	cmp	r3, r5
 800680a:	dc26      	bgt.n	800685a <_printf_common+0x96>
 800680c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006810:	1e13      	subs	r3, r2, #0
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	bf18      	it	ne
 8006816:	2301      	movne	r3, #1
 8006818:	0692      	lsls	r2, r2, #26
 800681a:	d42b      	bmi.n	8006874 <_printf_common+0xb0>
 800681c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006820:	4649      	mov	r1, r9
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	3001      	adds	r0, #1
 8006828:	d01e      	beq.n	8006868 <_printf_common+0xa4>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	68e5      	ldr	r5, [r4, #12]
 800682e:	6832      	ldr	r2, [r6, #0]
 8006830:	f003 0306 	and.w	r3, r3, #6
 8006834:	2b04      	cmp	r3, #4
 8006836:	bf08      	it	eq
 8006838:	1aad      	subeq	r5, r5, r2
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	6922      	ldr	r2, [r4, #16]
 800683e:	bf0c      	ite	eq
 8006840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006844:	2500      	movne	r5, #0
 8006846:	4293      	cmp	r3, r2
 8006848:	bfc4      	itt	gt
 800684a:	1a9b      	subgt	r3, r3, r2
 800684c:	18ed      	addgt	r5, r5, r3
 800684e:	2600      	movs	r6, #0
 8006850:	341a      	adds	r4, #26
 8006852:	42b5      	cmp	r5, r6
 8006854:	d11a      	bne.n	800688c <_printf_common+0xc8>
 8006856:	2000      	movs	r0, #0
 8006858:	e008      	b.n	800686c <_printf_common+0xa8>
 800685a:	2301      	movs	r3, #1
 800685c:	4652      	mov	r2, sl
 800685e:	4649      	mov	r1, r9
 8006860:	4638      	mov	r0, r7
 8006862:	47c0      	blx	r8
 8006864:	3001      	adds	r0, #1
 8006866:	d103      	bne.n	8006870 <_printf_common+0xac>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006870:	3501      	adds	r5, #1
 8006872:	e7c6      	b.n	8006802 <_printf_common+0x3e>
 8006874:	18e1      	adds	r1, r4, r3
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	2030      	movs	r0, #48	; 0x30
 800687a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800687e:	4422      	add	r2, r4
 8006880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006888:	3302      	adds	r3, #2
 800688a:	e7c7      	b.n	800681c <_printf_common+0x58>
 800688c:	2301      	movs	r3, #1
 800688e:	4622      	mov	r2, r4
 8006890:	4649      	mov	r1, r9
 8006892:	4638      	mov	r0, r7
 8006894:	47c0      	blx	r8
 8006896:	3001      	adds	r0, #1
 8006898:	d0e6      	beq.n	8006868 <_printf_common+0xa4>
 800689a:	3601      	adds	r6, #1
 800689c:	e7d9      	b.n	8006852 <_printf_common+0x8e>
	...

080068a0 <_printf_i>:
 80068a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	7e0f      	ldrb	r7, [r1, #24]
 80068a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068a8:	2f78      	cmp	r7, #120	; 0x78
 80068aa:	4691      	mov	r9, r2
 80068ac:	4680      	mov	r8, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	469a      	mov	sl, r3
 80068b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068b6:	d807      	bhi.n	80068c8 <_printf_i+0x28>
 80068b8:	2f62      	cmp	r7, #98	; 0x62
 80068ba:	d80a      	bhi.n	80068d2 <_printf_i+0x32>
 80068bc:	2f00      	cmp	r7, #0
 80068be:	f000 80d8 	beq.w	8006a72 <_printf_i+0x1d2>
 80068c2:	2f58      	cmp	r7, #88	; 0x58
 80068c4:	f000 80a3 	beq.w	8006a0e <_printf_i+0x16e>
 80068c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068d0:	e03a      	b.n	8006948 <_printf_i+0xa8>
 80068d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068d6:	2b15      	cmp	r3, #21
 80068d8:	d8f6      	bhi.n	80068c8 <_printf_i+0x28>
 80068da:	a101      	add	r1, pc, #4	; (adr r1, 80068e0 <_printf_i+0x40>)
 80068dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068e0:	08006939 	.word	0x08006939
 80068e4:	0800694d 	.word	0x0800694d
 80068e8:	080068c9 	.word	0x080068c9
 80068ec:	080068c9 	.word	0x080068c9
 80068f0:	080068c9 	.word	0x080068c9
 80068f4:	080068c9 	.word	0x080068c9
 80068f8:	0800694d 	.word	0x0800694d
 80068fc:	080068c9 	.word	0x080068c9
 8006900:	080068c9 	.word	0x080068c9
 8006904:	080068c9 	.word	0x080068c9
 8006908:	080068c9 	.word	0x080068c9
 800690c:	08006a59 	.word	0x08006a59
 8006910:	0800697d 	.word	0x0800697d
 8006914:	08006a3b 	.word	0x08006a3b
 8006918:	080068c9 	.word	0x080068c9
 800691c:	080068c9 	.word	0x080068c9
 8006920:	08006a7b 	.word	0x08006a7b
 8006924:	080068c9 	.word	0x080068c9
 8006928:	0800697d 	.word	0x0800697d
 800692c:	080068c9 	.word	0x080068c9
 8006930:	080068c9 	.word	0x080068c9
 8006934:	08006a43 	.word	0x08006a43
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	602a      	str	r2, [r5, #0]
 8006940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006948:	2301      	movs	r3, #1
 800694a:	e0a3      	b.n	8006a94 <_printf_i+0x1f4>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	6829      	ldr	r1, [r5, #0]
 8006950:	0606      	lsls	r6, r0, #24
 8006952:	f101 0304 	add.w	r3, r1, #4
 8006956:	d50a      	bpl.n	800696e <_printf_i+0xce>
 8006958:	680e      	ldr	r6, [r1, #0]
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	2e00      	cmp	r6, #0
 800695e:	da03      	bge.n	8006968 <_printf_i+0xc8>
 8006960:	232d      	movs	r3, #45	; 0x2d
 8006962:	4276      	negs	r6, r6
 8006964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006968:	485e      	ldr	r0, [pc, #376]	; (8006ae4 <_printf_i+0x244>)
 800696a:	230a      	movs	r3, #10
 800696c:	e019      	b.n	80069a2 <_printf_i+0x102>
 800696e:	680e      	ldr	r6, [r1, #0]
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006976:	bf18      	it	ne
 8006978:	b236      	sxthne	r6, r6
 800697a:	e7ef      	b.n	800695c <_printf_i+0xbc>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	1d19      	adds	r1, r3, #4
 8006982:	6029      	str	r1, [r5, #0]
 8006984:	0601      	lsls	r1, r0, #24
 8006986:	d501      	bpl.n	800698c <_printf_i+0xec>
 8006988:	681e      	ldr	r6, [r3, #0]
 800698a:	e002      	b.n	8006992 <_printf_i+0xf2>
 800698c:	0646      	lsls	r6, r0, #25
 800698e:	d5fb      	bpl.n	8006988 <_printf_i+0xe8>
 8006990:	881e      	ldrh	r6, [r3, #0]
 8006992:	4854      	ldr	r0, [pc, #336]	; (8006ae4 <_printf_i+0x244>)
 8006994:	2f6f      	cmp	r7, #111	; 0x6f
 8006996:	bf0c      	ite	eq
 8006998:	2308      	moveq	r3, #8
 800699a:	230a      	movne	r3, #10
 800699c:	2100      	movs	r1, #0
 800699e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069a2:	6865      	ldr	r5, [r4, #4]
 80069a4:	60a5      	str	r5, [r4, #8]
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	bfa2      	ittt	ge
 80069aa:	6821      	ldrge	r1, [r4, #0]
 80069ac:	f021 0104 	bicge.w	r1, r1, #4
 80069b0:	6021      	strge	r1, [r4, #0]
 80069b2:	b90e      	cbnz	r6, 80069b8 <_printf_i+0x118>
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	d04d      	beq.n	8006a54 <_printf_i+0x1b4>
 80069b8:	4615      	mov	r5, r2
 80069ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80069be:	fb03 6711 	mls	r7, r3, r1, r6
 80069c2:	5dc7      	ldrb	r7, [r0, r7]
 80069c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069c8:	4637      	mov	r7, r6
 80069ca:	42bb      	cmp	r3, r7
 80069cc:	460e      	mov	r6, r1
 80069ce:	d9f4      	bls.n	80069ba <_printf_i+0x11a>
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d10b      	bne.n	80069ec <_printf_i+0x14c>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07de      	lsls	r6, r3, #31
 80069d8:	d508      	bpl.n	80069ec <_printf_i+0x14c>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	6861      	ldr	r1, [r4, #4]
 80069de:	4299      	cmp	r1, r3
 80069e0:	bfde      	ittt	le
 80069e2:	2330      	movle	r3, #48	; 0x30
 80069e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069ec:	1b52      	subs	r2, r2, r5
 80069ee:	6122      	str	r2, [r4, #16]
 80069f0:	f8cd a000 	str.w	sl, [sp]
 80069f4:	464b      	mov	r3, r9
 80069f6:	aa03      	add	r2, sp, #12
 80069f8:	4621      	mov	r1, r4
 80069fa:	4640      	mov	r0, r8
 80069fc:	f7ff fee2 	bl	80067c4 <_printf_common>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d14c      	bne.n	8006a9e <_printf_i+0x1fe>
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	b004      	add	sp, #16
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	4835      	ldr	r0, [pc, #212]	; (8006ae4 <_printf_i+0x244>)
 8006a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a14:	6829      	ldr	r1, [r5, #0]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a1c:	6029      	str	r1, [r5, #0]
 8006a1e:	061d      	lsls	r5, r3, #24
 8006a20:	d514      	bpl.n	8006a4c <_printf_i+0x1ac>
 8006a22:	07df      	lsls	r7, r3, #31
 8006a24:	bf44      	itt	mi
 8006a26:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2a:	6023      	strmi	r3, [r4, #0]
 8006a2c:	b91e      	cbnz	r6, 8006a36 <_printf_i+0x196>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f023 0320 	bic.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	2310      	movs	r3, #16
 8006a38:	e7b0      	b.n	800699c <_printf_i+0xfc>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f043 0320 	orr.w	r3, r3, #32
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	2378      	movs	r3, #120	; 0x78
 8006a44:	4828      	ldr	r0, [pc, #160]	; (8006ae8 <_printf_i+0x248>)
 8006a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a4a:	e7e3      	b.n	8006a14 <_printf_i+0x174>
 8006a4c:	0659      	lsls	r1, r3, #25
 8006a4e:	bf48      	it	mi
 8006a50:	b2b6      	uxthmi	r6, r6
 8006a52:	e7e6      	b.n	8006a22 <_printf_i+0x182>
 8006a54:	4615      	mov	r5, r2
 8006a56:	e7bb      	b.n	80069d0 <_printf_i+0x130>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	6826      	ldr	r6, [r4, #0]
 8006a5c:	6961      	ldr	r1, [r4, #20]
 8006a5e:	1d18      	adds	r0, r3, #4
 8006a60:	6028      	str	r0, [r5, #0]
 8006a62:	0635      	lsls	r5, r6, #24
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	d501      	bpl.n	8006a6c <_printf_i+0x1cc>
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <_printf_i+0x1d2>
 8006a6c:	0670      	lsls	r0, r6, #25
 8006a6e:	d5fb      	bpl.n	8006a68 <_printf_i+0x1c8>
 8006a70:	8019      	strh	r1, [r3, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	6123      	str	r3, [r4, #16]
 8006a76:	4615      	mov	r5, r2
 8006a78:	e7ba      	b.n	80069f0 <_printf_i+0x150>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	1d1a      	adds	r2, r3, #4
 8006a7e:	602a      	str	r2, [r5, #0]
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	6862      	ldr	r2, [r4, #4]
 8006a84:	2100      	movs	r1, #0
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7f9 fc42 	bl	8000310 <memchr>
 8006a8c:	b108      	cbz	r0, 8006a92 <_printf_i+0x1f2>
 8006a8e:	1b40      	subs	r0, r0, r5
 8006a90:	6060      	str	r0, [r4, #4]
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	2300      	movs	r3, #0
 8006a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9c:	e7a8      	b.n	80069f0 <_printf_i+0x150>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	47d0      	blx	sl
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d0ab      	beq.n	8006a04 <_printf_i+0x164>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	079b      	lsls	r3, r3, #30
 8006ab0:	d413      	bmi.n	8006ada <_printf_i+0x23a>
 8006ab2:	68e0      	ldr	r0, [r4, #12]
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	bfb8      	it	lt
 8006aba:	4618      	movlt	r0, r3
 8006abc:	e7a4      	b.n	8006a08 <_printf_i+0x168>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	47d0      	blx	sl
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d09b      	beq.n	8006a04 <_printf_i+0x164>
 8006acc:	3501      	adds	r5, #1
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	9903      	ldr	r1, [sp, #12]
 8006ad2:	1a5b      	subs	r3, r3, r1
 8006ad4:	42ab      	cmp	r3, r5
 8006ad6:	dcf2      	bgt.n	8006abe <_printf_i+0x21e>
 8006ad8:	e7eb      	b.n	8006ab2 <_printf_i+0x212>
 8006ada:	2500      	movs	r5, #0
 8006adc:	f104 0619 	add.w	r6, r4, #25
 8006ae0:	e7f5      	b.n	8006ace <_printf_i+0x22e>
 8006ae2:	bf00      	nop
 8006ae4:	0801cbea 	.word	0x0801cbea
 8006ae8:	0801cbfb 	.word	0x0801cbfb

08006aec <iprintf>:
 8006aec:	b40f      	push	{r0, r1, r2, r3}
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <iprintf+0x2c>)
 8006af0:	b513      	push	{r0, r1, r4, lr}
 8006af2:	681c      	ldr	r4, [r3, #0]
 8006af4:	b124      	cbz	r4, 8006b00 <iprintf+0x14>
 8006af6:	69a3      	ldr	r3, [r4, #24]
 8006af8:	b913      	cbnz	r3, 8006b00 <iprintf+0x14>
 8006afa:	4620      	mov	r0, r4
 8006afc:	f001 f858 	bl	8007bb0 <__sinit>
 8006b00:	ab05      	add	r3, sp, #20
 8006b02:	9a04      	ldr	r2, [sp, #16]
 8006b04:	68a1      	ldr	r1, [r4, #8]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f001 fe15 	bl	8008738 <_vfiprintf_r>
 8006b0e:	b002      	add	sp, #8
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	b004      	add	sp, #16
 8006b16:	4770      	bx	lr
 8006b18:	20000010 	.word	0x20000010

08006b1c <_puts_r>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	460e      	mov	r6, r1
 8006b20:	4605      	mov	r5, r0
 8006b22:	b118      	cbz	r0, 8006b2c <_puts_r+0x10>
 8006b24:	6983      	ldr	r3, [r0, #24]
 8006b26:	b90b      	cbnz	r3, 8006b2c <_puts_r+0x10>
 8006b28:	f001 f842 	bl	8007bb0 <__sinit>
 8006b2c:	69ab      	ldr	r3, [r5, #24]
 8006b2e:	68ac      	ldr	r4, [r5, #8]
 8006b30:	b913      	cbnz	r3, 8006b38 <_puts_r+0x1c>
 8006b32:	4628      	mov	r0, r5
 8006b34:	f001 f83c 	bl	8007bb0 <__sinit>
 8006b38:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <_puts_r+0xd0>)
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d120      	bne.n	8006b80 <_puts_r+0x64>
 8006b3e:	686c      	ldr	r4, [r5, #4]
 8006b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b42:	07db      	lsls	r3, r3, #31
 8006b44:	d405      	bmi.n	8006b52 <_puts_r+0x36>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	0598      	lsls	r0, r3, #22
 8006b4a:	d402      	bmi.n	8006b52 <_puts_r+0x36>
 8006b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4e:	f001 f8d2 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	0719      	lsls	r1, r3, #28
 8006b56:	d51d      	bpl.n	8006b94 <_puts_r+0x78>
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	b1db      	cbz	r3, 8006b94 <_puts_r+0x78>
 8006b5c:	3e01      	subs	r6, #1
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b64:	3b01      	subs	r3, #1
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	bb39      	cbnz	r1, 8006bba <_puts_r+0x9e>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da38      	bge.n	8006be0 <_puts_r+0xc4>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	210a      	movs	r1, #10
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f848 	bl	8006c08 <__swbuf_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d011      	beq.n	8006ba0 <_puts_r+0x84>
 8006b7c:	250a      	movs	r5, #10
 8006b7e:	e011      	b.n	8006ba4 <_puts_r+0x88>
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <_puts_r+0xd4>)
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d101      	bne.n	8006b8a <_puts_r+0x6e>
 8006b86:	68ac      	ldr	r4, [r5, #8]
 8006b88:	e7da      	b.n	8006b40 <_puts_r+0x24>
 8006b8a:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <_puts_r+0xd8>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	bf08      	it	eq
 8006b90:	68ec      	ldreq	r4, [r5, #12]
 8006b92:	e7d5      	b.n	8006b40 <_puts_r+0x24>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f888 	bl	8006cac <__swsetup_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0dd      	beq.n	8006b5c <_puts_r+0x40>
 8006ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba6:	07da      	lsls	r2, r3, #31
 8006ba8:	d405      	bmi.n	8006bb6 <_puts_r+0x9a>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	059b      	lsls	r3, r3, #22
 8006bae:	d402      	bmi.n	8006bb6 <_puts_r+0x9a>
 8006bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb2:	f001 f8a1 	bl	8007cf8 <__retarget_lock_release_recursive>
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da04      	bge.n	8006bc8 <_puts_r+0xac>
 8006bbe:	69a2      	ldr	r2, [r4, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	dc06      	bgt.n	8006bd2 <_puts_r+0xb6>
 8006bc4:	290a      	cmp	r1, #10
 8006bc6:	d004      	beq.n	8006bd2 <_puts_r+0xb6>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	6022      	str	r2, [r4, #0]
 8006bce:	7019      	strb	r1, [r3, #0]
 8006bd0:	e7c5      	b.n	8006b5e <_puts_r+0x42>
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f000 f817 	bl	8006c08 <__swbuf_r>
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d1bf      	bne.n	8006b5e <_puts_r+0x42>
 8006bde:	e7df      	b.n	8006ba0 <_puts_r+0x84>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	250a      	movs	r5, #10
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	701d      	strb	r5, [r3, #0]
 8006bea:	e7db      	b.n	8006ba4 <_puts_r+0x88>
 8006bec:	0801ccbc 	.word	0x0801ccbc
 8006bf0:	0801ccdc 	.word	0x0801ccdc
 8006bf4:	0801cc9c 	.word	0x0801cc9c

08006bf8 <puts>:
 8006bf8:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <puts+0xc>)
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	f7ff bf8d 	b.w	8006b1c <_puts_r>
 8006c02:	bf00      	nop
 8006c04:	20000010 	.word	0x20000010

08006c08 <__swbuf_r>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	460e      	mov	r6, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b118      	cbz	r0, 8006c1a <__swbuf_r+0x12>
 8006c12:	6983      	ldr	r3, [r0, #24]
 8006c14:	b90b      	cbnz	r3, 8006c1a <__swbuf_r+0x12>
 8006c16:	f000 ffcb 	bl	8007bb0 <__sinit>
 8006c1a:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <__swbuf_r+0x98>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d12b      	bne.n	8006c78 <__swbuf_r+0x70>
 8006c20:	686c      	ldr	r4, [r5, #4]
 8006c22:	69a3      	ldr	r3, [r4, #24]
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	071a      	lsls	r2, r3, #28
 8006c2a:	d52f      	bpl.n	8006c8c <__swbuf_r+0x84>
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	b36b      	cbz	r3, 8006c8c <__swbuf_r+0x84>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1ac0      	subs	r0, r0, r3
 8006c36:	6963      	ldr	r3, [r4, #20]
 8006c38:	b2f6      	uxtb	r6, r6
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	4637      	mov	r7, r6
 8006c3e:	dc04      	bgt.n	8006c4a <__swbuf_r+0x42>
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 ff20 	bl	8007a88 <_fflush_r>
 8006c48:	bb30      	cbnz	r0, 8006c98 <__swbuf_r+0x90>
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	6022      	str	r2, [r4, #0]
 8006c56:	701e      	strb	r6, [r3, #0]
 8006c58:	6963      	ldr	r3, [r4, #20]
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	4283      	cmp	r3, r0
 8006c5e:	d004      	beq.n	8006c6a <__swbuf_r+0x62>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d506      	bpl.n	8006c74 <__swbuf_r+0x6c>
 8006c66:	2e0a      	cmp	r6, #10
 8006c68:	d104      	bne.n	8006c74 <__swbuf_r+0x6c>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 ff0b 	bl	8007a88 <_fflush_r>
 8006c72:	b988      	cbnz	r0, 8006c98 <__swbuf_r+0x90>
 8006c74:	4638      	mov	r0, r7
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <__swbuf_r+0x9c>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <__swbuf_r+0x7a>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7cf      	b.n	8006c22 <__swbuf_r+0x1a>
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <__swbuf_r+0xa0>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7ca      	b.n	8006c22 <__swbuf_r+0x1a>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f80c 	bl	8006cac <__swsetup_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0cb      	beq.n	8006c30 <__swbuf_r+0x28>
 8006c98:	f04f 37ff 	mov.w	r7, #4294967295
 8006c9c:	e7ea      	b.n	8006c74 <__swbuf_r+0x6c>
 8006c9e:	bf00      	nop
 8006ca0:	0801ccbc 	.word	0x0801ccbc
 8006ca4:	0801ccdc 	.word	0x0801ccdc
 8006ca8:	0801cc9c 	.word	0x0801cc9c

08006cac <__swsetup_r>:
 8006cac:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <__swsetup_r+0xcc>)
 8006cae:	b570      	push	{r4, r5, r6, lr}
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	b125      	cbz	r5, 8006cc2 <__swsetup_r+0x16>
 8006cb8:	69ab      	ldr	r3, [r5, #24]
 8006cba:	b913      	cbnz	r3, 8006cc2 <__swsetup_r+0x16>
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 ff77 	bl	8007bb0 <__sinit>
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <__swsetup_r+0xd0>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d10f      	bne.n	8006ce8 <__swsetup_r+0x3c>
 8006cc8:	686c      	ldr	r4, [r5, #4]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cd0:	0719      	lsls	r1, r3, #28
 8006cd2:	d42c      	bmi.n	8006d2e <__swsetup_r+0x82>
 8006cd4:	06dd      	lsls	r5, r3, #27
 8006cd6:	d411      	bmi.n	8006cfc <__swsetup_r+0x50>
 8006cd8:	2309      	movs	r3, #9
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	e03e      	b.n	8006d66 <__swsetup_r+0xba>
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <__swsetup_r+0xd4>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d101      	bne.n	8006cf2 <__swsetup_r+0x46>
 8006cee:	68ac      	ldr	r4, [r5, #8]
 8006cf0:	e7eb      	b.n	8006cca <__swsetup_r+0x1e>
 8006cf2:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <__swsetup_r+0xd8>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	bf08      	it	eq
 8006cf8:	68ec      	ldreq	r4, [r5, #12]
 8006cfa:	e7e6      	b.n	8006cca <__swsetup_r+0x1e>
 8006cfc:	0758      	lsls	r0, r3, #29
 8006cfe:	d512      	bpl.n	8006d26 <__swsetup_r+0x7a>
 8006d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d02:	b141      	cbz	r1, 8006d16 <__swsetup_r+0x6a>
 8006d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	d002      	beq.n	8006d12 <__swsetup_r+0x66>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f001 fc09 	bl	8008524 <_free_r>
 8006d12:	2300      	movs	r3, #0
 8006d14:	6363      	str	r3, [r4, #52]	; 0x34
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	b94b      	cbnz	r3, 8006d46 <__swsetup_r+0x9a>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3c:	d003      	beq.n	8006d46 <__swsetup_r+0x9a>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 ffff 	bl	8007d44 <__smakebuf_r>
 8006d46:	89a0      	ldrh	r0, [r4, #12]
 8006d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d4c:	f010 0301 	ands.w	r3, r0, #1
 8006d50:	d00a      	beq.n	8006d68 <__swsetup_r+0xbc>
 8006d52:	2300      	movs	r3, #0
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6963      	ldr	r3, [r4, #20]
 8006d58:	425b      	negs	r3, r3
 8006d5a:	61a3      	str	r3, [r4, #24]
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	b943      	cbnz	r3, 8006d72 <__swsetup_r+0xc6>
 8006d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d64:	d1ba      	bne.n	8006cdc <__swsetup_r+0x30>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	0781      	lsls	r1, r0, #30
 8006d6a:	bf58      	it	pl
 8006d6c:	6963      	ldrpl	r3, [r4, #20]
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	e7f4      	b.n	8006d5c <__swsetup_r+0xb0>
 8006d72:	2000      	movs	r0, #0
 8006d74:	e7f7      	b.n	8006d66 <__swsetup_r+0xba>
 8006d76:	bf00      	nop
 8006d78:	20000010 	.word	0x20000010
 8006d7c:	0801ccbc 	.word	0x0801ccbc
 8006d80:	0801ccdc 	.word	0x0801ccdc
 8006d84:	0801cc9c 	.word	0x0801cc9c

08006d88 <quorem>:
 8006d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	6903      	ldr	r3, [r0, #16]
 8006d8e:	690c      	ldr	r4, [r1, #16]
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	4607      	mov	r7, r0
 8006d94:	f2c0 8081 	blt.w	8006e9a <quorem+0x112>
 8006d98:	3c01      	subs	r4, #1
 8006d9a:	f101 0814 	add.w	r8, r1, #20
 8006d9e:	f100 0514 	add.w	r5, r0, #20
 8006da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006db0:	3301      	adds	r3, #1
 8006db2:	429a      	cmp	r2, r3
 8006db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dc0:	d331      	bcc.n	8006e26 <quorem+0x9e>
 8006dc2:	f04f 0e00 	mov.w	lr, #0
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	46ac      	mov	ip, r5
 8006dca:	46f2      	mov	sl, lr
 8006dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dd0:	b293      	uxth	r3, r2
 8006dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8006dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8006de0:	f8dc a000 	ldr.w	sl, [ip]
 8006de4:	0c12      	lsrs	r2, r2, #16
 8006de6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dea:	fb06 e202 	mla	r2, r6, r2, lr
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9b00      	ldr	r3, [sp, #0]
 8006df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006df6:	b292      	uxth	r2, r2
 8006df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e04:	4581      	cmp	r9, r0
 8006e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e12:	d2db      	bcs.n	8006dcc <quorem+0x44>
 8006e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e18:	b92b      	cbnz	r3, 8006e26 <quorem+0x9e>
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	d32e      	bcc.n	8006e82 <quorem+0xfa>
 8006e24:	613c      	str	r4, [r7, #16]
 8006e26:	4638      	mov	r0, r7
 8006e28:	f001 fa64 	bl	80082f4 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	db24      	blt.n	8006e7a <quorem+0xf2>
 8006e30:	3601      	adds	r6, #1
 8006e32:	4628      	mov	r0, r5
 8006e34:	f04f 0c00 	mov.w	ip, #0
 8006e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8006e40:	b293      	uxth	r3, r2
 8006e42:	ebac 0303 	sub.w	r3, ip, r3
 8006e46:	0c12      	lsrs	r2, r2, #16
 8006e48:	fa13 f38e 	uxtah	r3, r3, lr
 8006e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e5a:	45c1      	cmp	r9, r8
 8006e5c:	f840 3b04 	str.w	r3, [r0], #4
 8006e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e64:	d2e8      	bcs.n	8006e38 <quorem+0xb0>
 8006e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e6e:	b922      	cbnz	r2, 8006e7a <quorem+0xf2>
 8006e70:	3b04      	subs	r3, #4
 8006e72:	429d      	cmp	r5, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	d30a      	bcc.n	8006e8e <quorem+0x106>
 8006e78:	613c      	str	r4, [r7, #16]
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	b003      	add	sp, #12
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	d1cc      	bne.n	8006e24 <quorem+0x9c>
 8006e8a:	3c01      	subs	r4, #1
 8006e8c:	e7c7      	b.n	8006e1e <quorem+0x96>
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	d1f0      	bne.n	8006e78 <quorem+0xf0>
 8006e96:	3c01      	subs	r4, #1
 8006e98:	e7eb      	b.n	8006e72 <quorem+0xea>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e7ee      	b.n	8006e7c <quorem+0xf4>
	...

08006ea0 <_dtoa_r>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	ed2d 8b02 	vpush	{d8}
 8006ea8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006eaa:	b091      	sub	sp, #68	; 0x44
 8006eac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006eb0:	ec59 8b10 	vmov	r8, r9, d0
 8006eb4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006eb6:	9106      	str	r1, [sp, #24]
 8006eb8:	4606      	mov	r6, r0
 8006eba:	9208      	str	r2, [sp, #32]
 8006ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8006ebe:	b975      	cbnz	r5, 8006ede <_dtoa_r+0x3e>
 8006ec0:	2010      	movs	r0, #16
 8006ec2:	f000 ff7f 	bl	8007dc4 <malloc>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8006eca:	b920      	cbnz	r0, 8006ed6 <_dtoa_r+0x36>
 8006ecc:	4baa      	ldr	r3, [pc, #680]	; (8007178 <_dtoa_r+0x2d8>)
 8006ece:	21ea      	movs	r1, #234	; 0xea
 8006ed0:	48aa      	ldr	r0, [pc, #680]	; (800717c <_dtoa_r+0x2dc>)
 8006ed2:	f001 fdc7 	bl	8008a64 <__assert_func>
 8006ed6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eda:	6005      	str	r5, [r0, #0]
 8006edc:	60c5      	str	r5, [r0, #12]
 8006ede:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	b151      	cbz	r1, 8006efa <_dtoa_r+0x5a>
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	604a      	str	r2, [r1, #4]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4093      	lsls	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 ffbe 	bl	8007e70 <_Bfree>
 8006ef4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f1b9 0300 	subs.w	r3, r9, #0
 8006efe:	bfbb      	ittet	lt
 8006f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f04:	9303      	strlt	r3, [sp, #12]
 8006f06:	2300      	movge	r3, #0
 8006f08:	2201      	movlt	r2, #1
 8006f0a:	bfac      	ite	ge
 8006f0c:	6023      	strge	r3, [r4, #0]
 8006f0e:	6022      	strlt	r2, [r4, #0]
 8006f10:	4b9b      	ldr	r3, [pc, #620]	; (8007180 <_dtoa_r+0x2e0>)
 8006f12:	9c03      	ldr	r4, [sp, #12]
 8006f14:	43a3      	bics	r3, r4
 8006f16:	d11c      	bne.n	8006f52 <_dtoa_r+0xb2>
 8006f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006f24:	ea53 0308 	orrs.w	r3, r3, r8
 8006f28:	f000 84fd 	beq.w	8007926 <_dtoa_r+0xa86>
 8006f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f2e:	b963      	cbnz	r3, 8006f4a <_dtoa_r+0xaa>
 8006f30:	4b94      	ldr	r3, [pc, #592]	; (8007184 <_dtoa_r+0x2e4>)
 8006f32:	e01f      	b.n	8006f74 <_dtoa_r+0xd4>
 8006f34:	4b94      	ldr	r3, [pc, #592]	; (8007188 <_dtoa_r+0x2e8>)
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	9801      	ldr	r0, [sp, #4]
 8006f40:	b011      	add	sp, #68	; 0x44
 8006f42:	ecbd 8b02 	vpop	{d8}
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	4b8e      	ldr	r3, [pc, #568]	; (8007184 <_dtoa_r+0x2e4>)
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	3303      	adds	r3, #3
 8006f50:	e7f3      	b.n	8006f3a <_dtoa_r+0x9a>
 8006f52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006f56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5e:	d10b      	bne.n	8006f78 <_dtoa_r+0xd8>
 8006f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f62:	2301      	movs	r3, #1
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 84d9 	beq.w	8007920 <_dtoa_r+0xa80>
 8006f6e:	4887      	ldr	r0, [pc, #540]	; (800718c <_dtoa_r+0x2ec>)
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	1e43      	subs	r3, r0, #1
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	e7e2      	b.n	8006f3e <_dtoa_r+0x9e>
 8006f78:	a90f      	add	r1, sp, #60	; 0x3c
 8006f7a:	aa0e      	add	r2, sp, #56	; 0x38
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	eeb0 0b48 	vmov.f64	d0, d8
 8006f82:	f001 fa5d 	bl	8008440 <__d2b>
 8006f86:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d046      	beq.n	8007020 <_dtoa_r+0x180>
 8006f92:	ee18 4a90 	vmov	r4, s17
 8006f96:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f9a:	ec53 2b18 	vmov	r2, r3, d8
 8006f9e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006fa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fa6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006faa:	2400      	movs	r4, #0
 8006fac:	ec43 2b16 	vmov	d6, r2, r3
 8006fb0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006fb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007160 <_dtoa_r+0x2c0>
 8006fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fbc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007168 <_dtoa_r+0x2c8>
 8006fc0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006fc4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007170 <_dtoa_r+0x2d0>
 8006fc8:	ee07 1a90 	vmov	s15, r1
 8006fcc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006fd0:	eeb0 7b46 	vmov.f64	d7, d6
 8006fd4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006fd8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006fdc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe4:	ee16 ba90 	vmov	fp, s13
 8006fe8:	940a      	str	r4, [sp, #40]	; 0x28
 8006fea:	d508      	bpl.n	8006ffe <_dtoa_r+0x15e>
 8006fec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006ff0:	eeb4 6b47 	vcmp.f64	d6, d7
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	bf18      	it	ne
 8006ffa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006ffe:	f1bb 0f16 	cmp.w	fp, #22
 8007002:	d82f      	bhi.n	8007064 <_dtoa_r+0x1c4>
 8007004:	4b62      	ldr	r3, [pc, #392]	; (8007190 <_dtoa_r+0x2f0>)
 8007006:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800700a:	ed93 7b00 	vldr	d7, [r3]
 800700e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007016:	d501      	bpl.n	800701c <_dtoa_r+0x17c>
 8007018:	f10b 3bff 	add.w	fp, fp, #4294967295
 800701c:	2300      	movs	r3, #0
 800701e:	e022      	b.n	8007066 <_dtoa_r+0x1c6>
 8007020:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007022:	4401      	add	r1, r0
 8007024:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007028:	2b20      	cmp	r3, #32
 800702a:	bfc1      	itttt	gt
 800702c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007030:	fa04 f303 	lslgt.w	r3, r4, r3
 8007034:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007038:	fa28 f804 	lsrgt.w	r8, r8, r4
 800703c:	bfd6      	itet	le
 800703e:	f1c3 0320 	rsble	r3, r3, #32
 8007042:	ea43 0808 	orrgt.w	r8, r3, r8
 8007046:	fa08 f803 	lslle.w	r8, r8, r3
 800704a:	ee07 8a90 	vmov	s15, r8
 800704e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007052:	3901      	subs	r1, #1
 8007054:	ee17 4a90 	vmov	r4, s15
 8007058:	ec53 2b17 	vmov	r2, r3, d7
 800705c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007060:	2401      	movs	r4, #1
 8007062:	e7a3      	b.n	8006fac <_dtoa_r+0x10c>
 8007064:	2301      	movs	r3, #1
 8007066:	930b      	str	r3, [sp, #44]	; 0x2c
 8007068:	1a43      	subs	r3, r0, r1
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	bf45      	ittet	mi
 800706e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007072:	9304      	strmi	r3, [sp, #16]
 8007074:	2300      	movpl	r3, #0
 8007076:	2300      	movmi	r3, #0
 8007078:	9205      	str	r2, [sp, #20]
 800707a:	bf54      	ite	pl
 800707c:	9304      	strpl	r3, [sp, #16]
 800707e:	9305      	strmi	r3, [sp, #20]
 8007080:	f1bb 0f00 	cmp.w	fp, #0
 8007084:	db18      	blt.n	80070b8 <_dtoa_r+0x218>
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800708c:	445b      	add	r3, fp
 800708e:	9305      	str	r3, [sp, #20]
 8007090:	2300      	movs	r3, #0
 8007092:	9a06      	ldr	r2, [sp, #24]
 8007094:	2a09      	cmp	r2, #9
 8007096:	d849      	bhi.n	800712c <_dtoa_r+0x28c>
 8007098:	2a05      	cmp	r2, #5
 800709a:	bfc4      	itt	gt
 800709c:	3a04      	subgt	r2, #4
 800709e:	9206      	strgt	r2, [sp, #24]
 80070a0:	9a06      	ldr	r2, [sp, #24]
 80070a2:	f1a2 0202 	sub.w	r2, r2, #2
 80070a6:	bfcc      	ite	gt
 80070a8:	2400      	movgt	r4, #0
 80070aa:	2401      	movle	r4, #1
 80070ac:	2a03      	cmp	r2, #3
 80070ae:	d848      	bhi.n	8007142 <_dtoa_r+0x2a2>
 80070b0:	e8df f002 	tbb	[pc, r2]
 80070b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80070b8:	9b04      	ldr	r3, [sp, #16]
 80070ba:	2200      	movs	r2, #0
 80070bc:	eba3 030b 	sub.w	r3, r3, fp
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	f1cb 0300 	rsb	r3, fp, #0
 80070c8:	e7e3      	b.n	8007092 <_dtoa_r+0x1f2>
 80070ca:	2200      	movs	r2, #0
 80070cc:	9207      	str	r2, [sp, #28]
 80070ce:	9a08      	ldr	r2, [sp, #32]
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	dc39      	bgt.n	8007148 <_dtoa_r+0x2a8>
 80070d4:	f04f 0a01 	mov.w	sl, #1
 80070d8:	46d1      	mov	r9, sl
 80070da:	4652      	mov	r2, sl
 80070dc:	f8cd a020 	str.w	sl, [sp, #32]
 80070e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80070e2:	2100      	movs	r1, #0
 80070e4:	6079      	str	r1, [r7, #4]
 80070e6:	2004      	movs	r0, #4
 80070e8:	f100 0c14 	add.w	ip, r0, #20
 80070ec:	4594      	cmp	ip, r2
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	d92f      	bls.n	8007152 <_dtoa_r+0x2b2>
 80070f2:	4630      	mov	r0, r6
 80070f4:	930d      	str	r3, [sp, #52]	; 0x34
 80070f6:	f000 fe7b 	bl	8007df0 <_Balloc>
 80070fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070fc:	9001      	str	r0, [sp, #4]
 80070fe:	4602      	mov	r2, r0
 8007100:	2800      	cmp	r0, #0
 8007102:	d149      	bne.n	8007198 <_dtoa_r+0x2f8>
 8007104:	4b23      	ldr	r3, [pc, #140]	; (8007194 <_dtoa_r+0x2f4>)
 8007106:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800710a:	e6e1      	b.n	8006ed0 <_dtoa_r+0x30>
 800710c:	2201      	movs	r2, #1
 800710e:	e7dd      	b.n	80070cc <_dtoa_r+0x22c>
 8007110:	2200      	movs	r2, #0
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	9a08      	ldr	r2, [sp, #32]
 8007116:	eb0b 0a02 	add.w	sl, fp, r2
 800711a:	f10a 0901 	add.w	r9, sl, #1
 800711e:	464a      	mov	r2, r9
 8007120:	2a01      	cmp	r2, #1
 8007122:	bfb8      	it	lt
 8007124:	2201      	movlt	r2, #1
 8007126:	e7db      	b.n	80070e0 <_dtoa_r+0x240>
 8007128:	2201      	movs	r2, #1
 800712a:	e7f2      	b.n	8007112 <_dtoa_r+0x272>
 800712c:	2401      	movs	r4, #1
 800712e:	2200      	movs	r2, #0
 8007130:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007134:	f04f 3aff 	mov.w	sl, #4294967295
 8007138:	2100      	movs	r1, #0
 800713a:	46d1      	mov	r9, sl
 800713c:	2212      	movs	r2, #18
 800713e:	9108      	str	r1, [sp, #32]
 8007140:	e7ce      	b.n	80070e0 <_dtoa_r+0x240>
 8007142:	2201      	movs	r2, #1
 8007144:	9207      	str	r2, [sp, #28]
 8007146:	e7f5      	b.n	8007134 <_dtoa_r+0x294>
 8007148:	f8dd a020 	ldr.w	sl, [sp, #32]
 800714c:	46d1      	mov	r9, sl
 800714e:	4652      	mov	r2, sl
 8007150:	e7c6      	b.n	80070e0 <_dtoa_r+0x240>
 8007152:	3101      	adds	r1, #1
 8007154:	6079      	str	r1, [r7, #4]
 8007156:	0040      	lsls	r0, r0, #1
 8007158:	e7c6      	b.n	80070e8 <_dtoa_r+0x248>
 800715a:	bf00      	nop
 800715c:	f3af 8000 	nop.w
 8007160:	636f4361 	.word	0x636f4361
 8007164:	3fd287a7 	.word	0x3fd287a7
 8007168:	8b60c8b3 	.word	0x8b60c8b3
 800716c:	3fc68a28 	.word	0x3fc68a28
 8007170:	509f79fb 	.word	0x509f79fb
 8007174:	3fd34413 	.word	0x3fd34413
 8007178:	0801cc19 	.word	0x0801cc19
 800717c:	0801cc30 	.word	0x0801cc30
 8007180:	7ff00000 	.word	0x7ff00000
 8007184:	0801cc15 	.word	0x0801cc15
 8007188:	0801cc0c 	.word	0x0801cc0c
 800718c:	0801cbe9 	.word	0x0801cbe9
 8007190:	0801cd80 	.word	0x0801cd80
 8007194:	0801cc8b 	.word	0x0801cc8b
 8007198:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	6011      	str	r1, [r2, #0]
 800719e:	f1b9 0f0e 	cmp.w	r9, #14
 80071a2:	d86c      	bhi.n	800727e <_dtoa_r+0x3de>
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d06a      	beq.n	800727e <_dtoa_r+0x3de>
 80071a8:	f1bb 0f00 	cmp.w	fp, #0
 80071ac:	f340 80a0 	ble.w	80072f0 <_dtoa_r+0x450>
 80071b0:	49c1      	ldr	r1, [pc, #772]	; (80074b8 <_dtoa_r+0x618>)
 80071b2:	f00b 020f 	and.w	r2, fp, #15
 80071b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80071ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071be:	ed92 7b00 	vldr	d7, [r2]
 80071c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80071c6:	f000 8087 	beq.w	80072d8 <_dtoa_r+0x438>
 80071ca:	4abc      	ldr	r2, [pc, #752]	; (80074bc <_dtoa_r+0x61c>)
 80071cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80071d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80071d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071d8:	f001 010f 	and.w	r1, r1, #15
 80071dc:	2203      	movs	r2, #3
 80071de:	48b7      	ldr	r0, [pc, #732]	; (80074bc <_dtoa_r+0x61c>)
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d17b      	bne.n	80072dc <_dtoa_r+0x43c>
 80071e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f2:	2900      	cmp	r1, #0
 80071f4:	f000 80a2 	beq.w	800733c <_dtoa_r+0x49c>
 80071f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80071fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007200:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007208:	f140 8098 	bpl.w	800733c <_dtoa_r+0x49c>
 800720c:	f1b9 0f00 	cmp.w	r9, #0
 8007210:	f000 8094 	beq.w	800733c <_dtoa_r+0x49c>
 8007214:	f1ba 0f00 	cmp.w	sl, #0
 8007218:	dd2f      	ble.n	800727a <_dtoa_r+0x3da>
 800721a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800721e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007222:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007226:	f10b 37ff 	add.w	r7, fp, #4294967295
 800722a:	3201      	adds	r2, #1
 800722c:	4650      	mov	r0, sl
 800722e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007232:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007236:	ee07 2a90 	vmov	s15, r2
 800723a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800723e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007242:	ee15 4a90 	vmov	r4, s11
 8007246:	ec52 1b15 	vmov	r1, r2, d5
 800724a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800724e:	2800      	cmp	r0, #0
 8007250:	d177      	bne.n	8007342 <_dtoa_r+0x4a2>
 8007252:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007256:	ee36 6b47 	vsub.f64	d6, d6, d7
 800725a:	ec42 1b17 	vmov	d7, r1, r2
 800725e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	f300 8263 	bgt.w	8007730 <_dtoa_r+0x890>
 800726a:	eeb1 7b47 	vneg.f64	d7, d7
 800726e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007276:	f100 8258 	bmi.w	800772a <_dtoa_r+0x88a>
 800727a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800727e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007280:	2a00      	cmp	r2, #0
 8007282:	f2c0 811d 	blt.w	80074c0 <_dtoa_r+0x620>
 8007286:	f1bb 0f0e 	cmp.w	fp, #14
 800728a:	f300 8119 	bgt.w	80074c0 <_dtoa_r+0x620>
 800728e:	4b8a      	ldr	r3, [pc, #552]	; (80074b8 <_dtoa_r+0x618>)
 8007290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007294:	ed93 6b00 	vldr	d6, [r3]
 8007298:	9b08      	ldr	r3, [sp, #32]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f280 80b7 	bge.w	800740e <_dtoa_r+0x56e>
 80072a0:	f1b9 0f00 	cmp.w	r9, #0
 80072a4:	f300 80b3 	bgt.w	800740e <_dtoa_r+0x56e>
 80072a8:	f040 823f 	bne.w	800772a <_dtoa_r+0x88a>
 80072ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80072b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c0:	464c      	mov	r4, r9
 80072c2:	464f      	mov	r7, r9
 80072c4:	f280 8215 	bge.w	80076f2 <_dtoa_r+0x852>
 80072c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072cc:	2331      	movs	r3, #49	; 0x31
 80072ce:	f808 3b01 	strb.w	r3, [r8], #1
 80072d2:	f10b 0b01 	add.w	fp, fp, #1
 80072d6:	e211      	b.n	80076fc <_dtoa_r+0x85c>
 80072d8:	2202      	movs	r2, #2
 80072da:	e780      	b.n	80071de <_dtoa_r+0x33e>
 80072dc:	07cc      	lsls	r4, r1, #31
 80072de:	d504      	bpl.n	80072ea <_dtoa_r+0x44a>
 80072e0:	ed90 6b00 	vldr	d6, [r0]
 80072e4:	3201      	adds	r2, #1
 80072e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072ea:	1049      	asrs	r1, r1, #1
 80072ec:	3008      	adds	r0, #8
 80072ee:	e777      	b.n	80071e0 <_dtoa_r+0x340>
 80072f0:	d022      	beq.n	8007338 <_dtoa_r+0x498>
 80072f2:	f1cb 0100 	rsb	r1, fp, #0
 80072f6:	4a70      	ldr	r2, [pc, #448]	; (80074b8 <_dtoa_r+0x618>)
 80072f8:	f001 000f 	and.w	r0, r1, #15
 80072fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007300:	ed92 7b00 	vldr	d7, [r2]
 8007304:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007308:	ed8d 7b02 	vstr	d7, [sp, #8]
 800730c:	486b      	ldr	r0, [pc, #428]	; (80074bc <_dtoa_r+0x61c>)
 800730e:	1109      	asrs	r1, r1, #4
 8007310:	2400      	movs	r4, #0
 8007312:	2202      	movs	r2, #2
 8007314:	b929      	cbnz	r1, 8007322 <_dtoa_r+0x482>
 8007316:	2c00      	cmp	r4, #0
 8007318:	f43f af6a 	beq.w	80071f0 <_dtoa_r+0x350>
 800731c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007320:	e766      	b.n	80071f0 <_dtoa_r+0x350>
 8007322:	07cf      	lsls	r7, r1, #31
 8007324:	d505      	bpl.n	8007332 <_dtoa_r+0x492>
 8007326:	ed90 6b00 	vldr	d6, [r0]
 800732a:	3201      	adds	r2, #1
 800732c:	2401      	movs	r4, #1
 800732e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007332:	1049      	asrs	r1, r1, #1
 8007334:	3008      	adds	r0, #8
 8007336:	e7ed      	b.n	8007314 <_dtoa_r+0x474>
 8007338:	2202      	movs	r2, #2
 800733a:	e759      	b.n	80071f0 <_dtoa_r+0x350>
 800733c:	465f      	mov	r7, fp
 800733e:	4648      	mov	r0, r9
 8007340:	e775      	b.n	800722e <_dtoa_r+0x38e>
 8007342:	ec42 1b17 	vmov	d7, r1, r2
 8007346:	4a5c      	ldr	r2, [pc, #368]	; (80074b8 <_dtoa_r+0x618>)
 8007348:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800734c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	1814      	adds	r4, r2, r0
 8007354:	9a07      	ldr	r2, [sp, #28]
 8007356:	b352      	cbz	r2, 80073ae <_dtoa_r+0x50e>
 8007358:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800735c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007360:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007364:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007368:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800736c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007370:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007374:	ee14 2a90 	vmov	r2, s9
 8007378:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800737c:	3230      	adds	r2, #48	; 0x30
 800737e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738a:	f808 2b01 	strb.w	r2, [r8], #1
 800738e:	d439      	bmi.n	8007404 <_dtoa_r+0x564>
 8007390:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007394:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d472      	bmi.n	8007484 <_dtoa_r+0x5e4>
 800739e:	45a0      	cmp	r8, r4
 80073a0:	f43f af6b 	beq.w	800727a <_dtoa_r+0x3da>
 80073a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80073a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073ac:	e7e0      	b.n	8007370 <_dtoa_r+0x4d0>
 80073ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073b6:	4621      	mov	r1, r4
 80073b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80073bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073c0:	ee14 2a90 	vmov	r2, s9
 80073c4:	3230      	adds	r2, #48	; 0x30
 80073c6:	f808 2b01 	strb.w	r2, [r8], #1
 80073ca:	45a0      	cmp	r8, r4
 80073cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073d4:	d118      	bne.n	8007408 <_dtoa_r+0x568>
 80073d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80073da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80073de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80073e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e6:	dc4d      	bgt.n	8007484 <_dtoa_r+0x5e4>
 80073e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	f57f af41 	bpl.w	800727a <_dtoa_r+0x3da>
 80073f8:	4688      	mov	r8, r1
 80073fa:	3901      	subs	r1, #1
 80073fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007400:	2b30      	cmp	r3, #48	; 0x30
 8007402:	d0f9      	beq.n	80073f8 <_dtoa_r+0x558>
 8007404:	46bb      	mov	fp, r7
 8007406:	e02a      	b.n	800745e <_dtoa_r+0x5be>
 8007408:	ee26 6b03 	vmul.f64	d6, d6, d3
 800740c:	e7d6      	b.n	80073bc <_dtoa_r+0x51c>
 800740e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007412:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007416:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800741a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800741e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007422:	ee15 3a10 	vmov	r3, s10
 8007426:	3330      	adds	r3, #48	; 0x30
 8007428:	f808 3b01 	strb.w	r3, [r8], #1
 800742c:	9b01      	ldr	r3, [sp, #4]
 800742e:	eba8 0303 	sub.w	r3, r8, r3
 8007432:	4599      	cmp	r9, r3
 8007434:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007438:	eea3 7b46 	vfms.f64	d7, d3, d6
 800743c:	d133      	bne.n	80074a6 <_dtoa_r+0x606>
 800743e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007442:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744a:	dc1a      	bgt.n	8007482 <_dtoa_r+0x5e2>
 800744c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007454:	d103      	bne.n	800745e <_dtoa_r+0x5be>
 8007456:	ee15 3a10 	vmov	r3, s10
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d411      	bmi.n	8007482 <_dtoa_r+0x5e2>
 800745e:	4629      	mov	r1, r5
 8007460:	4630      	mov	r0, r6
 8007462:	f000 fd05 	bl	8007e70 <_Bfree>
 8007466:	2300      	movs	r3, #0
 8007468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800746a:	f888 3000 	strb.w	r3, [r8]
 800746e:	f10b 0301 	add.w	r3, fp, #1
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007476:	2b00      	cmp	r3, #0
 8007478:	f43f ad61 	beq.w	8006f3e <_dtoa_r+0x9e>
 800747c:	f8c3 8000 	str.w	r8, [r3]
 8007480:	e55d      	b.n	8006f3e <_dtoa_r+0x9e>
 8007482:	465f      	mov	r7, fp
 8007484:	4643      	mov	r3, r8
 8007486:	4698      	mov	r8, r3
 8007488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800748c:	2a39      	cmp	r2, #57	; 0x39
 800748e:	d106      	bne.n	800749e <_dtoa_r+0x5fe>
 8007490:	9a01      	ldr	r2, [sp, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d1f7      	bne.n	8007486 <_dtoa_r+0x5e6>
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	2230      	movs	r2, #48	; 0x30
 800749a:	3701      	adds	r7, #1
 800749c:	700a      	strb	r2, [r1, #0]
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	3201      	adds	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	e7ae      	b.n	8007404 <_dtoa_r+0x564>
 80074a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	d1b2      	bne.n	800741a <_dtoa_r+0x57a>
 80074b4:	e7d3      	b.n	800745e <_dtoa_r+0x5be>
 80074b6:	bf00      	nop
 80074b8:	0801cd80 	.word	0x0801cd80
 80074bc:	0801cd58 	.word	0x0801cd58
 80074c0:	9907      	ldr	r1, [sp, #28]
 80074c2:	2900      	cmp	r1, #0
 80074c4:	f000 80d0 	beq.w	8007668 <_dtoa_r+0x7c8>
 80074c8:	9906      	ldr	r1, [sp, #24]
 80074ca:	2901      	cmp	r1, #1
 80074cc:	f300 80b4 	bgt.w	8007638 <_dtoa_r+0x798>
 80074d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074d2:	2900      	cmp	r1, #0
 80074d4:	f000 80ac 	beq.w	8007630 <_dtoa_r+0x790>
 80074d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80074e0:	461c      	mov	r4, r3
 80074e2:	930a      	str	r3, [sp, #40]	; 0x28
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	4413      	add	r3, r2
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	9b05      	ldr	r3, [sp, #20]
 80074ec:	2101      	movs	r1, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	4630      	mov	r0, r6
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	f000 fd74 	bl	8007fe0 <__i2b>
 80074f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fa:	4607      	mov	r7, r0
 80074fc:	f1b8 0f00 	cmp.w	r8, #0
 8007500:	dd0d      	ble.n	800751e <_dtoa_r+0x67e>
 8007502:	9a05      	ldr	r2, [sp, #20]
 8007504:	2a00      	cmp	r2, #0
 8007506:	dd0a      	ble.n	800751e <_dtoa_r+0x67e>
 8007508:	4542      	cmp	r2, r8
 800750a:	9904      	ldr	r1, [sp, #16]
 800750c:	bfa8      	it	ge
 800750e:	4642      	movge	r2, r8
 8007510:	1a89      	subs	r1, r1, r2
 8007512:	9104      	str	r1, [sp, #16]
 8007514:	9905      	ldr	r1, [sp, #20]
 8007516:	eba8 0802 	sub.w	r8, r8, r2
 800751a:	1a8a      	subs	r2, r1, r2
 800751c:	9205      	str	r2, [sp, #20]
 800751e:	b303      	cbz	r3, 8007562 <_dtoa_r+0x6c2>
 8007520:	9a07      	ldr	r2, [sp, #28]
 8007522:	2a00      	cmp	r2, #0
 8007524:	f000 80a5 	beq.w	8007672 <_dtoa_r+0x7d2>
 8007528:	2c00      	cmp	r4, #0
 800752a:	dd13      	ble.n	8007554 <_dtoa_r+0x6b4>
 800752c:	4639      	mov	r1, r7
 800752e:	4622      	mov	r2, r4
 8007530:	4630      	mov	r0, r6
 8007532:	930d      	str	r3, [sp, #52]	; 0x34
 8007534:	f000 fe14 	bl	8008160 <__pow5mult>
 8007538:	462a      	mov	r2, r5
 800753a:	4601      	mov	r1, r0
 800753c:	4607      	mov	r7, r0
 800753e:	4630      	mov	r0, r6
 8007540:	f000 fd64 	bl	800800c <__multiply>
 8007544:	4629      	mov	r1, r5
 8007546:	900a      	str	r0, [sp, #40]	; 0x28
 8007548:	4630      	mov	r0, r6
 800754a:	f000 fc91 	bl	8007e70 <_Bfree>
 800754e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007552:	4615      	mov	r5, r2
 8007554:	1b1a      	subs	r2, r3, r4
 8007556:	d004      	beq.n	8007562 <_dtoa_r+0x6c2>
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 fe00 	bl	8008160 <__pow5mult>
 8007560:	4605      	mov	r5, r0
 8007562:	2101      	movs	r1, #1
 8007564:	4630      	mov	r0, r6
 8007566:	f000 fd3b 	bl	8007fe0 <__i2b>
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	f340 8081 	ble.w	8007676 <_dtoa_r+0x7d6>
 8007574:	461a      	mov	r2, r3
 8007576:	4601      	mov	r1, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f000 fdf1 	bl	8008160 <__pow5mult>
 800757e:	9b06      	ldr	r3, [sp, #24]
 8007580:	2b01      	cmp	r3, #1
 8007582:	4604      	mov	r4, r0
 8007584:	dd7a      	ble.n	800767c <_dtoa_r+0x7dc>
 8007586:	2300      	movs	r3, #0
 8007588:	930a      	str	r3, [sp, #40]	; 0x28
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007590:	6910      	ldr	r0, [r2, #16]
 8007592:	f000 fcd5 	bl	8007f40 <__hi0bits>
 8007596:	f1c0 0020 	rsb	r0, r0, #32
 800759a:	9b05      	ldr	r3, [sp, #20]
 800759c:	4418      	add	r0, r3
 800759e:	f010 001f 	ands.w	r0, r0, #31
 80075a2:	f000 808c 	beq.w	80076be <_dtoa_r+0x81e>
 80075a6:	f1c0 0220 	rsb	r2, r0, #32
 80075aa:	2a04      	cmp	r2, #4
 80075ac:	f340 8085 	ble.w	80076ba <_dtoa_r+0x81a>
 80075b0:	f1c0 001c 	rsb	r0, r0, #28
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	4403      	add	r3, r0
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	4403      	add	r3, r0
 80075be:	4480      	add	r8, r0
 80075c0:	9305      	str	r3, [sp, #20]
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd05      	ble.n	80075d4 <_dtoa_r+0x734>
 80075c8:	4629      	mov	r1, r5
 80075ca:	461a      	mov	r2, r3
 80075cc:	4630      	mov	r0, r6
 80075ce:	f000 fe21 	bl	8008214 <__lshift>
 80075d2:	4605      	mov	r5, r0
 80075d4:	9b05      	ldr	r3, [sp, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dd05      	ble.n	80075e6 <_dtoa_r+0x746>
 80075da:	4621      	mov	r1, r4
 80075dc:	461a      	mov	r2, r3
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 fe18 	bl	8008214 <__lshift>
 80075e4:	4604      	mov	r4, r0
 80075e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d06a      	beq.n	80076c2 <_dtoa_r+0x822>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 fe80 	bl	80082f4 <__mcmp>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	da64      	bge.n	80076c2 <_dtoa_r+0x822>
 80075f8:	2300      	movs	r3, #0
 80075fa:	4629      	mov	r1, r5
 80075fc:	220a      	movs	r2, #10
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 fc58 	bl	8007eb4 <__multadd>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	f10b 3bff 	add.w	fp, fp, #4294967295
 800760a:	4605      	mov	r5, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8191 	beq.w	8007934 <_dtoa_r+0xa94>
 8007612:	4639      	mov	r1, r7
 8007614:	2300      	movs	r3, #0
 8007616:	220a      	movs	r2, #10
 8007618:	4630      	mov	r0, r6
 800761a:	f000 fc4b 	bl	8007eb4 <__multadd>
 800761e:	f1ba 0f00 	cmp.w	sl, #0
 8007622:	4607      	mov	r7, r0
 8007624:	f300 808d 	bgt.w	8007742 <_dtoa_r+0x8a2>
 8007628:	9b06      	ldr	r3, [sp, #24]
 800762a:	2b02      	cmp	r3, #2
 800762c:	dc50      	bgt.n	80076d0 <_dtoa_r+0x830>
 800762e:	e088      	b.n	8007742 <_dtoa_r+0x8a2>
 8007630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007632:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007636:	e751      	b.n	80074dc <_dtoa_r+0x63c>
 8007638:	f109 34ff 	add.w	r4, r9, #4294967295
 800763c:	42a3      	cmp	r3, r4
 800763e:	bfbf      	itttt	lt
 8007640:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007642:	1ae3      	sublt	r3, r4, r3
 8007644:	18d2      	addlt	r2, r2, r3
 8007646:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007648:	bfb6      	itet	lt
 800764a:	4623      	movlt	r3, r4
 800764c:	1b1c      	subge	r4, r3, r4
 800764e:	2400      	movlt	r4, #0
 8007650:	f1b9 0f00 	cmp.w	r9, #0
 8007654:	bfb5      	itete	lt
 8007656:	9a04      	ldrlt	r2, [sp, #16]
 8007658:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800765c:	eba2 0809 	sublt.w	r8, r2, r9
 8007660:	464a      	movge	r2, r9
 8007662:	bfb8      	it	lt
 8007664:	2200      	movlt	r2, #0
 8007666:	e73c      	b.n	80074e2 <_dtoa_r+0x642>
 8007668:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800766c:	9f07      	ldr	r7, [sp, #28]
 800766e:	461c      	mov	r4, r3
 8007670:	e744      	b.n	80074fc <_dtoa_r+0x65c>
 8007672:	461a      	mov	r2, r3
 8007674:	e770      	b.n	8007558 <_dtoa_r+0x6b8>
 8007676:	9b06      	ldr	r3, [sp, #24]
 8007678:	2b01      	cmp	r3, #1
 800767a:	dc18      	bgt.n	80076ae <_dtoa_r+0x80e>
 800767c:	9b02      	ldr	r3, [sp, #8]
 800767e:	b9b3      	cbnz	r3, 80076ae <_dtoa_r+0x80e>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007686:	b9a2      	cbnz	r2, 80076b2 <_dtoa_r+0x812>
 8007688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800768c:	0d12      	lsrs	r2, r2, #20
 800768e:	0512      	lsls	r2, r2, #20
 8007690:	b18a      	cbz	r2, 80076b6 <_dtoa_r+0x816>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	9b05      	ldr	r3, [sp, #20]
 800769a:	3301      	adds	r3, #1
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	2301      	movs	r3, #1
 80076a0:	930a      	str	r3, [sp, #40]	; 0x28
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f47f af70 	bne.w	800758a <_dtoa_r+0x6ea>
 80076aa:	2001      	movs	r0, #1
 80076ac:	e775      	b.n	800759a <_dtoa_r+0x6fa>
 80076ae:	2300      	movs	r3, #0
 80076b0:	e7f6      	b.n	80076a0 <_dtoa_r+0x800>
 80076b2:	9b02      	ldr	r3, [sp, #8]
 80076b4:	e7f4      	b.n	80076a0 <_dtoa_r+0x800>
 80076b6:	920a      	str	r2, [sp, #40]	; 0x28
 80076b8:	e7f3      	b.n	80076a2 <_dtoa_r+0x802>
 80076ba:	d082      	beq.n	80075c2 <_dtoa_r+0x722>
 80076bc:	4610      	mov	r0, r2
 80076be:	301c      	adds	r0, #28
 80076c0:	e778      	b.n	80075b4 <_dtoa_r+0x714>
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	dc37      	bgt.n	8007738 <_dtoa_r+0x898>
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	dd34      	ble.n	8007738 <_dtoa_r+0x898>
 80076ce:	46ca      	mov	sl, r9
 80076d0:	f1ba 0f00 	cmp.w	sl, #0
 80076d4:	d10d      	bne.n	80076f2 <_dtoa_r+0x852>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4653      	mov	r3, sl
 80076da:	2205      	movs	r2, #5
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 fbe9 	bl	8007eb4 <__multadd>
 80076e2:	4601      	mov	r1, r0
 80076e4:	4604      	mov	r4, r0
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 fe04 	bl	80082f4 <__mcmp>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f73f adeb 	bgt.w	80072c8 <_dtoa_r+0x428>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076f8:	ea6f 0b03 	mvn.w	fp, r3
 80076fc:	f04f 0900 	mov.w	r9, #0
 8007700:	4621      	mov	r1, r4
 8007702:	4630      	mov	r0, r6
 8007704:	f000 fbb4 	bl	8007e70 <_Bfree>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f43f aea8 	beq.w	800745e <_dtoa_r+0x5be>
 800770e:	f1b9 0f00 	cmp.w	r9, #0
 8007712:	d005      	beq.n	8007720 <_dtoa_r+0x880>
 8007714:	45b9      	cmp	r9, r7
 8007716:	d003      	beq.n	8007720 <_dtoa_r+0x880>
 8007718:	4649      	mov	r1, r9
 800771a:	4630      	mov	r0, r6
 800771c:	f000 fba8 	bl	8007e70 <_Bfree>
 8007720:	4639      	mov	r1, r7
 8007722:	4630      	mov	r0, r6
 8007724:	f000 fba4 	bl	8007e70 <_Bfree>
 8007728:	e699      	b.n	800745e <_dtoa_r+0x5be>
 800772a:	2400      	movs	r4, #0
 800772c:	4627      	mov	r7, r4
 800772e:	e7e0      	b.n	80076f2 <_dtoa_r+0x852>
 8007730:	46bb      	mov	fp, r7
 8007732:	4604      	mov	r4, r0
 8007734:	4607      	mov	r7, r0
 8007736:	e5c7      	b.n	80072c8 <_dtoa_r+0x428>
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	46ca      	mov	sl, r9
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8100 	beq.w	8007942 <_dtoa_r+0xaa2>
 8007742:	f1b8 0f00 	cmp.w	r8, #0
 8007746:	dd05      	ble.n	8007754 <_dtoa_r+0x8b4>
 8007748:	4639      	mov	r1, r7
 800774a:	4642      	mov	r2, r8
 800774c:	4630      	mov	r0, r6
 800774e:	f000 fd61 	bl	8008214 <__lshift>
 8007752:	4607      	mov	r7, r0
 8007754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d05d      	beq.n	8007816 <_dtoa_r+0x976>
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	4630      	mov	r0, r6
 800775e:	f000 fb47 	bl	8007df0 <_Balloc>
 8007762:	4680      	mov	r8, r0
 8007764:	b928      	cbnz	r0, 8007772 <_dtoa_r+0x8d2>
 8007766:	4b82      	ldr	r3, [pc, #520]	; (8007970 <_dtoa_r+0xad0>)
 8007768:	4602      	mov	r2, r0
 800776a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800776e:	f7ff bbaf 	b.w	8006ed0 <_dtoa_r+0x30>
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	3202      	adds	r2, #2
 8007776:	0092      	lsls	r2, r2, #2
 8007778:	f107 010c 	add.w	r1, r7, #12
 800777c:	300c      	adds	r0, #12
 800777e:	f000 fb29 	bl	8007dd4 <memcpy>
 8007782:	2201      	movs	r2, #1
 8007784:	4641      	mov	r1, r8
 8007786:	4630      	mov	r0, r6
 8007788:	f000 fd44 	bl	8008214 <__lshift>
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	3301      	adds	r3, #1
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	4453      	add	r3, sl
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	46b9      	mov	r9, r7
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	4607      	mov	r7, r0
 80077a4:	9b04      	ldr	r3, [sp, #16]
 80077a6:	4621      	mov	r1, r4
 80077a8:	3b01      	subs	r3, #1
 80077aa:	4628      	mov	r0, r5
 80077ac:	9302      	str	r3, [sp, #8]
 80077ae:	f7ff faeb 	bl	8006d88 <quorem>
 80077b2:	4603      	mov	r3, r0
 80077b4:	3330      	adds	r3, #48	; 0x30
 80077b6:	9005      	str	r0, [sp, #20]
 80077b8:	4649      	mov	r1, r9
 80077ba:	4628      	mov	r0, r5
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	f000 fd99 	bl	80082f4 <__mcmp>
 80077c2:	463a      	mov	r2, r7
 80077c4:	4682      	mov	sl, r0
 80077c6:	4621      	mov	r1, r4
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 fdaf 	bl	800832c <__mdiff>
 80077ce:	68c2      	ldr	r2, [r0, #12]
 80077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d2:	4680      	mov	r8, r0
 80077d4:	bb0a      	cbnz	r2, 800781a <_dtoa_r+0x97a>
 80077d6:	4601      	mov	r1, r0
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fd8b 	bl	80082f4 <__mcmp>
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	4602      	mov	r2, r0
 80077e2:	4641      	mov	r1, r8
 80077e4:	4630      	mov	r0, r6
 80077e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80077ea:	f000 fb41 	bl	8007e70 <_Bfree>
 80077ee:	9b06      	ldr	r3, [sp, #24]
 80077f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80077f6:	ea43 0102 	orr.w	r1, r3, r2
 80077fa:	9b07      	ldr	r3, [sp, #28]
 80077fc:	430b      	orrs	r3, r1
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	d10d      	bne.n	800781e <_dtoa_r+0x97e>
 8007802:	2b39      	cmp	r3, #57	; 0x39
 8007804:	d029      	beq.n	800785a <_dtoa_r+0x9ba>
 8007806:	f1ba 0f00 	cmp.w	sl, #0
 800780a:	dd01      	ble.n	8007810 <_dtoa_r+0x970>
 800780c:	9b05      	ldr	r3, [sp, #20]
 800780e:	3331      	adds	r3, #49	; 0x31
 8007810:	9a02      	ldr	r2, [sp, #8]
 8007812:	7013      	strb	r3, [r2, #0]
 8007814:	e774      	b.n	8007700 <_dtoa_r+0x860>
 8007816:	4638      	mov	r0, r7
 8007818:	e7b8      	b.n	800778c <_dtoa_r+0x8ec>
 800781a:	2201      	movs	r2, #1
 800781c:	e7e1      	b.n	80077e2 <_dtoa_r+0x942>
 800781e:	f1ba 0f00 	cmp.w	sl, #0
 8007822:	db06      	blt.n	8007832 <_dtoa_r+0x992>
 8007824:	9906      	ldr	r1, [sp, #24]
 8007826:	ea41 0a0a 	orr.w	sl, r1, sl
 800782a:	9907      	ldr	r1, [sp, #28]
 800782c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007830:	d120      	bne.n	8007874 <_dtoa_r+0x9d4>
 8007832:	2a00      	cmp	r2, #0
 8007834:	ddec      	ble.n	8007810 <_dtoa_r+0x970>
 8007836:	4629      	mov	r1, r5
 8007838:	2201      	movs	r2, #1
 800783a:	4630      	mov	r0, r6
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	f000 fce9 	bl	8008214 <__lshift>
 8007842:	4621      	mov	r1, r4
 8007844:	4605      	mov	r5, r0
 8007846:	f000 fd55 	bl	80082f4 <__mcmp>
 800784a:	2800      	cmp	r0, #0
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	dc02      	bgt.n	8007856 <_dtoa_r+0x9b6>
 8007850:	d1de      	bne.n	8007810 <_dtoa_r+0x970>
 8007852:	07da      	lsls	r2, r3, #31
 8007854:	d5dc      	bpl.n	8007810 <_dtoa_r+0x970>
 8007856:	2b39      	cmp	r3, #57	; 0x39
 8007858:	d1d8      	bne.n	800780c <_dtoa_r+0x96c>
 800785a:	9a02      	ldr	r2, [sp, #8]
 800785c:	2339      	movs	r3, #57	; 0x39
 800785e:	7013      	strb	r3, [r2, #0]
 8007860:	4643      	mov	r3, r8
 8007862:	4698      	mov	r8, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800786a:	2a39      	cmp	r2, #57	; 0x39
 800786c:	d051      	beq.n	8007912 <_dtoa_r+0xa72>
 800786e:	3201      	adds	r2, #1
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	e745      	b.n	8007700 <_dtoa_r+0x860>
 8007874:	2a00      	cmp	r2, #0
 8007876:	dd03      	ble.n	8007880 <_dtoa_r+0x9e0>
 8007878:	2b39      	cmp	r3, #57	; 0x39
 800787a:	d0ee      	beq.n	800785a <_dtoa_r+0x9ba>
 800787c:	3301      	adds	r3, #1
 800787e:	e7c7      	b.n	8007810 <_dtoa_r+0x970>
 8007880:	9a04      	ldr	r2, [sp, #16]
 8007882:	9908      	ldr	r1, [sp, #32]
 8007884:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007888:	428a      	cmp	r2, r1
 800788a:	d02b      	beq.n	80078e4 <_dtoa_r+0xa44>
 800788c:	4629      	mov	r1, r5
 800788e:	2300      	movs	r3, #0
 8007890:	220a      	movs	r2, #10
 8007892:	4630      	mov	r0, r6
 8007894:	f000 fb0e 	bl	8007eb4 <__multadd>
 8007898:	45b9      	cmp	r9, r7
 800789a:	4605      	mov	r5, r0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	f04f 020a 	mov.w	r2, #10
 80078a4:	4649      	mov	r1, r9
 80078a6:	4630      	mov	r0, r6
 80078a8:	d107      	bne.n	80078ba <_dtoa_r+0xa1a>
 80078aa:	f000 fb03 	bl	8007eb4 <__multadd>
 80078ae:	4681      	mov	r9, r0
 80078b0:	4607      	mov	r7, r0
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	3301      	adds	r3, #1
 80078b6:	9304      	str	r3, [sp, #16]
 80078b8:	e774      	b.n	80077a4 <_dtoa_r+0x904>
 80078ba:	f000 fafb 	bl	8007eb4 <__multadd>
 80078be:	4639      	mov	r1, r7
 80078c0:	4681      	mov	r9, r0
 80078c2:	2300      	movs	r3, #0
 80078c4:	220a      	movs	r2, #10
 80078c6:	4630      	mov	r0, r6
 80078c8:	f000 faf4 	bl	8007eb4 <__multadd>
 80078cc:	4607      	mov	r7, r0
 80078ce:	e7f0      	b.n	80078b2 <_dtoa_r+0xa12>
 80078d0:	f1ba 0f00 	cmp.w	sl, #0
 80078d4:	9a01      	ldr	r2, [sp, #4]
 80078d6:	bfcc      	ite	gt
 80078d8:	46d0      	movgt	r8, sl
 80078da:	f04f 0801 	movle.w	r8, #1
 80078de:	4490      	add	r8, r2
 80078e0:	f04f 0900 	mov.w	r9, #0
 80078e4:	4629      	mov	r1, r5
 80078e6:	2201      	movs	r2, #1
 80078e8:	4630      	mov	r0, r6
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	f000 fc92 	bl	8008214 <__lshift>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4605      	mov	r5, r0
 80078f4:	f000 fcfe 	bl	80082f4 <__mcmp>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	dcb1      	bgt.n	8007860 <_dtoa_r+0x9c0>
 80078fc:	d102      	bne.n	8007904 <_dtoa_r+0xa64>
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	07db      	lsls	r3, r3, #31
 8007902:	d4ad      	bmi.n	8007860 <_dtoa_r+0x9c0>
 8007904:	4643      	mov	r3, r8
 8007906:	4698      	mov	r8, r3
 8007908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800790c:	2a30      	cmp	r2, #48	; 0x30
 800790e:	d0fa      	beq.n	8007906 <_dtoa_r+0xa66>
 8007910:	e6f6      	b.n	8007700 <_dtoa_r+0x860>
 8007912:	9a01      	ldr	r2, [sp, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d1a4      	bne.n	8007862 <_dtoa_r+0x9c2>
 8007918:	f10b 0b01 	add.w	fp, fp, #1
 800791c:	2331      	movs	r3, #49	; 0x31
 800791e:	e778      	b.n	8007812 <_dtoa_r+0x972>
 8007920:	4b14      	ldr	r3, [pc, #80]	; (8007974 <_dtoa_r+0xad4>)
 8007922:	f7ff bb27 	b.w	8006f74 <_dtoa_r+0xd4>
 8007926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007928:	2b00      	cmp	r3, #0
 800792a:	f47f ab03 	bne.w	8006f34 <_dtoa_r+0x94>
 800792e:	4b12      	ldr	r3, [pc, #72]	; (8007978 <_dtoa_r+0xad8>)
 8007930:	f7ff bb20 	b.w	8006f74 <_dtoa_r+0xd4>
 8007934:	f1ba 0f00 	cmp.w	sl, #0
 8007938:	dc03      	bgt.n	8007942 <_dtoa_r+0xaa2>
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	2b02      	cmp	r3, #2
 800793e:	f73f aec7 	bgt.w	80076d0 <_dtoa_r+0x830>
 8007942:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	f7ff fa1d 	bl	8006d88 <quorem>
 800794e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007952:	f808 3b01 	strb.w	r3, [r8], #1
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	eba8 0202 	sub.w	r2, r8, r2
 800795c:	4592      	cmp	sl, r2
 800795e:	ddb7      	ble.n	80078d0 <_dtoa_r+0xa30>
 8007960:	4629      	mov	r1, r5
 8007962:	2300      	movs	r3, #0
 8007964:	220a      	movs	r2, #10
 8007966:	4630      	mov	r0, r6
 8007968:	f000 faa4 	bl	8007eb4 <__multadd>
 800796c:	4605      	mov	r5, r0
 800796e:	e7ea      	b.n	8007946 <_dtoa_r+0xaa6>
 8007970:	0801cc8b 	.word	0x0801cc8b
 8007974:	0801cbe8 	.word	0x0801cbe8
 8007978:	0801cc0c 	.word	0x0801cc0c

0800797c <__sflush_r>:
 800797c:	898a      	ldrh	r2, [r1, #12]
 800797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	4605      	mov	r5, r0
 8007984:	0710      	lsls	r0, r2, #28
 8007986:	460c      	mov	r4, r1
 8007988:	d458      	bmi.n	8007a3c <__sflush_r+0xc0>
 800798a:	684b      	ldr	r3, [r1, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc05      	bgt.n	800799c <__sflush_r+0x20>
 8007990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc02      	bgt.n	800799c <__sflush_r+0x20>
 8007996:	2000      	movs	r0, #0
 8007998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800799c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d0f9      	beq.n	8007996 <__sflush_r+0x1a>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a8:	682f      	ldr	r7, [r5, #0]
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	d032      	beq.n	8007a14 <__sflush_r+0x98>
 80079ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	075a      	lsls	r2, r3, #29
 80079b4:	d505      	bpl.n	80079c2 <__sflush_r+0x46>
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	1ac0      	subs	r0, r0, r3
 80079ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079bc:	b10b      	cbz	r3, 80079c2 <__sflush_r+0x46>
 80079be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079c0:	1ac0      	subs	r0, r0, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	4602      	mov	r2, r0
 80079c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c8:	6a21      	ldr	r1, [r4, #32]
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b0      	blx	r6
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	d106      	bne.n	80079e2 <__sflush_r+0x66>
 80079d4:	6829      	ldr	r1, [r5, #0]
 80079d6:	291d      	cmp	r1, #29
 80079d8:	d82c      	bhi.n	8007a34 <__sflush_r+0xb8>
 80079da:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <__sflush_r+0x108>)
 80079dc:	40ca      	lsrs	r2, r1
 80079de:	07d6      	lsls	r6, r2, #31
 80079e0:	d528      	bpl.n	8007a34 <__sflush_r+0xb8>
 80079e2:	2200      	movs	r2, #0
 80079e4:	6062      	str	r2, [r4, #4]
 80079e6:	04d9      	lsls	r1, r3, #19
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	6022      	str	r2, [r4, #0]
 80079ec:	d504      	bpl.n	80079f8 <__sflush_r+0x7c>
 80079ee:	1c42      	adds	r2, r0, #1
 80079f0:	d101      	bne.n	80079f6 <__sflush_r+0x7a>
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	b903      	cbnz	r3, 80079f8 <__sflush_r+0x7c>
 80079f6:	6560      	str	r0, [r4, #84]	; 0x54
 80079f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079fa:	602f      	str	r7, [r5, #0]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d0ca      	beq.n	8007996 <__sflush_r+0x1a>
 8007a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a04:	4299      	cmp	r1, r3
 8007a06:	d002      	beq.n	8007a0e <__sflush_r+0x92>
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fd8b 	bl	8008524 <_free_r>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	6360      	str	r0, [r4, #52]	; 0x34
 8007a12:	e7c1      	b.n	8007998 <__sflush_r+0x1c>
 8007a14:	6a21      	ldr	r1, [r4, #32]
 8007a16:	2301      	movs	r3, #1
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b0      	blx	r6
 8007a1c:	1c41      	adds	r1, r0, #1
 8007a1e:	d1c7      	bne.n	80079b0 <__sflush_r+0x34>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c4      	beq.n	80079b0 <__sflush_r+0x34>
 8007a26:	2b1d      	cmp	r3, #29
 8007a28:	d001      	beq.n	8007a2e <__sflush_r+0xb2>
 8007a2a:	2b16      	cmp	r3, #22
 8007a2c:	d101      	bne.n	8007a32 <__sflush_r+0xb6>
 8007a2e:	602f      	str	r7, [r5, #0]
 8007a30:	e7b1      	b.n	8007996 <__sflush_r+0x1a>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e7ad      	b.n	8007998 <__sflush_r+0x1c>
 8007a3c:	690f      	ldr	r7, [r1, #16]
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	d0a9      	beq.n	8007996 <__sflush_r+0x1a>
 8007a42:	0793      	lsls	r3, r2, #30
 8007a44:	680e      	ldr	r6, [r1, #0]
 8007a46:	bf08      	it	eq
 8007a48:	694b      	ldreq	r3, [r1, #20]
 8007a4a:	600f      	str	r7, [r1, #0]
 8007a4c:	bf18      	it	ne
 8007a4e:	2300      	movne	r3, #0
 8007a50:	eba6 0807 	sub.w	r8, r6, r7
 8007a54:	608b      	str	r3, [r1, #8]
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	dd9c      	ble.n	8007996 <__sflush_r+0x1a>
 8007a5c:	6a21      	ldr	r1, [r4, #32]
 8007a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a60:	4643      	mov	r3, r8
 8007a62:	463a      	mov	r2, r7
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dc06      	bgt.n	8007a7a <__sflush_r+0xfe>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	e78e      	b.n	8007998 <__sflush_r+0x1c>
 8007a7a:	4407      	add	r7, r0
 8007a7c:	eba8 0800 	sub.w	r8, r8, r0
 8007a80:	e7e9      	b.n	8007a56 <__sflush_r+0xda>
 8007a82:	bf00      	nop
 8007a84:	20400001 	.word	0x20400001

08007a88 <_fflush_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b913      	cbnz	r3, 8007a98 <_fflush_r+0x10>
 8007a92:	2500      	movs	r5, #0
 8007a94:	4628      	mov	r0, r5
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	b118      	cbz	r0, 8007aa2 <_fflush_r+0x1a>
 8007a9a:	6983      	ldr	r3, [r0, #24]
 8007a9c:	b90b      	cbnz	r3, 8007aa2 <_fflush_r+0x1a>
 8007a9e:	f000 f887 	bl	8007bb0 <__sinit>
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <_fflush_r+0x6c>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d11b      	bne.n	8007ae0 <_fflush_r+0x58>
 8007aa8:	686c      	ldr	r4, [r5, #4]
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0ef      	beq.n	8007a92 <_fflush_r+0xa>
 8007ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab4:	07d0      	lsls	r0, r2, #31
 8007ab6:	d404      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007ab8:	0599      	lsls	r1, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007abe:	f000 f91a 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f7ff ff59 	bl	800797c <__sflush_r>
 8007aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007acc:	07da      	lsls	r2, r3, #31
 8007ace:	4605      	mov	r5, r0
 8007ad0:	d4e0      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	d4dd      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ada:	f000 f90d 	bl	8007cf8 <__retarget_lock_release_recursive>
 8007ade:	e7d9      	b.n	8007a94 <_fflush_r+0xc>
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <_fflush_r+0x70>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <_fflush_r+0x62>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7df      	b.n	8007aaa <_fflush_r+0x22>
 8007aea:	4b04      	ldr	r3, [pc, #16]	; (8007afc <_fflush_r+0x74>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7da      	b.n	8007aaa <_fflush_r+0x22>
 8007af4:	0801ccbc 	.word	0x0801ccbc
 8007af8:	0801ccdc 	.word	0x0801ccdc
 8007afc:	0801cc9c 	.word	0x0801cc9c

08007b00 <std>:
 8007b00:	2300      	movs	r3, #0
 8007b02:	b510      	push	{r4, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	e9c0 3300 	strd	r3, r3, [r0]
 8007b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b0e:	6083      	str	r3, [r0, #8]
 8007b10:	8181      	strh	r1, [r0, #12]
 8007b12:	6643      	str	r3, [r0, #100]	; 0x64
 8007b14:	81c2      	strh	r2, [r0, #14]
 8007b16:	6183      	str	r3, [r0, #24]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	2208      	movs	r2, #8
 8007b1c:	305c      	adds	r0, #92	; 0x5c
 8007b1e:	f7fe fb9b 	bl	8006258 <memset>
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x38>)
 8007b24:	6263      	str	r3, [r4, #36]	; 0x24
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <std+0x3c>)
 8007b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b2a:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <std+0x40>)
 8007b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <std+0x44>)
 8007b30:	6224      	str	r4, [r4, #32]
 8007b32:	6323      	str	r3, [r4, #48]	; 0x30
 8007b34:	bd10      	pop	{r4, pc}
 8007b36:	bf00      	nop
 8007b38:	080089b9 	.word	0x080089b9
 8007b3c:	080089db 	.word	0x080089db
 8007b40:	08008a13 	.word	0x08008a13
 8007b44:	08008a37 	.word	0x08008a37

08007b48 <_cleanup_r>:
 8007b48:	4901      	ldr	r1, [pc, #4]	; (8007b50 <_cleanup_r+0x8>)
 8007b4a:	f000 b8af 	b.w	8007cac <_fwalk_reent>
 8007b4e:	bf00      	nop
 8007b50:	08007a89 	.word	0x08007a89

08007b54 <__sfmoreglue>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	2268      	movs	r2, #104	; 0x68
 8007b58:	1e4d      	subs	r5, r1, #1
 8007b5a:	4355      	muls	r5, r2
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b62:	f000 fd4b 	bl	80085fc <_malloc_r>
 8007b66:	4604      	mov	r4, r0
 8007b68:	b140      	cbz	r0, 8007b7c <__sfmoreglue+0x28>
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b70:	300c      	adds	r0, #12
 8007b72:	60a0      	str	r0, [r4, #8]
 8007b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b78:	f7fe fb6e 	bl	8006258 <memset>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__sfp_lock_acquire>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__sfp_lock_acquire+0x8>)
 8007b82:	f000 b8b8 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	2000f8c9 	.word	0x2000f8c9

08007b8c <__sfp_lock_release>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sfp_lock_release+0x8>)
 8007b8e:	f000 b8b3 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	2000f8c9 	.word	0x2000f8c9

08007b98 <__sinit_lock_acquire>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sinit_lock_acquire+0x8>)
 8007b9a:	f000 b8ac 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	2000f8ca 	.word	0x2000f8ca

08007ba4 <__sinit_lock_release>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__sinit_lock_release+0x8>)
 8007ba6:	f000 b8a7 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	2000f8ca 	.word	0x2000f8ca

08007bb0 <__sinit>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f7ff fff0 	bl	8007b98 <__sinit_lock_acquire>
 8007bb8:	69a3      	ldr	r3, [r4, #24]
 8007bba:	b11b      	cbz	r3, 8007bc4 <__sinit+0x14>
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc0:	f7ff bff0 	b.w	8007ba4 <__sinit_lock_release>
 8007bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <__sinit+0x68>)
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <__sinit+0x6c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	bf04      	itt	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	61a3      	streq	r3, [r4, #24]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f820 	bl	8007c20 <__sfp>
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f81c 	bl	8007c20 <__sfp>
 8007be8:	60a0      	str	r0, [r4, #8]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 f818 	bl	8007c20 <__sfp>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	60e0      	str	r0, [r4, #12]
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	6860      	ldr	r0, [r4, #4]
 8007bf8:	f7ff ff82 	bl	8007b00 <std>
 8007bfc:	68a0      	ldr	r0, [r4, #8]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2109      	movs	r1, #9
 8007c02:	f7ff ff7d 	bl	8007b00 <std>
 8007c06:	68e0      	ldr	r0, [r4, #12]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	f7ff ff78 	bl	8007b00 <std>
 8007c10:	2301      	movs	r3, #1
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	e7d2      	b.n	8007bbc <__sinit+0xc>
 8007c16:	bf00      	nop
 8007c18:	0801cbd4 	.word	0x0801cbd4
 8007c1c:	08007b49 	.word	0x08007b49

08007c20 <__sfp>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	4607      	mov	r7, r0
 8007c24:	f7ff ffac 	bl	8007b80 <__sfp_lock_acquire>
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <__sfp+0x84>)
 8007c2a:	681e      	ldr	r6, [r3, #0]
 8007c2c:	69b3      	ldr	r3, [r6, #24]
 8007c2e:	b913      	cbnz	r3, 8007c36 <__sfp+0x16>
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ffbd 	bl	8007bb0 <__sinit>
 8007c36:	3648      	adds	r6, #72	; 0x48
 8007c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	d503      	bpl.n	8007c48 <__sfp+0x28>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	b30b      	cbz	r3, 8007c88 <__sfp+0x68>
 8007c44:	6836      	ldr	r6, [r6, #0]
 8007c46:	e7f7      	b.n	8007c38 <__sfp+0x18>
 8007c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c4c:	b9d5      	cbnz	r5, 8007c84 <__sfp+0x64>
 8007c4e:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <__sfp+0x88>)
 8007c50:	60e3      	str	r3, [r4, #12]
 8007c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c56:	6665      	str	r5, [r4, #100]	; 0x64
 8007c58:	f000 f84c 	bl	8007cf4 <__retarget_lock_init_recursive>
 8007c5c:	f7ff ff96 	bl	8007b8c <__sfp_lock_release>
 8007c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c68:	6025      	str	r5, [r4, #0]
 8007c6a:	61a5      	str	r5, [r4, #24]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c74:	f7fe faf0 	bl	8006258 <memset>
 8007c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c80:	4620      	mov	r0, r4
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c84:	3468      	adds	r4, #104	; 0x68
 8007c86:	e7d9      	b.n	8007c3c <__sfp+0x1c>
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ff62 	bl	8007b54 <__sfmoreglue>
 8007c90:	4604      	mov	r4, r0
 8007c92:	6030      	str	r0, [r6, #0]
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1d5      	bne.n	8007c44 <__sfp+0x24>
 8007c98:	f7ff ff78 	bl	8007b8c <__sfp_lock_release>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	e7ee      	b.n	8007c80 <__sfp+0x60>
 8007ca2:	bf00      	nop
 8007ca4:	0801cbd4 	.word	0x0801cbd4
 8007ca8:	ffff0001 	.word	0xffff0001

08007cac <_fwalk_reent>:
 8007cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	4688      	mov	r8, r1
 8007cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cb8:	2700      	movs	r7, #0
 8007cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc2:	d505      	bpl.n	8007cd0 <_fwalk_reent+0x24>
 8007cc4:	6824      	ldr	r4, [r4, #0]
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d1f7      	bne.n	8007cba <_fwalk_reent+0xe>
 8007cca:	4638      	mov	r0, r7
 8007ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d907      	bls.n	8007ce6 <_fwalk_reent+0x3a>
 8007cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	d003      	beq.n	8007ce6 <_fwalk_reent+0x3a>
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	47c0      	blx	r8
 8007ce4:	4307      	orrs	r7, r0
 8007ce6:	3568      	adds	r5, #104	; 0x68
 8007ce8:	e7e9      	b.n	8007cbe <_fwalk_reent+0x12>
	...

08007cec <_localeconv_r>:
 8007cec:	4800      	ldr	r0, [pc, #0]	; (8007cf0 <_localeconv_r+0x4>)
 8007cee:	4770      	bx	lr
 8007cf0:	20000164 	.word	0x20000164

08007cf4 <__retarget_lock_init_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_acquire_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <__retarget_lock_release_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__swhatbuf_r>:
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	2900      	cmp	r1, #0
 8007d04:	b096      	sub	sp, #88	; 0x58
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	da08      	bge.n	8007d1e <__swhatbuf_r+0x24>
 8007d0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	061a      	lsls	r2, r3, #24
 8007d16:	d410      	bmi.n	8007d3a <__swhatbuf_r+0x40>
 8007d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1c:	e00e      	b.n	8007d3c <__swhatbuf_r+0x42>
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f000 fee0 	bl	8008ae4 <_fstat_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dbf1      	blt.n	8007d0c <__swhatbuf_r+0x12>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d32:	425a      	negs	r2, r3
 8007d34:	415a      	adcs	r2, r3
 8007d36:	602a      	str	r2, [r5, #0]
 8007d38:	e7ee      	b.n	8007d18 <__swhatbuf_r+0x1e>
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	b016      	add	sp, #88	; 0x58
 8007d42:	bd70      	pop	{r4, r5, r6, pc}

08007d44 <__smakebuf_r>:
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d48:	079d      	lsls	r5, r3, #30
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	d507      	bpl.n	8007d60 <__smakebuf_r+0x1c>
 8007d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	ab01      	add	r3, sp, #4
 8007d62:	466a      	mov	r2, sp
 8007d64:	f7ff ffc9 	bl	8007cfa <__swhatbuf_r>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 fc45 	bl	80085fc <_malloc_r>
 8007d72:	b948      	cbnz	r0, 8007d88 <__smakebuf_r+0x44>
 8007d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d4ef      	bmi.n	8007d5c <__smakebuf_r+0x18>
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	e7e3      	b.n	8007d50 <__smakebuf_r+0xc>
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__smakebuf_r+0x7c>)
 8007d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	6163      	str	r3, [r4, #20]
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	6120      	str	r0, [r4, #16]
 8007d9e:	b15b      	cbz	r3, 8007db8 <__smakebuf_r+0x74>
 8007da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 feaf 	bl	8008b08 <_isatty_r>
 8007daa:	b128      	cbz	r0, 8007db8 <__smakebuf_r+0x74>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	89a0      	ldrh	r0, [r4, #12]
 8007dba:	4305      	orrs	r5, r0
 8007dbc:	81a5      	strh	r5, [r4, #12]
 8007dbe:	e7cd      	b.n	8007d5c <__smakebuf_r+0x18>
 8007dc0:	08007b49 	.word	0x08007b49

08007dc4 <malloc>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <malloc+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 bc17 	b.w	80085fc <_malloc_r>
 8007dce:	bf00      	nop
 8007dd0:	20000010 	.word	0x20000010

08007dd4 <memcpy>:
 8007dd4:	440a      	add	r2, r1
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ddc:	d100      	bne.n	8007de0 <memcpy+0xc>
 8007dde:	4770      	bx	lr
 8007de0:	b510      	push	{r4, lr}
 8007de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dea:	4291      	cmp	r1, r2
 8007dec:	d1f9      	bne.n	8007de2 <memcpy+0xe>
 8007dee:	bd10      	pop	{r4, pc}

08007df0 <_Balloc>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007df4:	4604      	mov	r4, r0
 8007df6:	460d      	mov	r5, r1
 8007df8:	b976      	cbnz	r6, 8007e18 <_Balloc+0x28>
 8007dfa:	2010      	movs	r0, #16
 8007dfc:	f7ff ffe2 	bl	8007dc4 <malloc>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6260      	str	r0, [r4, #36]	; 0x24
 8007e04:	b920      	cbnz	r0, 8007e10 <_Balloc+0x20>
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <_Balloc+0x78>)
 8007e08:	4818      	ldr	r0, [pc, #96]	; (8007e6c <_Balloc+0x7c>)
 8007e0a:	2166      	movs	r1, #102	; 0x66
 8007e0c:	f000 fe2a 	bl	8008a64 <__assert_func>
 8007e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e14:	6006      	str	r6, [r0, #0]
 8007e16:	60c6      	str	r6, [r0, #12]
 8007e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e1a:	68f3      	ldr	r3, [r6, #12]
 8007e1c:	b183      	cbz	r3, 8007e40 <_Balloc+0x50>
 8007e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e26:	b9b8      	cbnz	r0, 8007e58 <_Balloc+0x68>
 8007e28:	2101      	movs	r1, #1
 8007e2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e2e:	1d72      	adds	r2, r6, #5
 8007e30:	0092      	lsls	r2, r2, #2
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fb60 	bl	80084f8 <_calloc_r>
 8007e38:	b160      	cbz	r0, 8007e54 <_Balloc+0x64>
 8007e3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e3e:	e00e      	b.n	8007e5e <_Balloc+0x6e>
 8007e40:	2221      	movs	r2, #33	; 0x21
 8007e42:	2104      	movs	r1, #4
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fb57 	bl	80084f8 <_calloc_r>
 8007e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4c:	60f0      	str	r0, [r6, #12]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e4      	bne.n	8007e1e <_Balloc+0x2e>
 8007e54:	2000      	movs	r0, #0
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e64:	e7f7      	b.n	8007e56 <_Balloc+0x66>
 8007e66:	bf00      	nop
 8007e68:	0801cc19 	.word	0x0801cc19
 8007e6c:	0801ccfc 	.word	0x0801ccfc

08007e70 <_Bfree>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e74:	4605      	mov	r5, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b976      	cbnz	r6, 8007e98 <_Bfree+0x28>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f7ff ffa2 	bl	8007dc4 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6268      	str	r0, [r5, #36]	; 0x24
 8007e84:	b920      	cbnz	r0, 8007e90 <_Bfree+0x20>
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <_Bfree+0x3c>)
 8007e88:	4809      	ldr	r0, [pc, #36]	; (8007eb0 <_Bfree+0x40>)
 8007e8a:	218a      	movs	r1, #138	; 0x8a
 8007e8c:	f000 fdea 	bl	8008a64 <__assert_func>
 8007e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e94:	6006      	str	r6, [r0, #0]
 8007e96:	60c6      	str	r6, [r0, #12]
 8007e98:	b13c      	cbz	r4, 8007eaa <_Bfree+0x3a>
 8007e9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e9c:	6862      	ldr	r2, [r4, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ea4:	6021      	str	r1, [r4, #0]
 8007ea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	0801cc19 	.word	0x0801cc19
 8007eb0:	0801ccfc 	.word	0x0801ccfc

08007eb4 <__multadd>:
 8007eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb8:	690d      	ldr	r5, [r1, #16]
 8007eba:	4607      	mov	r7, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	461e      	mov	r6, r3
 8007ec0:	f101 0c14 	add.w	ip, r1, #20
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eca:	b299      	uxth	r1, r3
 8007ecc:	fb02 6101 	mla	r1, r2, r1, r6
 8007ed0:	0c1e      	lsrs	r6, r3, #16
 8007ed2:	0c0b      	lsrs	r3, r1, #16
 8007ed4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ed8:	b289      	uxth	r1, r1
 8007eda:	3001      	adds	r0, #1
 8007edc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ee0:	4285      	cmp	r5, r0
 8007ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eea:	dcec      	bgt.n	8007ec6 <__multadd+0x12>
 8007eec:	b30e      	cbz	r6, 8007f32 <__multadd+0x7e>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	42ab      	cmp	r3, r5
 8007ef2:	dc19      	bgt.n	8007f28 <__multadd+0x74>
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	3101      	adds	r1, #1
 8007efa:	f7ff ff79 	bl	8007df0 <_Balloc>
 8007efe:	4680      	mov	r8, r0
 8007f00:	b928      	cbnz	r0, 8007f0e <__multadd+0x5a>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <__multadd+0x84>)
 8007f06:	480d      	ldr	r0, [pc, #52]	; (8007f3c <__multadd+0x88>)
 8007f08:	21b5      	movs	r1, #181	; 0xb5
 8007f0a:	f000 fdab 	bl	8008a64 <__assert_func>
 8007f0e:	6922      	ldr	r2, [r4, #16]
 8007f10:	3202      	adds	r2, #2
 8007f12:	f104 010c 	add.w	r1, r4, #12
 8007f16:	0092      	lsls	r2, r2, #2
 8007f18:	300c      	adds	r0, #12
 8007f1a:	f7ff ff5b 	bl	8007dd4 <memcpy>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ffa5 	bl	8007e70 <_Bfree>
 8007f26:	4644      	mov	r4, r8
 8007f28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	615e      	str	r6, [r3, #20]
 8007f30:	6125      	str	r5, [r4, #16]
 8007f32:	4620      	mov	r0, r4
 8007f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f38:	0801cc8b 	.word	0x0801cc8b
 8007f3c:	0801ccfc 	.word	0x0801ccfc

08007f40 <__hi0bits>:
 8007f40:	0c03      	lsrs	r3, r0, #16
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	b9d3      	cbnz	r3, 8007f7c <__hi0bits+0x3c>
 8007f46:	0400      	lsls	r0, r0, #16
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f4e:	bf04      	itt	eq
 8007f50:	0200      	lsleq	r0, r0, #8
 8007f52:	3308      	addeq	r3, #8
 8007f54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f58:	bf04      	itt	eq
 8007f5a:	0100      	lsleq	r0, r0, #4
 8007f5c:	3304      	addeq	r3, #4
 8007f5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f62:	bf04      	itt	eq
 8007f64:	0080      	lsleq	r0, r0, #2
 8007f66:	3302      	addeq	r3, #2
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	db05      	blt.n	8007f78 <__hi0bits+0x38>
 8007f6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f70:	f103 0301 	add.w	r3, r3, #1
 8007f74:	bf08      	it	eq
 8007f76:	2320      	moveq	r3, #32
 8007f78:	4618      	mov	r0, r3
 8007f7a:	4770      	bx	lr
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e7e4      	b.n	8007f4a <__hi0bits+0xa>

08007f80 <__lo0bits>:
 8007f80:	6803      	ldr	r3, [r0, #0]
 8007f82:	f013 0207 	ands.w	r2, r3, #7
 8007f86:	4601      	mov	r1, r0
 8007f88:	d00b      	beq.n	8007fa2 <__lo0bits+0x22>
 8007f8a:	07da      	lsls	r2, r3, #31
 8007f8c:	d423      	bmi.n	8007fd6 <__lo0bits+0x56>
 8007f8e:	0798      	lsls	r0, r3, #30
 8007f90:	bf49      	itett	mi
 8007f92:	085b      	lsrmi	r3, r3, #1
 8007f94:	089b      	lsrpl	r3, r3, #2
 8007f96:	2001      	movmi	r0, #1
 8007f98:	600b      	strmi	r3, [r1, #0]
 8007f9a:	bf5c      	itt	pl
 8007f9c:	600b      	strpl	r3, [r1, #0]
 8007f9e:	2002      	movpl	r0, #2
 8007fa0:	4770      	bx	lr
 8007fa2:	b298      	uxth	r0, r3
 8007fa4:	b9a8      	cbnz	r0, 8007fd2 <__lo0bits+0x52>
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	2010      	movs	r0, #16
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	b90a      	cbnz	r2, 8007fb2 <__lo0bits+0x32>
 8007fae:	3008      	adds	r0, #8
 8007fb0:	0a1b      	lsrs	r3, r3, #8
 8007fb2:	071a      	lsls	r2, r3, #28
 8007fb4:	bf04      	itt	eq
 8007fb6:	091b      	lsreq	r3, r3, #4
 8007fb8:	3004      	addeq	r0, #4
 8007fba:	079a      	lsls	r2, r3, #30
 8007fbc:	bf04      	itt	eq
 8007fbe:	089b      	lsreq	r3, r3, #2
 8007fc0:	3002      	addeq	r0, #2
 8007fc2:	07da      	lsls	r2, r3, #31
 8007fc4:	d403      	bmi.n	8007fce <__lo0bits+0x4e>
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	f100 0001 	add.w	r0, r0, #1
 8007fcc:	d005      	beq.n	8007fda <__lo0bits+0x5a>
 8007fce:	600b      	str	r3, [r1, #0]
 8007fd0:	4770      	bx	lr
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	e7e9      	b.n	8007faa <__lo0bits+0x2a>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	4770      	bx	lr
 8007fda:	2020      	movs	r0, #32
 8007fdc:	4770      	bx	lr
	...

08007fe0 <__i2b>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	f7ff ff03 	bl	8007df0 <_Balloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <__i2b+0x1a>
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <__i2b+0x24>)
 8007ff0:	4805      	ldr	r0, [pc, #20]	; (8008008 <__i2b+0x28>)
 8007ff2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ff6:	f000 fd35 	bl	8008a64 <__assert_func>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	6144      	str	r4, [r0, #20]
 8007ffe:	6103      	str	r3, [r0, #16]
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	0801cc8b 	.word	0x0801cc8b
 8008008:	0801ccfc 	.word	0x0801ccfc

0800800c <__multiply>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	4691      	mov	r9, r2
 8008012:	690a      	ldr	r2, [r1, #16]
 8008014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	bfb8      	it	lt
 800801c:	460b      	movlt	r3, r1
 800801e:	460c      	mov	r4, r1
 8008020:	bfbc      	itt	lt
 8008022:	464c      	movlt	r4, r9
 8008024:	4699      	movlt	r9, r3
 8008026:	6927      	ldr	r7, [r4, #16]
 8008028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800802c:	68a3      	ldr	r3, [r4, #8]
 800802e:	6861      	ldr	r1, [r4, #4]
 8008030:	eb07 060a 	add.w	r6, r7, sl
 8008034:	42b3      	cmp	r3, r6
 8008036:	b085      	sub	sp, #20
 8008038:	bfb8      	it	lt
 800803a:	3101      	addlt	r1, #1
 800803c:	f7ff fed8 	bl	8007df0 <_Balloc>
 8008040:	b930      	cbnz	r0, 8008050 <__multiply+0x44>
 8008042:	4602      	mov	r2, r0
 8008044:	4b44      	ldr	r3, [pc, #272]	; (8008158 <__multiply+0x14c>)
 8008046:	4845      	ldr	r0, [pc, #276]	; (800815c <__multiply+0x150>)
 8008048:	f240 115d 	movw	r1, #349	; 0x15d
 800804c:	f000 fd0a 	bl	8008a64 <__assert_func>
 8008050:	f100 0514 	add.w	r5, r0, #20
 8008054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008058:	462b      	mov	r3, r5
 800805a:	2200      	movs	r2, #0
 800805c:	4543      	cmp	r3, r8
 800805e:	d321      	bcc.n	80080a4 <__multiply+0x98>
 8008060:	f104 0314 	add.w	r3, r4, #20
 8008064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008068:	f109 0314 	add.w	r3, r9, #20
 800806c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008070:	9202      	str	r2, [sp, #8]
 8008072:	1b3a      	subs	r2, r7, r4
 8008074:	3a15      	subs	r2, #21
 8008076:	f022 0203 	bic.w	r2, r2, #3
 800807a:	3204      	adds	r2, #4
 800807c:	f104 0115 	add.w	r1, r4, #21
 8008080:	428f      	cmp	r7, r1
 8008082:	bf38      	it	cc
 8008084:	2204      	movcc	r2, #4
 8008086:	9201      	str	r2, [sp, #4]
 8008088:	9a02      	ldr	r2, [sp, #8]
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	429a      	cmp	r2, r3
 800808e:	d80c      	bhi.n	80080aa <__multiply+0x9e>
 8008090:	2e00      	cmp	r6, #0
 8008092:	dd03      	ble.n	800809c <__multiply+0x90>
 8008094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008098:	2b00      	cmp	r3, #0
 800809a:	d05a      	beq.n	8008152 <__multiply+0x146>
 800809c:	6106      	str	r6, [r0, #16]
 800809e:	b005      	add	sp, #20
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	f843 2b04 	str.w	r2, [r3], #4
 80080a8:	e7d8      	b.n	800805c <__multiply+0x50>
 80080aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80080ae:	f1ba 0f00 	cmp.w	sl, #0
 80080b2:	d024      	beq.n	80080fe <__multiply+0xf2>
 80080b4:	f104 0e14 	add.w	lr, r4, #20
 80080b8:	46a9      	mov	r9, r5
 80080ba:	f04f 0c00 	mov.w	ip, #0
 80080be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080c2:	f8d9 1000 	ldr.w	r1, [r9]
 80080c6:	fa1f fb82 	uxth.w	fp, r2
 80080ca:	b289      	uxth	r1, r1
 80080cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80080d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080d4:	f8d9 2000 	ldr.w	r2, [r9]
 80080d8:	4461      	add	r1, ip
 80080da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080de:	fb0a c20b 	mla	r2, sl, fp, ip
 80080e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080e6:	b289      	uxth	r1, r1
 80080e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080ec:	4577      	cmp	r7, lr
 80080ee:	f849 1b04 	str.w	r1, [r9], #4
 80080f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080f6:	d8e2      	bhi.n	80080be <__multiply+0xb2>
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	f845 c002 	str.w	ip, [r5, r2]
 80080fe:	9a03      	ldr	r2, [sp, #12]
 8008100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008104:	3304      	adds	r3, #4
 8008106:	f1b9 0f00 	cmp.w	r9, #0
 800810a:	d020      	beq.n	800814e <__multiply+0x142>
 800810c:	6829      	ldr	r1, [r5, #0]
 800810e:	f104 0c14 	add.w	ip, r4, #20
 8008112:	46ae      	mov	lr, r5
 8008114:	f04f 0a00 	mov.w	sl, #0
 8008118:	f8bc b000 	ldrh.w	fp, [ip]
 800811c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008120:	fb09 220b 	mla	r2, r9, fp, r2
 8008124:	4492      	add	sl, r2
 8008126:	b289      	uxth	r1, r1
 8008128:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800812c:	f84e 1b04 	str.w	r1, [lr], #4
 8008130:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008134:	f8be 1000 	ldrh.w	r1, [lr]
 8008138:	0c12      	lsrs	r2, r2, #16
 800813a:	fb09 1102 	mla	r1, r9, r2, r1
 800813e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008142:	4567      	cmp	r7, ip
 8008144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008148:	d8e6      	bhi.n	8008118 <__multiply+0x10c>
 800814a:	9a01      	ldr	r2, [sp, #4]
 800814c:	50a9      	str	r1, [r5, r2]
 800814e:	3504      	adds	r5, #4
 8008150:	e79a      	b.n	8008088 <__multiply+0x7c>
 8008152:	3e01      	subs	r6, #1
 8008154:	e79c      	b.n	8008090 <__multiply+0x84>
 8008156:	bf00      	nop
 8008158:	0801cc8b 	.word	0x0801cc8b
 800815c:	0801ccfc 	.word	0x0801ccfc

08008160 <__pow5mult>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4615      	mov	r5, r2
 8008166:	f012 0203 	ands.w	r2, r2, #3
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	d007      	beq.n	8008180 <__pow5mult+0x20>
 8008170:	4c25      	ldr	r4, [pc, #148]	; (8008208 <__pow5mult+0xa8>)
 8008172:	3a01      	subs	r2, #1
 8008174:	2300      	movs	r3, #0
 8008176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817a:	f7ff fe9b 	bl	8007eb4 <__multadd>
 800817e:	4607      	mov	r7, r0
 8008180:	10ad      	asrs	r5, r5, #2
 8008182:	d03d      	beq.n	8008200 <__pow5mult+0xa0>
 8008184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008186:	b97c      	cbnz	r4, 80081a8 <__pow5mult+0x48>
 8008188:	2010      	movs	r0, #16
 800818a:	f7ff fe1b 	bl	8007dc4 <malloc>
 800818e:	4602      	mov	r2, r0
 8008190:	6270      	str	r0, [r6, #36]	; 0x24
 8008192:	b928      	cbnz	r0, 80081a0 <__pow5mult+0x40>
 8008194:	4b1d      	ldr	r3, [pc, #116]	; (800820c <__pow5mult+0xac>)
 8008196:	481e      	ldr	r0, [pc, #120]	; (8008210 <__pow5mult+0xb0>)
 8008198:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800819c:	f000 fc62 	bl	8008a64 <__assert_func>
 80081a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081a4:	6004      	str	r4, [r0, #0]
 80081a6:	60c4      	str	r4, [r0, #12]
 80081a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081b0:	b94c      	cbnz	r4, 80081c6 <__pow5mult+0x66>
 80081b2:	f240 2171 	movw	r1, #625	; 0x271
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ff12 	bl	8007fe0 <__i2b>
 80081bc:	2300      	movs	r3, #0
 80081be:	f8c8 0008 	str.w	r0, [r8, #8]
 80081c2:	4604      	mov	r4, r0
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	f04f 0900 	mov.w	r9, #0
 80081ca:	07eb      	lsls	r3, r5, #31
 80081cc:	d50a      	bpl.n	80081e4 <__pow5mult+0x84>
 80081ce:	4639      	mov	r1, r7
 80081d0:	4622      	mov	r2, r4
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff ff1a 	bl	800800c <__multiply>
 80081d8:	4639      	mov	r1, r7
 80081da:	4680      	mov	r8, r0
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff fe47 	bl	8007e70 <_Bfree>
 80081e2:	4647      	mov	r7, r8
 80081e4:	106d      	asrs	r5, r5, #1
 80081e6:	d00b      	beq.n	8008200 <__pow5mult+0xa0>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	b938      	cbnz	r0, 80081fc <__pow5mult+0x9c>
 80081ec:	4622      	mov	r2, r4
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff ff0b 	bl	800800c <__multiply>
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	f8c0 9000 	str.w	r9, [r0]
 80081fc:	4604      	mov	r4, r0
 80081fe:	e7e4      	b.n	80081ca <__pow5mult+0x6a>
 8008200:	4638      	mov	r0, r7
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	bf00      	nop
 8008208:	0801ce48 	.word	0x0801ce48
 800820c:	0801cc19 	.word	0x0801cc19
 8008210:	0801ccfc 	.word	0x0801ccfc

08008214 <__lshift>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	460c      	mov	r4, r1
 800821a:	6849      	ldr	r1, [r1, #4]
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	4607      	mov	r7, r0
 8008226:	4691      	mov	r9, r2
 8008228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800822c:	f108 0601 	add.w	r6, r8, #1
 8008230:	42b3      	cmp	r3, r6
 8008232:	db0b      	blt.n	800824c <__lshift+0x38>
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff fddb 	bl	8007df0 <_Balloc>
 800823a:	4605      	mov	r5, r0
 800823c:	b948      	cbnz	r0, 8008252 <__lshift+0x3e>
 800823e:	4602      	mov	r2, r0
 8008240:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <__lshift+0xd8>)
 8008242:	482b      	ldr	r0, [pc, #172]	; (80082f0 <__lshift+0xdc>)
 8008244:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008248:	f000 fc0c 	bl	8008a64 <__assert_func>
 800824c:	3101      	adds	r1, #1
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	e7ee      	b.n	8008230 <__lshift+0x1c>
 8008252:	2300      	movs	r3, #0
 8008254:	f100 0114 	add.w	r1, r0, #20
 8008258:	f100 0210 	add.w	r2, r0, #16
 800825c:	4618      	mov	r0, r3
 800825e:	4553      	cmp	r3, sl
 8008260:	db37      	blt.n	80082d2 <__lshift+0xbe>
 8008262:	6920      	ldr	r0, [r4, #16]
 8008264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008268:	f104 0314 	add.w	r3, r4, #20
 800826c:	f019 091f 	ands.w	r9, r9, #31
 8008270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008274:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008278:	d02f      	beq.n	80082da <__lshift+0xc6>
 800827a:	f1c9 0e20 	rsb	lr, r9, #32
 800827e:	468a      	mov	sl, r1
 8008280:	f04f 0c00 	mov.w	ip, #0
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	fa02 f209 	lsl.w	r2, r2, r9
 800828a:	ea42 020c 	orr.w	r2, r2, ip
 800828e:	f84a 2b04 	str.w	r2, [sl], #4
 8008292:	f853 2b04 	ldr.w	r2, [r3], #4
 8008296:	4298      	cmp	r0, r3
 8008298:	fa22 fc0e 	lsr.w	ip, r2, lr
 800829c:	d8f2      	bhi.n	8008284 <__lshift+0x70>
 800829e:	1b03      	subs	r3, r0, r4
 80082a0:	3b15      	subs	r3, #21
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	3304      	adds	r3, #4
 80082a8:	f104 0215 	add.w	r2, r4, #21
 80082ac:	4290      	cmp	r0, r2
 80082ae:	bf38      	it	cc
 80082b0:	2304      	movcc	r3, #4
 80082b2:	f841 c003 	str.w	ip, [r1, r3]
 80082b6:	f1bc 0f00 	cmp.w	ip, #0
 80082ba:	d001      	beq.n	80082c0 <__lshift+0xac>
 80082bc:	f108 0602 	add.w	r6, r8, #2
 80082c0:	3e01      	subs	r6, #1
 80082c2:	4638      	mov	r0, r7
 80082c4:	612e      	str	r6, [r5, #16]
 80082c6:	4621      	mov	r1, r4
 80082c8:	f7ff fdd2 	bl	8007e70 <_Bfree>
 80082cc:	4628      	mov	r0, r5
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082d6:	3301      	adds	r3, #1
 80082d8:	e7c1      	b.n	800825e <__lshift+0x4a>
 80082da:	3904      	subs	r1, #4
 80082dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e4:	4298      	cmp	r0, r3
 80082e6:	d8f9      	bhi.n	80082dc <__lshift+0xc8>
 80082e8:	e7ea      	b.n	80082c0 <__lshift+0xac>
 80082ea:	bf00      	nop
 80082ec:	0801cc8b 	.word	0x0801cc8b
 80082f0:	0801ccfc 	.word	0x0801ccfc

080082f4 <__mcmp>:
 80082f4:	b530      	push	{r4, r5, lr}
 80082f6:	6902      	ldr	r2, [r0, #16]
 80082f8:	690c      	ldr	r4, [r1, #16]
 80082fa:	1b12      	subs	r2, r2, r4
 80082fc:	d10e      	bne.n	800831c <__mcmp+0x28>
 80082fe:	f100 0314 	add.w	r3, r0, #20
 8008302:	3114      	adds	r1, #20
 8008304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800830c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008314:	42a5      	cmp	r5, r4
 8008316:	d003      	beq.n	8008320 <__mcmp+0x2c>
 8008318:	d305      	bcc.n	8008326 <__mcmp+0x32>
 800831a:	2201      	movs	r2, #1
 800831c:	4610      	mov	r0, r2
 800831e:	bd30      	pop	{r4, r5, pc}
 8008320:	4283      	cmp	r3, r0
 8008322:	d3f3      	bcc.n	800830c <__mcmp+0x18>
 8008324:	e7fa      	b.n	800831c <__mcmp+0x28>
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	e7f7      	b.n	800831c <__mcmp+0x28>

0800832c <__mdiff>:
 800832c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	460c      	mov	r4, r1
 8008332:	4606      	mov	r6, r0
 8008334:	4611      	mov	r1, r2
 8008336:	4620      	mov	r0, r4
 8008338:	4690      	mov	r8, r2
 800833a:	f7ff ffdb 	bl	80082f4 <__mcmp>
 800833e:	1e05      	subs	r5, r0, #0
 8008340:	d110      	bne.n	8008364 <__mdiff+0x38>
 8008342:	4629      	mov	r1, r5
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff fd53 	bl	8007df0 <_Balloc>
 800834a:	b930      	cbnz	r0, 800835a <__mdiff+0x2e>
 800834c:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <__mdiff+0x10c>)
 800834e:	4602      	mov	r2, r0
 8008350:	f240 2132 	movw	r1, #562	; 0x232
 8008354:	4839      	ldr	r0, [pc, #228]	; (800843c <__mdiff+0x110>)
 8008356:	f000 fb85 	bl	8008a64 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	bfa4      	itt	ge
 8008366:	4643      	movge	r3, r8
 8008368:	46a0      	movge	r8, r4
 800836a:	4630      	mov	r0, r6
 800836c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008370:	bfa6      	itte	ge
 8008372:	461c      	movge	r4, r3
 8008374:	2500      	movge	r5, #0
 8008376:	2501      	movlt	r5, #1
 8008378:	f7ff fd3a 	bl	8007df0 <_Balloc>
 800837c:	b920      	cbnz	r0, 8008388 <__mdiff+0x5c>
 800837e:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <__mdiff+0x10c>)
 8008380:	4602      	mov	r2, r0
 8008382:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008386:	e7e5      	b.n	8008354 <__mdiff+0x28>
 8008388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800838c:	6926      	ldr	r6, [r4, #16]
 800838e:	60c5      	str	r5, [r0, #12]
 8008390:	f104 0914 	add.w	r9, r4, #20
 8008394:	f108 0514 	add.w	r5, r8, #20
 8008398:	f100 0e14 	add.w	lr, r0, #20
 800839c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083a4:	f108 0210 	add.w	r2, r8, #16
 80083a8:	46f2      	mov	sl, lr
 80083aa:	2100      	movs	r1, #0
 80083ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083b4:	fa1f f883 	uxth.w	r8, r3
 80083b8:	fa11 f18b 	uxtah	r1, r1, fp
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	eba1 0808 	sub.w	r8, r1, r8
 80083c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ca:	fa1f f888 	uxth.w	r8, r8
 80083ce:	1419      	asrs	r1, r3, #16
 80083d0:	454e      	cmp	r6, r9
 80083d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083d6:	f84a 3b04 	str.w	r3, [sl], #4
 80083da:	d8e7      	bhi.n	80083ac <__mdiff+0x80>
 80083dc:	1b33      	subs	r3, r6, r4
 80083de:	3b15      	subs	r3, #21
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	3304      	adds	r3, #4
 80083e6:	3415      	adds	r4, #21
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	bf38      	it	cc
 80083ec:	2304      	movcc	r3, #4
 80083ee:	441d      	add	r5, r3
 80083f0:	4473      	add	r3, lr
 80083f2:	469e      	mov	lr, r3
 80083f4:	462e      	mov	r6, r5
 80083f6:	4566      	cmp	r6, ip
 80083f8:	d30e      	bcc.n	8008418 <__mdiff+0xec>
 80083fa:	f10c 0203 	add.w	r2, ip, #3
 80083fe:	1b52      	subs	r2, r2, r5
 8008400:	f022 0203 	bic.w	r2, r2, #3
 8008404:	3d03      	subs	r5, #3
 8008406:	45ac      	cmp	ip, r5
 8008408:	bf38      	it	cc
 800840a:	2200      	movcc	r2, #0
 800840c:	441a      	add	r2, r3
 800840e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008412:	b17b      	cbz	r3, 8008434 <__mdiff+0x108>
 8008414:	6107      	str	r7, [r0, #16]
 8008416:	e7a3      	b.n	8008360 <__mdiff+0x34>
 8008418:	f856 8b04 	ldr.w	r8, [r6], #4
 800841c:	fa11 f288 	uxtah	r2, r1, r8
 8008420:	1414      	asrs	r4, r2, #16
 8008422:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008426:	b292      	uxth	r2, r2
 8008428:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800842c:	f84e 2b04 	str.w	r2, [lr], #4
 8008430:	1421      	asrs	r1, r4, #16
 8008432:	e7e0      	b.n	80083f6 <__mdiff+0xca>
 8008434:	3f01      	subs	r7, #1
 8008436:	e7ea      	b.n	800840e <__mdiff+0xe2>
 8008438:	0801cc8b 	.word	0x0801cc8b
 800843c:	0801ccfc 	.word	0x0801ccfc

08008440 <__d2b>:
 8008440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4689      	mov	r9, r1
 8008446:	2101      	movs	r1, #1
 8008448:	ec57 6b10 	vmov	r6, r7, d0
 800844c:	4690      	mov	r8, r2
 800844e:	f7ff fccf 	bl	8007df0 <_Balloc>
 8008452:	4604      	mov	r4, r0
 8008454:	b930      	cbnz	r0, 8008464 <__d2b+0x24>
 8008456:	4602      	mov	r2, r0
 8008458:	4b25      	ldr	r3, [pc, #148]	; (80084f0 <__d2b+0xb0>)
 800845a:	4826      	ldr	r0, [pc, #152]	; (80084f4 <__d2b+0xb4>)
 800845c:	f240 310a 	movw	r1, #778	; 0x30a
 8008460:	f000 fb00 	bl	8008a64 <__assert_func>
 8008464:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800846c:	bb35      	cbnz	r5, 80084bc <__d2b+0x7c>
 800846e:	2e00      	cmp	r6, #0
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	d028      	beq.n	80084c6 <__d2b+0x86>
 8008474:	4668      	mov	r0, sp
 8008476:	9600      	str	r6, [sp, #0]
 8008478:	f7ff fd82 	bl	8007f80 <__lo0bits>
 800847c:	9900      	ldr	r1, [sp, #0]
 800847e:	b300      	cbz	r0, 80084c2 <__d2b+0x82>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	f1c0 0320 	rsb	r3, r0, #32
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	430b      	orrs	r3, r1
 800848c:	40c2      	lsrs	r2, r0
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	9201      	str	r2, [sp, #4]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	61a3      	str	r3, [r4, #24]
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2202      	movne	r2, #2
 800849c:	2201      	moveq	r2, #1
 800849e:	6122      	str	r2, [r4, #16]
 80084a0:	b1d5      	cbz	r5, 80084d8 <__d2b+0x98>
 80084a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084a6:	4405      	add	r5, r0
 80084a8:	f8c9 5000 	str.w	r5, [r9]
 80084ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084b0:	f8c8 0000 	str.w	r0, [r8]
 80084b4:	4620      	mov	r0, r4
 80084b6:	b003      	add	sp, #12
 80084b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084c0:	e7d5      	b.n	800846e <__d2b+0x2e>
 80084c2:	6161      	str	r1, [r4, #20]
 80084c4:	e7e5      	b.n	8008492 <__d2b+0x52>
 80084c6:	a801      	add	r0, sp, #4
 80084c8:	f7ff fd5a 	bl	8007f80 <__lo0bits>
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	2201      	movs	r2, #1
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	3020      	adds	r0, #32
 80084d6:	e7e3      	b.n	80084a0 <__d2b+0x60>
 80084d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084e0:	f8c9 0000 	str.w	r0, [r9]
 80084e4:	6918      	ldr	r0, [r3, #16]
 80084e6:	f7ff fd2b 	bl	8007f40 <__hi0bits>
 80084ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ee:	e7df      	b.n	80084b0 <__d2b+0x70>
 80084f0:	0801cc8b 	.word	0x0801cc8b
 80084f4:	0801ccfc 	.word	0x0801ccfc

080084f8 <_calloc_r>:
 80084f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fa:	fba1 2402 	umull	r2, r4, r1, r2
 80084fe:	b94c      	cbnz	r4, 8008514 <_calloc_r+0x1c>
 8008500:	4611      	mov	r1, r2
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	f000 f87a 	bl	80085fc <_malloc_r>
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	4605      	mov	r5, r0
 800850c:	b930      	cbnz	r0, 800851c <_calloc_r+0x24>
 800850e:	4628      	mov	r0, r5
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	220c      	movs	r2, #12
 8008516:	6002      	str	r2, [r0, #0]
 8008518:	2500      	movs	r5, #0
 800851a:	e7f8      	b.n	800850e <_calloc_r+0x16>
 800851c:	4621      	mov	r1, r4
 800851e:	f7fd fe9b 	bl	8006258 <memset>
 8008522:	e7f4      	b.n	800850e <_calloc_r+0x16>

08008524 <_free_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	2900      	cmp	r1, #0
 8008528:	d044      	beq.n	80085b4 <_free_r+0x90>
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f1a1 0404 	sub.w	r4, r1, #4
 8008536:	bfb8      	it	lt
 8008538:	18e4      	addlt	r4, r4, r3
 800853a:	f000 fb19 	bl	8008b70 <__malloc_lock>
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <_free_r+0x94>)
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	b933      	cbnz	r3, 8008554 <_free_r+0x30>
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008550:	f000 bb14 	b.w	8008b7c <__malloc_unlock>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d908      	bls.n	800856a <_free_r+0x46>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1949      	addeq	r1, r1, r5
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	e7ed      	b.n	8008546 <_free_r+0x22>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x50>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x46>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x70>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1e0      	bne.n	800854a <_free_r+0x26>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7da      	b.n	800854a <_free_r+0x26>
 8008594:	d902      	bls.n	800859c <_free_r+0x78>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d6      	b.n	800854a <_free_r+0x26>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7ca      	b.n	800854a <_free_r+0x26>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	2000f8cc 	.word	0x2000f8cc

080085bc <sbrk_aligned>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0e      	ldr	r6, [pc, #56]	; (80085f8 <sbrk_aligned+0x3c>)
 80085c0:	460c      	mov	r4, r1
 80085c2:	6831      	ldr	r1, [r6, #0]
 80085c4:	4605      	mov	r5, r0
 80085c6:	b911      	cbnz	r1, 80085ce <sbrk_aligned+0x12>
 80085c8:	f000 f9e6 	bl	8008998 <_sbrk_r>
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 f9e1 	bl	8008998 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d00a      	beq.n	80085f0 <sbrk_aligned+0x34>
 80085da:	1cc4      	adds	r4, r0, #3
 80085dc:	f024 0403 	bic.w	r4, r4, #3
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d007      	beq.n	80085f4 <sbrk_aligned+0x38>
 80085e4:	1a21      	subs	r1, r4, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f9d6 	bl	8008998 <_sbrk_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d101      	bne.n	80085f4 <sbrk_aligned+0x38>
 80085f0:	f04f 34ff 	mov.w	r4, #4294967295
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	2000f8d0 	.word	0x2000f8d0

080085fc <_malloc_r>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	1ccd      	adds	r5, r1, #3
 8008602:	f025 0503 	bic.w	r5, r5, #3
 8008606:	3508      	adds	r5, #8
 8008608:	2d0c      	cmp	r5, #12
 800860a:	bf38      	it	cc
 800860c:	250c      	movcc	r5, #12
 800860e:	2d00      	cmp	r5, #0
 8008610:	4607      	mov	r7, r0
 8008612:	db01      	blt.n	8008618 <_malloc_r+0x1c>
 8008614:	42a9      	cmp	r1, r5
 8008616:	d905      	bls.n	8008624 <_malloc_r+0x28>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	2600      	movs	r6, #0
 800861e:	4630      	mov	r0, r6
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	4e2e      	ldr	r6, [pc, #184]	; (80086e0 <_malloc_r+0xe4>)
 8008626:	f000 faa3 	bl	8008b70 <__malloc_lock>
 800862a:	6833      	ldr	r3, [r6, #0]
 800862c:	461c      	mov	r4, r3
 800862e:	bb34      	cbnz	r4, 800867e <_malloc_r+0x82>
 8008630:	4629      	mov	r1, r5
 8008632:	4638      	mov	r0, r7
 8008634:	f7ff ffc2 	bl	80085bc <sbrk_aligned>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	4604      	mov	r4, r0
 800863c:	d14d      	bne.n	80086da <_malloc_r+0xde>
 800863e:	6834      	ldr	r4, [r6, #0]
 8008640:	4626      	mov	r6, r4
 8008642:	2e00      	cmp	r6, #0
 8008644:	d140      	bne.n	80086c8 <_malloc_r+0xcc>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4631      	mov	r1, r6
 800864a:	4638      	mov	r0, r7
 800864c:	eb04 0803 	add.w	r8, r4, r3
 8008650:	f000 f9a2 	bl	8008998 <_sbrk_r>
 8008654:	4580      	cmp	r8, r0
 8008656:	d13a      	bne.n	80086ce <_malloc_r+0xd2>
 8008658:	6821      	ldr	r1, [r4, #0]
 800865a:	3503      	adds	r5, #3
 800865c:	1a6d      	subs	r5, r5, r1
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	4629      	mov	r1, r5
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ffa5 	bl	80085bc <sbrk_aligned>
 8008672:	3001      	adds	r0, #1
 8008674:	d02b      	beq.n	80086ce <_malloc_r+0xd2>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	442b      	add	r3, r5
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e00e      	b.n	800869c <_malloc_r+0xa0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	1b52      	subs	r2, r2, r5
 8008682:	d41e      	bmi.n	80086c2 <_malloc_r+0xc6>
 8008684:	2a0b      	cmp	r2, #11
 8008686:	d916      	bls.n	80086b6 <_malloc_r+0xba>
 8008688:	1961      	adds	r1, r4, r5
 800868a:	42a3      	cmp	r3, r4
 800868c:	6025      	str	r5, [r4, #0]
 800868e:	bf18      	it	ne
 8008690:	6059      	strne	r1, [r3, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	bf08      	it	eq
 8008696:	6031      	streq	r1, [r6, #0]
 8008698:	5162      	str	r2, [r4, r5]
 800869a:	604b      	str	r3, [r1, #4]
 800869c:	4638      	mov	r0, r7
 800869e:	f104 060b 	add.w	r6, r4, #11
 80086a2:	f000 fa6b 	bl	8008b7c <__malloc_unlock>
 80086a6:	f026 0607 	bic.w	r6, r6, #7
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	1af2      	subs	r2, r6, r3
 80086ae:	d0b6      	beq.n	800861e <_malloc_r+0x22>
 80086b0:	1b9b      	subs	r3, r3, r6
 80086b2:	50a3      	str	r3, [r4, r2]
 80086b4:	e7b3      	b.n	800861e <_malloc_r+0x22>
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	bf0c      	ite	eq
 80086bc:	6032      	streq	r2, [r6, #0]
 80086be:	605a      	strne	r2, [r3, #4]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xa0>
 80086c2:	4623      	mov	r3, r4
 80086c4:	6864      	ldr	r4, [r4, #4]
 80086c6:	e7b2      	b.n	800862e <_malloc_r+0x32>
 80086c8:	4634      	mov	r4, r6
 80086ca:	6876      	ldr	r6, [r6, #4]
 80086cc:	e7b9      	b.n	8008642 <_malloc_r+0x46>
 80086ce:	230c      	movs	r3, #12
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 fa52 	bl	8008b7c <__malloc_unlock>
 80086d8:	e7a1      	b.n	800861e <_malloc_r+0x22>
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	e7de      	b.n	800869c <_malloc_r+0xa0>
 80086de:	bf00      	nop
 80086e0:	2000f8cc 	.word	0x2000f8cc

080086e4 <__sfputc_r>:
 80086e4:	6893      	ldr	r3, [r2, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	b410      	push	{r4}
 80086ec:	6093      	str	r3, [r2, #8]
 80086ee:	da08      	bge.n	8008702 <__sfputc_r+0x1e>
 80086f0:	6994      	ldr	r4, [r2, #24]
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	db01      	blt.n	80086fa <__sfputc_r+0x16>
 80086f6:	290a      	cmp	r1, #10
 80086f8:	d103      	bne.n	8008702 <__sfputc_r+0x1e>
 80086fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fe:	f7fe ba83 	b.w	8006c08 <__swbuf_r>
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	1c58      	adds	r0, r3, #1
 8008706:	6010      	str	r0, [r2, #0]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	4608      	mov	r0, r1
 800870c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008710:	4770      	bx	lr

08008712 <__sfputs_r>:
 8008712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	4614      	mov	r4, r2
 800871a:	18d5      	adds	r5, r2, r3
 800871c:	42ac      	cmp	r4, r5
 800871e:	d101      	bne.n	8008724 <__sfputs_r+0x12>
 8008720:	2000      	movs	r0, #0
 8008722:	e007      	b.n	8008734 <__sfputs_r+0x22>
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	463a      	mov	r2, r7
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ffda 	bl	80086e4 <__sfputc_r>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d1f3      	bne.n	800871c <__sfputs_r+0xa>
 8008734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008738 <_vfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460d      	mov	r5, r1
 800873e:	b09d      	sub	sp, #116	; 0x74
 8008740:	4614      	mov	r4, r2
 8008742:	4698      	mov	r8, r3
 8008744:	4606      	mov	r6, r0
 8008746:	b118      	cbz	r0, 8008750 <_vfiprintf_r+0x18>
 8008748:	6983      	ldr	r3, [r0, #24]
 800874a:	b90b      	cbnz	r3, 8008750 <_vfiprintf_r+0x18>
 800874c:	f7ff fa30 	bl	8007bb0 <__sinit>
 8008750:	4b89      	ldr	r3, [pc, #548]	; (8008978 <_vfiprintf_r+0x240>)
 8008752:	429d      	cmp	r5, r3
 8008754:	d11b      	bne.n	800878e <_vfiprintf_r+0x56>
 8008756:	6875      	ldr	r5, [r6, #4]
 8008758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800875a:	07d9      	lsls	r1, r3, #31
 800875c:	d405      	bmi.n	800876a <_vfiprintf_r+0x32>
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	059a      	lsls	r2, r3, #22
 8008762:	d402      	bmi.n	800876a <_vfiprintf_r+0x32>
 8008764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008766:	f7ff fac6 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	071b      	lsls	r3, r3, #28
 800876e:	d501      	bpl.n	8008774 <_vfiprintf_r+0x3c>
 8008770:	692b      	ldr	r3, [r5, #16]
 8008772:	b9eb      	cbnz	r3, 80087b0 <_vfiprintf_r+0x78>
 8008774:	4629      	mov	r1, r5
 8008776:	4630      	mov	r0, r6
 8008778:	f7fe fa98 	bl	8006cac <__swsetup_r>
 800877c:	b1c0      	cbz	r0, 80087b0 <_vfiprintf_r+0x78>
 800877e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008780:	07dc      	lsls	r4, r3, #31
 8008782:	d50e      	bpl.n	80087a2 <_vfiprintf_r+0x6a>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b01d      	add	sp, #116	; 0x74
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	4b7b      	ldr	r3, [pc, #492]	; (800897c <_vfiprintf_r+0x244>)
 8008790:	429d      	cmp	r5, r3
 8008792:	d101      	bne.n	8008798 <_vfiprintf_r+0x60>
 8008794:	68b5      	ldr	r5, [r6, #8]
 8008796:	e7df      	b.n	8008758 <_vfiprintf_r+0x20>
 8008798:	4b79      	ldr	r3, [pc, #484]	; (8008980 <_vfiprintf_r+0x248>)
 800879a:	429d      	cmp	r5, r3
 800879c:	bf08      	it	eq
 800879e:	68f5      	ldreq	r5, [r6, #12]
 80087a0:	e7da      	b.n	8008758 <_vfiprintf_r+0x20>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	0598      	lsls	r0, r3, #22
 80087a6:	d4ed      	bmi.n	8008784 <_vfiprintf_r+0x4c>
 80087a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087aa:	f7ff faa5 	bl	8007cf8 <__retarget_lock_release_recursive>
 80087ae:	e7e9      	b.n	8008784 <_vfiprintf_r+0x4c>
 80087b0:	2300      	movs	r3, #0
 80087b2:	9309      	str	r3, [sp, #36]	; 0x24
 80087b4:	2320      	movs	r3, #32
 80087b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80087be:	2330      	movs	r3, #48	; 0x30
 80087c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008984 <_vfiprintf_r+0x24c>
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c8:	f04f 0901 	mov.w	r9, #1
 80087cc:	4623      	mov	r3, r4
 80087ce:	469a      	mov	sl, r3
 80087d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d4:	b10a      	cbz	r2, 80087da <_vfiprintf_r+0xa2>
 80087d6:	2a25      	cmp	r2, #37	; 0x25
 80087d8:	d1f9      	bne.n	80087ce <_vfiprintf_r+0x96>
 80087da:	ebba 0b04 	subs.w	fp, sl, r4
 80087de:	d00b      	beq.n	80087f8 <_vfiprintf_r+0xc0>
 80087e0:	465b      	mov	r3, fp
 80087e2:	4622      	mov	r2, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ff93 	bl	8008712 <__sfputs_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	f000 80aa 	beq.w	8008946 <_vfiprintf_r+0x20e>
 80087f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f4:	445a      	add	r2, fp
 80087f6:	9209      	str	r2, [sp, #36]	; 0x24
 80087f8:	f89a 3000 	ldrb.w	r3, [sl]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80a2 	beq.w	8008946 <_vfiprintf_r+0x20e>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 32ff 	mov.w	r2, #4294967295
 8008808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880c:	f10a 0a01 	add.w	sl, sl, #1
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008818:	931a      	str	r3, [sp, #104]	; 0x68
 800881a:	4654      	mov	r4, sl
 800881c:	2205      	movs	r2, #5
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	4858      	ldr	r0, [pc, #352]	; (8008984 <_vfiprintf_r+0x24c>)
 8008824:	f7f7 fd74 	bl	8000310 <memchr>
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	b9d8      	cbnz	r0, 8008864 <_vfiprintf_r+0x12c>
 800882c:	06d1      	lsls	r1, r2, #27
 800882e:	bf44      	itt	mi
 8008830:	2320      	movmi	r3, #32
 8008832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008836:	0713      	lsls	r3, r2, #28
 8008838:	bf44      	itt	mi
 800883a:	232b      	movmi	r3, #43	; 0x2b
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008840:	f89a 3000 	ldrb.w	r3, [sl]
 8008844:	2b2a      	cmp	r3, #42	; 0x2a
 8008846:	d015      	beq.n	8008874 <_vfiprintf_r+0x13c>
 8008848:	9a07      	ldr	r2, [sp, #28]
 800884a:	4654      	mov	r4, sl
 800884c:	2000      	movs	r0, #0
 800884e:	f04f 0c0a 	mov.w	ip, #10
 8008852:	4621      	mov	r1, r4
 8008854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008858:	3b30      	subs	r3, #48	; 0x30
 800885a:	2b09      	cmp	r3, #9
 800885c:	d94e      	bls.n	80088fc <_vfiprintf_r+0x1c4>
 800885e:	b1b0      	cbz	r0, 800888e <_vfiprintf_r+0x156>
 8008860:	9207      	str	r2, [sp, #28]
 8008862:	e014      	b.n	800888e <_vfiprintf_r+0x156>
 8008864:	eba0 0308 	sub.w	r3, r0, r8
 8008868:	fa09 f303 	lsl.w	r3, r9, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	46a2      	mov	sl, r4
 8008872:	e7d2      	b.n	800881a <_vfiprintf_r+0xe2>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d19      	adds	r1, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9103      	str	r1, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbb      	ittet	lt
 8008880:	425b      	neglt	r3, r3
 8008882:	f042 0202 	orrlt.w	r2, r2, #2
 8008886:	9307      	strge	r3, [sp, #28]
 8008888:	9307      	strlt	r3, [sp, #28]
 800888a:	bfb8      	it	lt
 800888c:	9204      	strlt	r2, [sp, #16]
 800888e:	7823      	ldrb	r3, [r4, #0]
 8008890:	2b2e      	cmp	r3, #46	; 0x2e
 8008892:	d10c      	bne.n	80088ae <_vfiprintf_r+0x176>
 8008894:	7863      	ldrb	r3, [r4, #1]
 8008896:	2b2a      	cmp	r3, #42	; 0x2a
 8008898:	d135      	bne.n	8008906 <_vfiprintf_r+0x1ce>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9203      	str	r2, [sp, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfb8      	it	lt
 80088a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088aa:	3402      	adds	r4, #2
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008994 <_vfiprintf_r+0x25c>
 80088b2:	7821      	ldrb	r1, [r4, #0]
 80088b4:	2203      	movs	r2, #3
 80088b6:	4650      	mov	r0, sl
 80088b8:	f7f7 fd2a 	bl	8000310 <memchr>
 80088bc:	b140      	cbz	r0, 80088d0 <_vfiprintf_r+0x198>
 80088be:	2340      	movs	r3, #64	; 0x40
 80088c0:	eba0 000a 	sub.w	r0, r0, sl
 80088c4:	fa03 f000 	lsl.w	r0, r3, r0
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	4303      	orrs	r3, r0
 80088cc:	3401      	adds	r4, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d4:	482c      	ldr	r0, [pc, #176]	; (8008988 <_vfiprintf_r+0x250>)
 80088d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088da:	2206      	movs	r2, #6
 80088dc:	f7f7 fd18 	bl	8000310 <memchr>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d03f      	beq.n	8008964 <_vfiprintf_r+0x22c>
 80088e4:	4b29      	ldr	r3, [pc, #164]	; (800898c <_vfiprintf_r+0x254>)
 80088e6:	bb1b      	cbnz	r3, 8008930 <_vfiprintf_r+0x1f8>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3307      	adds	r3, #7
 80088ec:	f023 0307 	bic.w	r3, r3, #7
 80088f0:	3308      	adds	r3, #8
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	443b      	add	r3, r7
 80088f8:	9309      	str	r3, [sp, #36]	; 0x24
 80088fa:	e767      	b.n	80087cc <_vfiprintf_r+0x94>
 80088fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008900:	460c      	mov	r4, r1
 8008902:	2001      	movs	r0, #1
 8008904:	e7a5      	b.n	8008852 <_vfiprintf_r+0x11a>
 8008906:	2300      	movs	r3, #0
 8008908:	3401      	adds	r4, #1
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	4619      	mov	r1, r3
 800890e:	f04f 0c0a 	mov.w	ip, #10
 8008912:	4620      	mov	r0, r4
 8008914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008918:	3a30      	subs	r2, #48	; 0x30
 800891a:	2a09      	cmp	r2, #9
 800891c:	d903      	bls.n	8008926 <_vfiprintf_r+0x1ee>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0c5      	beq.n	80088ae <_vfiprintf_r+0x176>
 8008922:	9105      	str	r1, [sp, #20]
 8008924:	e7c3      	b.n	80088ae <_vfiprintf_r+0x176>
 8008926:	fb0c 2101 	mla	r1, ip, r1, r2
 800892a:	4604      	mov	r4, r0
 800892c:	2301      	movs	r3, #1
 800892e:	e7f0      	b.n	8008912 <_vfiprintf_r+0x1da>
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	462a      	mov	r2, r5
 8008936:	4b16      	ldr	r3, [pc, #88]	; (8008990 <_vfiprintf_r+0x258>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	4630      	mov	r0, r6
 800893c:	f7fd fd24 	bl	8006388 <_printf_float>
 8008940:	4607      	mov	r7, r0
 8008942:	1c78      	adds	r0, r7, #1
 8008944:	d1d6      	bne.n	80088f4 <_vfiprintf_r+0x1bc>
 8008946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008948:	07d9      	lsls	r1, r3, #31
 800894a:	d405      	bmi.n	8008958 <_vfiprintf_r+0x220>
 800894c:	89ab      	ldrh	r3, [r5, #12]
 800894e:	059a      	lsls	r2, r3, #22
 8008950:	d402      	bmi.n	8008958 <_vfiprintf_r+0x220>
 8008952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008954:	f7ff f9d0 	bl	8007cf8 <__retarget_lock_release_recursive>
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	065b      	lsls	r3, r3, #25
 800895c:	f53f af12 	bmi.w	8008784 <_vfiprintf_r+0x4c>
 8008960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008962:	e711      	b.n	8008788 <_vfiprintf_r+0x50>
 8008964:	ab03      	add	r3, sp, #12
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	462a      	mov	r2, r5
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <_vfiprintf_r+0x258>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	4630      	mov	r0, r6
 8008970:	f7fd ff96 	bl	80068a0 <_printf_i>
 8008974:	e7e4      	b.n	8008940 <_vfiprintf_r+0x208>
 8008976:	bf00      	nop
 8008978:	0801ccbc 	.word	0x0801ccbc
 800897c:	0801ccdc 	.word	0x0801ccdc
 8008980:	0801cc9c 	.word	0x0801cc9c
 8008984:	0801ce54 	.word	0x0801ce54
 8008988:	0801ce5e 	.word	0x0801ce5e
 800898c:	08006389 	.word	0x08006389
 8008990:	08008713 	.word	0x08008713
 8008994:	0801ce5a 	.word	0x0801ce5a

08008998 <_sbrk_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_sbrk_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 fd4a 	bl	800143c <_sbrk>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_sbrk_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_sbrk_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	2000f8d4 	.word	0x2000f8d4

080089b8 <__sread>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	460c      	mov	r4, r1
 80089bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c0:	f000 f8e2 	bl	8008b88 <_read_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	bfab      	itete	ge
 80089c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ca:	89a3      	ldrhlt	r3, [r4, #12]
 80089cc:	181b      	addge	r3, r3, r0
 80089ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089d2:	bfac      	ite	ge
 80089d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d6:	81a3      	strhlt	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__swrite>:
 80089da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	461f      	mov	r7, r3
 80089e0:	898b      	ldrh	r3, [r1, #12]
 80089e2:	05db      	lsls	r3, r3, #23
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	4616      	mov	r6, r2
 80089ea:	d505      	bpl.n	80089f8 <__swrite+0x1e>
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2200      	movs	r2, #0
 80089f4:	f000 f898 	bl	8008b28 <_lseek_r>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	f000 b817 	b.w	8008a40 <_write_r>

08008a12 <__sseek>:
 8008a12:	b510      	push	{r4, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1a:	f000 f885 	bl	8008b28 <_lseek_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	bf15      	itete	ne
 8008a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strheq	r3, [r4, #12]
 8008a30:	bf18      	it	ne
 8008a32:	81a3      	strhne	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__sclose>:
 8008a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a3a:	f000 b831 	b.w	8008aa0 <_close_r>
	...

08008a40 <_write_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	; (8008a60 <_write_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7f8 fa16 	bl	8000e80 <_write>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_write_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_write_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	2000f8d4 	.word	0x2000f8d4

08008a64 <__assert_func>:
 8008a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a66:	4614      	mov	r4, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <__assert_func+0x2c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	68d8      	ldr	r0, [r3, #12]
 8008a72:	b14c      	cbz	r4, 8008a88 <__assert_func+0x24>
 8008a74:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <__assert_func+0x30>)
 8008a76:	9100      	str	r1, [sp, #0]
 8008a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a7c:	4906      	ldr	r1, [pc, #24]	; (8008a98 <__assert_func+0x34>)
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f000 f81e 	bl	8008ac0 <fiprintf>
 8008a84:	f000 f89f 	bl	8008bc6 <abort>
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <__assert_func+0x38>)
 8008a8a:	461c      	mov	r4, r3
 8008a8c:	e7f3      	b.n	8008a76 <__assert_func+0x12>
 8008a8e:	bf00      	nop
 8008a90:	20000010 	.word	0x20000010
 8008a94:	0801ce65 	.word	0x0801ce65
 8008a98:	0801ce72 	.word	0x0801ce72
 8008a9c:	0801cea0 	.word	0x0801cea0

08008aa0 <_close_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_close_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7f8 fc91 	bl	80013d2 <_close>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_close_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_close_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	2000f8d4 	.word	0x2000f8d4

08008ac0 <fiprintf>:
 8008ac0:	b40e      	push	{r1, r2, r3}
 8008ac2:	b503      	push	{r0, r1, lr}
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <fiprintf+0x20>)
 8008aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	f7ff fe31 	bl	8008738 <_vfiprintf_r>
 8008ad6:	b002      	add	sp, #8
 8008ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008adc:	b003      	add	sp, #12
 8008ade:	4770      	bx	lr
 8008ae0:	20000010 	.word	0x20000010

08008ae4 <_fstat_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <_fstat_r+0x20>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	f7f8 fc7a 	bl	80013ea <_fstat>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d102      	bne.n	8008b00 <_fstat_r+0x1c>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	b103      	cbz	r3, 8008b00 <_fstat_r+0x1c>
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	2000f8d4 	.word	0x2000f8d4

08008b08 <_isatty_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_isatty_r+0x1c>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7f8 fc79 	bl	800140a <_isatty>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_isatty_r+0x1a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_isatty_r+0x1a>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	2000f8d4 	.word	0x2000f8d4

08008b28 <_lseek_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	; (8008b48 <_lseek_r+0x20>)
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	4608      	mov	r0, r1
 8008b30:	4611      	mov	r1, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f7f8 fc72 	bl	8001420 <_lseek>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_lseek_r+0x1e>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_lseek_r+0x1e>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	2000f8d4 	.word	0x2000f8d4

08008b4c <__ascii_mbtowc>:
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	b901      	cbnz	r1, 8008b52 <__ascii_mbtowc+0x6>
 8008b50:	a901      	add	r1, sp, #4
 8008b52:	b142      	cbz	r2, 8008b66 <__ascii_mbtowc+0x1a>
 8008b54:	b14b      	cbz	r3, 8008b6a <__ascii_mbtowc+0x1e>
 8008b56:	7813      	ldrb	r3, [r2, #0]
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	1e10      	subs	r0, r2, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2001      	movne	r0, #1
 8008b62:	b002      	add	sp, #8
 8008b64:	4770      	bx	lr
 8008b66:	4610      	mov	r0, r2
 8008b68:	e7fb      	b.n	8008b62 <__ascii_mbtowc+0x16>
 8008b6a:	f06f 0001 	mvn.w	r0, #1
 8008b6e:	e7f8      	b.n	8008b62 <__ascii_mbtowc+0x16>

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f7ff b8c0 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	2000f8c8 	.word	0x2000f8c8

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f7ff b8bb 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	2000f8c8 	.word	0x2000f8c8

08008b88 <_read_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_read_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 fbfe 	bl	8001398 <_read>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_read_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_read_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	2000f8d4 	.word	0x2000f8d4

08008bac <__ascii_wctomb>:
 8008bac:	b149      	cbz	r1, 8008bc2 <__ascii_wctomb+0x16>
 8008bae:	2aff      	cmp	r2, #255	; 0xff
 8008bb0:	bf85      	ittet	hi
 8008bb2:	238a      	movhi	r3, #138	; 0x8a
 8008bb4:	6003      	strhi	r3, [r0, #0]
 8008bb6:	700a      	strbls	r2, [r1, #0]
 8008bb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bbc:	bf98      	it	ls
 8008bbe:	2001      	movls	r0, #1
 8008bc0:	4770      	bx	lr
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4770      	bx	lr

08008bc6 <abort>:
 8008bc6:	b508      	push	{r3, lr}
 8008bc8:	2006      	movs	r0, #6
 8008bca:	f000 f82b 	bl	8008c24 <raise>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	f7f8 fbd8 	bl	8001384 <_exit>

08008bd4 <_raise_r>:
 8008bd4:	291f      	cmp	r1, #31
 8008bd6:	b538      	push	{r3, r4, r5, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	d904      	bls.n	8008be8 <_raise_r+0x14>
 8008bde:	2316      	movs	r3, #22
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bea:	b112      	cbz	r2, 8008bf2 <_raise_r+0x1e>
 8008bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bf0:	b94b      	cbnz	r3, 8008c06 <_raise_r+0x32>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f830 	bl	8008c58 <_getpid_r>
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c02:	f000 b817 	b.w	8008c34 <_kill_r>
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d00a      	beq.n	8008c20 <_raise_r+0x4c>
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	d103      	bne.n	8008c16 <_raise_r+0x42>
 8008c0e:	2316      	movs	r3, #22
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	2001      	movs	r0, #1
 8008c14:	e7e7      	b.n	8008be6 <_raise_r+0x12>
 8008c16:	2400      	movs	r4, #0
 8008c18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	4798      	blx	r3
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7e0      	b.n	8008be6 <_raise_r+0x12>

08008c24 <raise>:
 8008c24:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <raise+0xc>)
 8008c26:	4601      	mov	r1, r0
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f7ff bfd3 	b.w	8008bd4 <_raise_r>
 8008c2e:	bf00      	nop
 8008c30:	20000010 	.word	0x20000010

08008c34 <_kill_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_kill_r+0x20>)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	f7f8 fb8f 	bl	8001364 <_kill>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d102      	bne.n	8008c50 <_kill_r+0x1c>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	b103      	cbz	r3, 8008c50 <_kill_r+0x1c>
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	bd38      	pop	{r3, r4, r5, pc}
 8008c52:	bf00      	nop
 8008c54:	2000f8d4 	.word	0x2000f8d4

08008c58 <_getpid_r>:
 8008c58:	f7f8 bb7c 	b.w	8001354 <_getpid>

08008c5c <log10f>:
 8008c5c:	b508      	push	{r3, lr}
 8008c5e:	ed2d 8b02 	vpush	{d8}
 8008c62:	eeb0 8a40 	vmov.f32	s16, s0
 8008c66:	f000 f845 	bl	8008cf4 <__ieee754_log10f>
 8008c6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8008c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c72:	d60f      	bvs.n	8008c94 <log10f+0x38>
 8008c74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7c:	d80a      	bhi.n	8008c94 <log10f+0x38>
 8008c7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	d108      	bne.n	8008c9a <log10f+0x3e>
 8008c88:	f7fd fabc 	bl	8006204 <__errno>
 8008c8c:	2322      	movs	r3, #34	; 0x22
 8008c8e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008cb0 <log10f+0x54>
 8008c92:	6003      	str	r3, [r0, #0]
 8008c94:	ecbd 8b02 	vpop	{d8}
 8008c98:	bd08      	pop	{r3, pc}
 8008c9a:	f7fd fab3 	bl	8006204 <__errno>
 8008c9e:	ecbd 8b02 	vpop	{d8}
 8008ca2:	2321      	movs	r3, #33	; 0x21
 8008ca4:	6003      	str	r3, [r0, #0]
 8008ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008caa:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <log10f+0x58>)
 8008cac:	f000 b8e4 	b.w	8008e78 <nanf>
 8008cb0:	ff800000 	.word	0xff800000
 8008cb4:	0801cea0 	.word	0x0801cea0

08008cb8 <sqrtf>:
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	ed2d 8b02 	vpush	{d8}
 8008cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8008cc2:	f000 f86f 	bl	8008da4 <__ieee754_sqrtf>
 8008cc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8008cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cce:	d60c      	bvs.n	8008cea <sqrtf+0x32>
 8008cd0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008cf0 <sqrtf+0x38>
 8008cd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	d505      	bpl.n	8008cea <sqrtf+0x32>
 8008cde:	f7fd fa91 	bl	8006204 <__errno>
 8008ce2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008ce6:	2321      	movs	r3, #33	; 0x21
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	ecbd 8b02 	vpop	{d8}
 8008cee:	bd08      	pop	{r3, pc}
 8008cf0:	00000000 	.word	0x00000000

08008cf4 <__ieee754_log10f>:
 8008cf4:	b508      	push	{r3, lr}
 8008cf6:	ee10 2a10 	vmov	r2, s0
 8008cfa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008cfe:	ed2d 8b02 	vpush	{d8}
 8008d02:	d108      	bne.n	8008d16 <__ieee754_log10f+0x22>
 8008d04:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008d8c <__ieee754_log10f+0x98>
 8008d08:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008d90 <__ieee754_log10f+0x9c>
 8008d0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008d10:	ecbd 8b02 	vpop	{d8}
 8008d14:	bd08      	pop	{r3, pc}
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	da02      	bge.n	8008d20 <__ieee754_log10f+0x2c>
 8008d1a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008d1e:	e7f3      	b.n	8008d08 <__ieee754_log10f+0x14>
 8008d20:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008d24:	db02      	blt.n	8008d2c <__ieee754_log10f+0x38>
 8008d26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d2a:	e7f1      	b.n	8008d10 <__ieee754_log10f+0x1c>
 8008d2c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008d30:	bfbf      	itttt	lt
 8008d32:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8008d94 <__ieee754_log10f+0xa0>
 8008d36:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8008d3a:	f06f 0118 	mvnlt.w	r1, #24
 8008d3e:	ee17 2a90 	vmovlt	r2, s15
 8008d42:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8008d46:	bfa8      	it	ge
 8008d48:	2100      	movge	r1, #0
 8008d4a:	3b7f      	subs	r3, #127	; 0x7f
 8008d4c:	440b      	add	r3, r1
 8008d4e:	0fd9      	lsrs	r1, r3, #31
 8008d50:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008d5c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8008d60:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008d64:	ee00 3a10 	vmov	s0, r3
 8008d68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8008d6c:	f000 f81e 	bl	8008dac <logf>
 8008d70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008d98 <__ieee754_log10f+0xa4>
 8008d74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008d9c <__ieee754_log10f+0xa8>
 8008d7c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008d80:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008da0 <__ieee754_log10f+0xac>
 8008d84:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008d88:	e7c2      	b.n	8008d10 <__ieee754_log10f+0x1c>
 8008d8a:	bf00      	nop
 8008d8c:	cc000000 	.word	0xcc000000
 8008d90:	00000000 	.word	0x00000000
 8008d94:	4c000000 	.word	0x4c000000
 8008d98:	3ede5bd9 	.word	0x3ede5bd9
 8008d9c:	355427db 	.word	0x355427db
 8008da0:	3e9a2080 	.word	0x3e9a2080

08008da4 <__ieee754_sqrtf>:
 8008da4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008da8:	4770      	bx	lr
	...

08008dac <logf>:
 8008dac:	ee10 3a10 	vmov	r3, s0
 8008db0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008db4:	b410      	push	{r4}
 8008db6:	d055      	beq.n	8008e64 <logf+0xb8>
 8008db8:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8008dbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8008dc0:	d31a      	bcc.n	8008df8 <logf+0x4c>
 8008dc2:	005a      	lsls	r2, r3, #1
 8008dc4:	d104      	bne.n	8008dd0 <logf+0x24>
 8008dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dca:	2001      	movs	r0, #1
 8008dcc:	f000 b866 	b.w	8008e9c <__math_divzerof>
 8008dd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008dd4:	d043      	beq.n	8008e5e <logf+0xb2>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	db02      	blt.n	8008de0 <logf+0x34>
 8008dda:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8008dde:	d303      	bcc.n	8008de8 <logf+0x3c>
 8008de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de4:	f000 b86a 	b.w	8008ebc <__math_invalidf>
 8008de8:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008e6c <logf+0xc0>
 8008dec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008df0:	ee10 3a10 	vmov	r3, s0
 8008df4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8008df8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8008dfc:	491c      	ldr	r1, [pc, #112]	; (8008e70 <logf+0xc4>)
 8008dfe:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8008e02:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8008e06:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8008e0a:	0dd4      	lsrs	r4, r2, #23
 8008e0c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8008e10:	05e4      	lsls	r4, r4, #23
 8008e12:	ed90 6b00 	vldr	d6, [r0]
 8008e16:	1b1b      	subs	r3, r3, r4
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8008e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e24:	15d2      	asrs	r2, r2, #23
 8008e26:	eea6 0b07 	vfma.f64	d0, d6, d7
 8008e2a:	ed90 6b02 	vldr	d6, [r0, #8]
 8008e2e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8008e32:	ee07 2a90 	vmov	s15, r2
 8008e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e3e:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8008e42:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8008e46:	eea5 7b00 	vfma.f64	d7, d5, d0
 8008e4a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8008e4e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8008e52:	eea5 7b04 	vfma.f64	d7, d5, d4
 8008e56:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008e5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008e74 <logf+0xc8>
 8008e68:	e7f9      	b.n	8008e5e <logf+0xb2>
 8008e6a:	bf00      	nop
 8008e6c:	4b000000 	.word	0x4b000000
 8008e70:	0801cfb0 	.word	0x0801cfb0
 8008e74:	00000000 	.word	0x00000000

08008e78 <nanf>:
 8008e78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e80 <nanf+0x8>
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	7fc00000 	.word	0x7fc00000

08008e84 <with_errnof>:
 8008e84:	b513      	push	{r0, r1, r4, lr}
 8008e86:	4604      	mov	r4, r0
 8008e88:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008e8c:	f7fd f9ba 	bl	8006204 <__errno>
 8008e90:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008e94:	6004      	str	r4, [r0, #0]
 8008e96:	b002      	add	sp, #8
 8008e98:	bd10      	pop	{r4, pc}
	...

08008e9c <__math_divzerof>:
 8008e9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008ea0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8008eaa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008eb8 <__math_divzerof+0x1c>
 8008eae:	2022      	movs	r0, #34	; 0x22
 8008eb0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008eb4:	f7ff bfe6 	b.w	8008e84 <with_errnof>
 8008eb8:	00000000 	.word	0x00000000

08008ebc <__math_invalidf>:
 8008ebc:	eef0 7a40 	vmov.f32	s15, s0
 8008ec0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008ec4:	eef4 7a67 	vcmp.f32	s15, s15
 8008ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ecc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8008ed0:	d602      	bvs.n	8008ed8 <__math_invalidf+0x1c>
 8008ed2:	2021      	movs	r0, #33	; 0x21
 8008ed4:	f7ff bfd6 	b.w	8008e84 <with_errnof>
 8008ed8:	4770      	bx	lr
	...

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
